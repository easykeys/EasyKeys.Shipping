namespace EasyKeys.Shipping.DHL.Abstractions.OpenApis.V2.Express;

using System;
using System.Net.Http.Headers;
using System.Text;

using EasyKeys.Shipping.DHL.Abstractions.Options;

using Microsoft.Extensions.Options;
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

using System = global::System;

[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DHLExpressApi
{
    private string _baseUrl = "https://api-mock.dhl.com/mydhlapi";
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    private DHLExpressApiOptions _options;

    public DHLExpressApi(System.Net.Http.HttpClient httpClient, IOptionsMonitor<DHLExpressApiOptions> options)
    {
        _httpClient = httpClient;
        _options = options.CurrentValue;
        _baseUrl = _options.BaseUrl;
        _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
    }

    public string BaseUrl
    {
        get { return _baseUrl; }
        set { _baseUrl = value; }
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <summary>
    /// Cancel a DHL Express pickup booking request
    /// </summary>
    /// <remarks>
    /// The Cancel Pickup service can be used to cancel a DHL Express pickup booking request. Delete of a previous successful pickups are subject to entire consolidated pickup if applicable.
    /// </remarks>
    /// <param name="requestorName">Name of the person requesting to cancel the scheduled pickup</param>
    /// <param name="reason">Provide why scheduled pickup is being cancelled</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="dispatchConfirmationNumber">Shipment pickup confirmation number for example `PRG999126012345`</param>
    /// <returns>Pickup cancelled</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task ExpApiPickupsCancelAsync(string requestorName, string reason, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, string dispatchConfirmationNumber)
    {
        return ExpApiPickupsCancelAsync(requestorName, reason, message_Reference, message_Reference_Date, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, dispatchConfirmationNumber, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Cancel a DHL Express pickup booking request
    /// </summary>
    /// <remarks>
    /// The Cancel Pickup service can be used to cancel a DHL Express pickup booking request. Delete of a previous successful pickups are subject to entire consolidated pickup if applicable.
    /// </remarks>
    /// <param name="requestorName">Name of the person requesting to cancel the scheduled pickup</param>
    /// <param name="reason">Provide why scheduled pickup is being cancelled</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="dispatchConfirmationNumber">Shipment pickup confirmation number for example `PRG999126012345`</param>
    /// <returns>Pickup cancelled</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task ExpApiPickupsCancelAsync(string requestorName, string reason, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, string dispatchConfirmationNumber, System.Threading.CancellationToken cancellationToken)
    {
        if (dispatchConfirmationNumber == null)
            throw new System.ArgumentNullException("dispatchConfirmationNumber");

        if (requestorName == null)
            throw new System.ArgumentNullException("requestorName");

        if (reason == null)
            throw new System.ArgumentNullException("reason");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pickups/{dispatchConfirmationNumber}?");
        urlBuilder_.Replace("{dispatchConfirmationNumber}", System.Uri.EscapeDataString(ConvertToString(dispatchConfirmationNumber, System.Globalization.CultureInfo.InvariantCulture)));
        urlBuilder_.Append(System.Uri.EscapeDataString("requestorName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requestorName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("reason") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reason, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                request_.Method = new System.Net.Http.HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Pickup already cancelled or completed / Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Pickup not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update pickup information for an existing DHL Express pickup booking request
    /// </summary>
    /// <remarks>
    /// The Update Pickup service can be used to update pickup information for an existing DHL Express pickup booking request. Update of a previous successful pickups are subject to entire consolidated pickup if applicable.
    /// </remarks>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="body">Details about the requested pickup updates</param>
    /// <param name="dispatchConfirmationNumber">Shipment pickup confirmation number for example `PRG999126012345`</param>
    /// <returns>Pickup updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<SupermodelIoLogisticsExpressUpdatePickupResponse> ExpApiPickupsUpdateAsync(string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, SupermodelIoLogisticsExpressUpdatePickupRequest body, string dispatchConfirmationNumber)
    {
        return ExpApiPickupsUpdateAsync(message_Reference, message_Reference_Date, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, body, dispatchConfirmationNumber, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update pickup information for an existing DHL Express pickup booking request
    /// </summary>
    /// <remarks>
    /// The Update Pickup service can be used to update pickup information for an existing DHL Express pickup booking request. Update of a previous successful pickups are subject to entire consolidated pickup if applicable.
    /// </remarks>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="body">Details about the requested pickup updates</param>
    /// <param name="dispatchConfirmationNumber">Shipment pickup confirmation number for example `PRG999126012345`</param>
    /// <returns>Pickup updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressUpdatePickupResponse> ExpApiPickupsUpdateAsync(string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, SupermodelIoLogisticsExpressUpdatePickupRequest body, string dispatchConfirmationNumber, System.Threading.CancellationToken cancellationToken)
    {
        if (dispatchConfirmationNumber == null)
            throw new System.ArgumentNullException("dispatchConfirmationNumber");

        if (body == null)
            throw new System.ArgumentNullException("body");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pickups/{dispatchConfirmationNumber}");
        urlBuilder_.Replace("{dispatchConfirmationNumber}", System.Uri.EscapeDataString(ConvertToString(dispatchConfirmationNumber, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                var content_ = new System.Net.Http.StringContent(json_);
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PATCH");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressUpdatePickupResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Pickup not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 422)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Unprocessable Entity", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Create a DHL Express pickup booking request
    /// </summary>
    /// <remarks>
    /// The Pickup service creates a DHL Express pickup booking request
    /// </remarks>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="body">Details about the requested pickup</param>
    /// <returns>Pickup created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<SupermodelIoLogisticsExpressPickupResponse> ExpApiPickupsAsync(string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, SupermodelIoLogisticsExpressPickupRequest body)
    {
        return ExpApiPickupsAsync(message_Reference, message_Reference_Date, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, body, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create a DHL Express pickup booking request
    /// </summary>
    /// <remarks>
    /// The Pickup service creates a DHL Express pickup booking request
    /// </remarks>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="body">Details about the requested pickup</param>
    /// <returns>Pickup created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressPickupResponse> ExpApiPickupsAsync(string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, SupermodelIoLogisticsExpressPickupRequest body, System.Threading.CancellationToken cancellationToken)
    {
        if (body == null)
            throw new System.ArgumentNullException("body");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pickups");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                var content_ = new System.Net.Http.StringContent(json_);
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressPickupResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Service to allocate identifiers upfront for DHL Express Breakbulk or Loose Break Bulk shipments
    /// </summary>
    /// <remarks>
    /// Service to allocate identifiers upfront for DHL Express Breakbulk or Loose Break Bulk shipments. Requires authorization to use this service from DHL Express.
    /// </remarks>
    /// <param name="accountNumber">DHL Express customer account number</param>
    /// <param name="type">Type of DHL Express identifier to retrieve</param>
    /// <param name="size">Number of identifiers to be retrieved</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Identifers provided</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<SupermodelIoLogisticsExpressIdentifierResponse> ExpApiIdentifiersAsync(string accountNumber, Type type, string size, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version)
    {
        return ExpApiIdentifiersAsync(accountNumber, type, size, message_Reference, message_Reference_Date, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Service to allocate identifiers upfront for DHL Express Breakbulk or Loose Break Bulk shipments
    /// </summary>
    /// <remarks>
    /// Service to allocate identifiers upfront for DHL Express Breakbulk or Loose Break Bulk shipments. Requires authorization to use this service from DHL Express.
    /// </remarks>
    /// <param name="accountNumber">DHL Express customer account number</param>
    /// <param name="type">Type of DHL Express identifier to retrieve</param>
    /// <param name="size">Number of identifiers to be retrieved</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Identifers provided</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressIdentifierResponse> ExpApiIdentifiersAsync(string accountNumber, Type type, string size, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, System.Threading.CancellationToken cancellationToken)
    {
        if (accountNumber == null)
            throw new System.ArgumentNullException("accountNumber");

        if (type == null)
            throw new System.ArgumentNullException("type");

        if (size == null)
            throw new System.ArgumentNullException("size");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/identifiers?");
        urlBuilder_.Append(System.Uri.EscapeDataString("accountNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressIdentifierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Validate DHL Express pickup/delivery capabilities at origin/destination
    /// </summary>
    /// <remarks>
    /// Validates if DHL Express has got pickup/delivery capabilities at origin/destination
    /// </remarks>
    /// <param name="countryCode">A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code</param>
    /// <param name="postalCode">Text specifying the postal code for an address. https://gs1.org/voc/postalCode</param>
    /// <param name="cityName">Text specifying the city name</param>
    /// <param name="countyName">Text specifying the county name</param>
    /// <param name="strictValidation">If set to true service will return no records when exact valid match not found</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Address validated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressAddressValidateResponse> ExpApiAddressValidateAsync(
        Type2 type,
        string countryCode,
        string postalCode,
        string cityName,
        string? countyName = null,
        bool? strictValidation = false,
        string? message_Reference = null,
        string? message_Reference_Date = null,
        string? plugin_Name = null,
        string? plugin_Version = null,
        string? shipping_System_Platform_Name = null,
        string? shipping_System_Platform_Version = null,
        string? webstore_Platform_Name = null,
        string? webstore_Platform_Version = null,
        string? x_version = null,
        System.Threading.CancellationToken cancellationToken = default)
    {
        if (type == null)
            throw new System.ArgumentNullException("type");

        if (countryCode == null)
            throw new System.ArgumentNullException("countryCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/address-validate?");
        urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("countryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(countryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        if (postalCode != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("postalCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postalCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (cityName != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("cityName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cityName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (countyName != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("countyName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(countyName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (strictValidation != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("strictValidation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(strictValidation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressAddressValidateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Retrieve Rates for a one piece Shipment
    /// </summary>
    /// <remarks>
    /// The Rate request will return DHL's product capabilities and prices (where applicable) based on the input data. Using the shipper and receiver address as well as the dimension and weights of the pieces belonging to a shipment, this operation returns the available products including the shipping price (where applicable)
    /// </remarks>
    /// <param name="accountNumber">DHL Express customer account number</param>
    /// <param name="originCountryCode">A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code</param>
    /// <param name="originPostalCode">Text specifying the postal code for an address. https://gs1.org/voc/postalCode</param>
    /// <param name="originCityName">Text specifying the city name</param>
    /// <param name="destinationCountryCode">A short text string code (see values defined in ISO 3166) specifying the shipment destination country. https://gs1.org/voc/Country, Alpha-2 Code</param>
    /// <param name="destinationPostalCode">Text specifying the postal code for an address. https://gs1.org/voc/postalCode</param>
    /// <param name="destinationCityName">Text specifying the city name</param>
    /// <param name="weight">Gross weight of the shipment including packaging.</param>
    /// <param name="length">Total length of the shipment including packaging.</param>
    /// <param name="width">Total width of the shipment including packaging.</param>
    /// <param name="height">Total height of the shipment including packaging.</param>
    /// <param name="plannedShippingDate">Timestamp represents the date you plan to ship your prospected shipment</param>
    /// <param name="unitOfMeasurement">The UnitOfMeasurement node conveys the unit of measurements used in the operation. This single value corresponds to the units of weight and measurement which are used throughout the message processing.</param>
    /// <param name="nextBusinessDay">When set to true and there are no products available for given plannedShippingDate then products available for the next possible pickup date are returned</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="strictValidation">If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request.</param>
    /// <param name="getAllValueAddedServices">Option to return list of all value added services and its rule groups if applicable</param>
    /// <param name="requestEstimatedDeliveryDate">Option to return Estimated Delivery Date in response</param>
    /// <param name="estimatedDeliveryDateType">Estimated Delivery Date Type. QDDF: is the fastest transit time as quoted to the customer at booking or shipment creation. When clearance or any other non-transport operational component is expected to impact transit time, QDDF does not constitute DHL's service commitment. QDDC: cconstitutes DHL's service commitment as quoted at booking or shipment creation. QDDC builds in clearance time, and potentially other special operational non-transport component(s), when relevant.</param>
    /// <returns>Rates found</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressRates> ExpApiRatesAsync(
        string accountNumber,
        string originCountryCode,
        string originPostalCode,
        string originCityName,
        string destinationCountryCode,
        string destinationPostalCode,
        string destinationCityName,
        double weight,
        double length,
        double width,
        double height,
        string plannedShippingDate,
        bool isCustomsDeclarable,
        UnitOfMeasurement unitOfMeasurement,
        bool? nextBusinessDay,
        bool? strictValidation,
        bool? getAllValueAddedServices,
        bool? requestEstimatedDeliveryDate,
        EstimatedDeliveryDateType? estimatedDeliveryDateType,
        string? message_Reference = null,
        string? message_Reference_Date = null,
        string? plugin_Name = null,
        string? plugin_Version = null,
        string? shipping_System_Platform_Name = null,
        string? shipping_System_Platform_Version = null,
        string? webstore_Platform_Name = null,
        string? webstore_Platform_Version = null,
        string? x_version = null,
        System.Threading.CancellationToken cancellationToken = default)
    {
        if (accountNumber == null)
            throw new System.ArgumentNullException("accountNumber");

        if (originCountryCode == null)
            throw new System.ArgumentNullException("originCountryCode");

        if (originCityName == null)
            throw new System.ArgumentNullException("originCityName");

        if (destinationCountryCode == null)
            throw new System.ArgumentNullException("destinationCountryCode");

        if (destinationCityName == null)
            throw new System.ArgumentNullException("destinationCityName");

        if (weight == null)
            throw new System.ArgumentNullException("weight");

        if (length == null)
            throw new System.ArgumentNullException("length");

        if (width == null)
            throw new System.ArgumentNullException("width");

        if (height == null)
            throw new System.ArgumentNullException("height");

        if (plannedShippingDate == null)
            throw new System.ArgumentNullException("plannedShippingDate");

        if (isCustomsDeclarable == null)
            throw new System.ArgumentNullException("isCustomsDeclarable");

        if (unitOfMeasurement == null)
            throw new System.ArgumentNullException("unitOfMeasurement");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rates?");
        urlBuilder_.Append(System.Uri.EscapeDataString("accountNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("originCountryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originCountryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        if (originPostalCode != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("originPostalCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originPostalCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Append(System.Uri.EscapeDataString("originCityName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originCityName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("destinationCountryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(destinationCountryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        if (destinationPostalCode != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("destinationPostalCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(destinationPostalCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Append(System.Uri.EscapeDataString("destinationCityName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(destinationCityName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("weight") + "=").Append(System.Uri.EscapeDataString(ConvertToString(weight, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("length") + "=").Append(System.Uri.EscapeDataString(ConvertToString(length, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("width") + "=").Append(System.Uri.EscapeDataString(ConvertToString(width, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("height") + "=").Append(System.Uri.EscapeDataString(ConvertToString(height, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("plannedShippingDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(plannedShippingDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("isCustomsDeclarable") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isCustomsDeclarable, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("unitOfMeasurement") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unitOfMeasurement, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        if (nextBusinessDay != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("nextBusinessDay") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nextBusinessDay, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (strictValidation != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("strictValidation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(strictValidation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (getAllValueAddedServices != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("getAllValueAddedServices") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getAllValueAddedServices, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (requestEstimatedDeliveryDate != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("requestEstimatedDeliveryDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requestEstimatedDeliveryDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (estimatedDeliveryDateType != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("estimatedDeliveryDateType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(estimatedDeliveryDateType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressRates>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 500)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Process errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Retrieve Rates for Multi-piece Shipments
    /// </summary>
    /// <remarks>
    /// The Rate request will return DHL's product capabilities and prices (where applicable) based on the input data. Using the shipper and receiver address as well as the dimension and weights of the pieces belonging to a shipment, this operation returns the available products including the shipping price (where applicable)
    /// </remarks>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="strictValidation">If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request.</param>
    /// <param name="body">Details about the requested shipment</param>
    /// <returns>Rates found</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<SupermodelIoLogisticsExpressRates> ExpApiRatesManyAsync(string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, bool? strictValidation, SupermodelIoLogisticsExpressRateRequest body)
    {
        return ExpApiRatesManyAsync(message_Reference, message_Reference_Date, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, strictValidation, body, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Retrieve Rates for Multi-piece Shipments
    /// </summary>
    /// <remarks>
    /// The Rate request will return DHL's product capabilities and prices (where applicable) based on the input data. Using the shipper and receiver address as well as the dimension and weights of the pieces belonging to a shipment, this operation returns the available products including the shipping price (where applicable)
    /// </remarks>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="strictValidation">If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request.</param>
    /// <param name="body">Details about the requested shipment</param>
    /// <returns>Rates found</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressRates> ExpApiRatesManyAsync(string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, bool? strictValidation, SupermodelIoLogisticsExpressRateRequest body, System.Threading.CancellationToken cancellationToken)
    {
        if (body == null)
            throw new System.ArgumentNullException("body");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rates?");
        if (strictValidation != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("strictValidation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(strictValidation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                var content_ = new System.Net.Http.StringContent(json_);
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressRates>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 500)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Process errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Landed Cost
    /// </summary>
    /// <remarks>
    /// The Landed Cost section allows further information around products being sold to be provided. In return the duty, tax and shipping charges are calculated in real time and provides transparency about any extra costs the buyer may have to pay before they reach them.
    /// </remarks>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="body">Details about the requested shipment</param>
    /// <returns>Landed cost</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<SupermodelIoLogisticsExpressRates> ExpApiLandedCostAsync(string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, SupermodelIoLogisticsExpressLandedCostRequest body)
    {
        return ExpApiLandedCostAsync(message_Reference, message_Reference_Date, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, body, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Landed Cost
    /// </summary>
    /// <remarks>
    /// The Landed Cost section allows further information around products being sold to be provided. In return the duty, tax and shipping charges are calculated in real time and provides transparency about any extra costs the buyer may have to pay before they reach them.
    /// </remarks>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="body">Details about the requested shipment</param>
    /// <returns>Landed cost</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressRates> ExpApiLandedCostAsync(string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, SupermodelIoLogisticsExpressLandedCostRequest body, System.Threading.CancellationToken cancellationToken)
    {
        if (body == null)
            throw new System.ArgumentNullException("body");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/landed-cost");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                var content_ = new System.Net.Http.StringContent(json_);
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressRates>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 500)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Process errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Retrieve available DHL Express products for a one piece Shipment
    /// </summary>
    /// <remarks>
    /// The GET Products API will return DHL's product capabilities for a certain set of input data. 
    /// <br/>Using the shipper and receiver address as well as the dimension and weight of the piece belonging to a shipment, this operation returns the available products.
    /// </remarks>
    /// <param name="accountNumber">DHL Express customer account number</param>
    /// <param name="originCountryCode">A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code</param>
    /// <param name="originPostalCode">Text specifying the postal code for an address. https://gs1.org/voc/postalCode</param>
    /// <param name="originCityName">Text specifying the city name</param>
    /// <param name="destinationCountryCode">A short text string code (see values defined in ISO 3166) specifying the shipment destination country. https://gs1.org/voc/Country, Alpha-2 Code</param>
    /// <param name="destinationPostalCode">Text specifying the postal code for an address. https://gs1.org/voc/postalCode</param>
    /// <param name="destinationCityName">Text specifying the city name</param>
    /// <param name="weight">Gross weight of the shipment including packaging.</param>
    /// <param name="length">Total length of the shipment including packaging.</param>
    /// <param name="width">Total width of the shipment including packaging.</param>
    /// <param name="height">Total height of the shipment including packaging.</param>
    /// <param name="plannedShippingDate">Timestamp represents the date you plan to ship your prospected shipment</param>
    /// <param name="unitOfMeasurement">The UnitOfMeasurement node conveys the unit of measurements used in the operation. This single value corresponds to the units of weight and measurement which are used throughout the message processing.</param>
    /// <param name="nextBusinessDay">When set to true and there are no products available for given plannedShippingDate then products available for the next possible pickup date are returned</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="strictValidation">If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request.</param>
    /// <param name="getAllValueAddedServices">Option to return list of all value added services and its rule groups if applicable</param>
    /// <param name="requestEstimatedDeliveryDate">Option to return Estimated Delivery Date in response</param>
    /// <param name="estimatedDeliveryDateType">Estimated Delivery Date Type. QDDF: is the fastest transit time as quoted to the customer at booking or shipment creation. When clearance or any other non-transport operational component is expected to impact transit time, QDDF does not constitute DHL's service commitment. QDDC: cconstitutes DHL's service commitment as quoted at booking or shipment creation. QDDC builds in clearance time, and potentially other special operational non-transport component(s), when relevant.</param>
    /// <returns>Products found</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<SupermodelIoLogisticsExpressProducts> ExpApiProductsAsync(string accountNumber, string originCountryCode, string originPostalCode, string originCityName, string destinationCountryCode, string destinationPostalCode, string destinationCityName, double weight, double length, double width, double height, string plannedShippingDate, bool isCustomsDeclarable, UnitOfMeasurement unitOfMeasurement, bool? nextBusinessDay, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, bool? strictValidation, bool? getAllValueAddedServices, bool? requestEstimatedDeliveryDate, EstimatedDeliveryDateType? estimatedDeliveryDateType)
    {
        return ExpApiProductsAsync(accountNumber, originCountryCode, originPostalCode, originCityName, destinationCountryCode, destinationPostalCode, destinationCityName, weight, length, width, height, plannedShippingDate, isCustomsDeclarable, unitOfMeasurement, nextBusinessDay, message_Reference, message_Reference_Date, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, strictValidation, getAllValueAddedServices, requestEstimatedDeliveryDate, estimatedDeliveryDateType, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Retrieve available DHL Express products for a one piece Shipment
    /// </summary>
    /// <remarks>
    /// The GET Products API will return DHL's product capabilities for a certain set of input data. 
    /// <br/>Using the shipper and receiver address as well as the dimension and weight of the piece belonging to a shipment, this operation returns the available products.
    /// </remarks>
    /// <param name="accountNumber">DHL Express customer account number</param>
    /// <param name="originCountryCode">A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code</param>
    /// <param name="originPostalCode">Text specifying the postal code for an address. https://gs1.org/voc/postalCode</param>
    /// <param name="originCityName">Text specifying the city name</param>
    /// <param name="destinationCountryCode">A short text string code (see values defined in ISO 3166) specifying the shipment destination country. https://gs1.org/voc/Country, Alpha-2 Code</param>
    /// <param name="destinationPostalCode">Text specifying the postal code for an address. https://gs1.org/voc/postalCode</param>
    /// <param name="destinationCityName">Text specifying the city name</param>
    /// <param name="weight">Gross weight of the shipment including packaging.</param>
    /// <param name="length">Total length of the shipment including packaging.</param>
    /// <param name="width">Total width of the shipment including packaging.</param>
    /// <param name="height">Total height of the shipment including packaging.</param>
    /// <param name="plannedShippingDate">Timestamp represents the date you plan to ship your prospected shipment</param>
    /// <param name="unitOfMeasurement">The UnitOfMeasurement node conveys the unit of measurements used in the operation. This single value corresponds to the units of weight and measurement which are used throughout the message processing.</param>
    /// <param name="nextBusinessDay">When set to true and there are no products available for given plannedShippingDate then products available for the next possible pickup date are returned</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="strictValidation">If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request.</param>
    /// <param name="getAllValueAddedServices">Option to return list of all value added services and its rule groups if applicable</param>
    /// <param name="requestEstimatedDeliveryDate">Option to return Estimated Delivery Date in response</param>
    /// <param name="estimatedDeliveryDateType">Estimated Delivery Date Type. QDDF: is the fastest transit time as quoted to the customer at booking or shipment creation. When clearance or any other non-transport operational component is expected to impact transit time, QDDF does not constitute DHL's service commitment. QDDC: cconstitutes DHL's service commitment as quoted at booking or shipment creation. QDDC builds in clearance time, and potentially other special operational non-transport component(s), when relevant.</param>
    /// <returns>Products found</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressProducts> ExpApiProductsAsync(string accountNumber, string originCountryCode, string originPostalCode, string originCityName, string destinationCountryCode, string destinationPostalCode, string destinationCityName, double weight, double length, double width, double height, string plannedShippingDate, bool isCustomsDeclarable, UnitOfMeasurement unitOfMeasurement, bool? nextBusinessDay, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, bool? strictValidation, bool? getAllValueAddedServices, bool? requestEstimatedDeliveryDate, EstimatedDeliveryDateType? estimatedDeliveryDateType, System.Threading.CancellationToken cancellationToken)
    {
        if (accountNumber == null)
            throw new System.ArgumentNullException("accountNumber");

        if (originCountryCode == null)
            throw new System.ArgumentNullException("originCountryCode");

        if (originCityName == null)
            throw new System.ArgumentNullException("originCityName");

        if (destinationCountryCode == null)
            throw new System.ArgumentNullException("destinationCountryCode");

        if (destinationCityName == null)
            throw new System.ArgumentNullException("destinationCityName");

        if (weight == null)
            throw new System.ArgumentNullException("weight");

        if (length == null)
            throw new System.ArgumentNullException("length");

        if (width == null)
            throw new System.ArgumentNullException("width");

        if (height == null)
            throw new System.ArgumentNullException("height");

        if (plannedShippingDate == null)
            throw new System.ArgumentNullException("plannedShippingDate");

        if (isCustomsDeclarable == null)
            throw new System.ArgumentNullException("isCustomsDeclarable");

        if (unitOfMeasurement == null)
            throw new System.ArgumentNullException("unitOfMeasurement");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/products?");
        urlBuilder_.Append(System.Uri.EscapeDataString("accountNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("originCountryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originCountryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        if (originPostalCode != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("originPostalCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originPostalCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Append(System.Uri.EscapeDataString("originCityName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originCityName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("destinationCountryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(destinationCountryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        if (destinationPostalCode != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("destinationPostalCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(destinationPostalCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Append(System.Uri.EscapeDataString("destinationCityName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(destinationCityName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("weight") + "=").Append(System.Uri.EscapeDataString(ConvertToString(weight, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("length") + "=").Append(System.Uri.EscapeDataString(ConvertToString(length, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("width") + "=").Append(System.Uri.EscapeDataString(ConvertToString(width, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("height") + "=").Append(System.Uri.EscapeDataString(ConvertToString(height, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("plannedShippingDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(plannedShippingDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("isCustomsDeclarable") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isCustomsDeclarable, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("unitOfMeasurement") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unitOfMeasurement, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        if (nextBusinessDay != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("nextBusinessDay") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nextBusinessDay, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (strictValidation != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("strictValidation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(strictValidation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (getAllValueAddedServices != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("getAllValueAddedServices") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getAllValueAddedServices, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (requestEstimatedDeliveryDate != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("requestEstimatedDeliveryDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requestEstimatedDeliveryDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (estimatedDeliveryDateType != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("estimatedDeliveryDateType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(estimatedDeliveryDateType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressProducts>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 500)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Process errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Track a single DHL Express Shipment
    /// </summary>
    /// <remarks>
    /// The Tracking service retrieves tracking statuses for a single DHL Express Shipment. &lt;br&gt; Waybill numbers to be used during testing for Tracking. &lt;br&gt; Please note that when testing the Tracking service, only the waybill numbers below are loaded and any production waybill numbers or ones created via shipment will not be trackable. &lt;br&gt;
    /// <br/>  9356579890      4818240420      5584773180      5786694550    2449648740  
    /// <br/>  5980622760      5980622970      5980623180      5980770460    6781059250  
    /// <br/>  9077880070      5786694760      7957673080      5786696720    8066924740
    /// </remarks>
    /// <param name="shipmentTrackingNumber">DHL Express shipment identification number</param>
    /// <param name="requestControlledAccessDataCodes">Query parameter to request to return values of controlled access code fields in response.</param>
    /// <param name="requestGMTOffsetPerEvent">Query parameter to request to return GMT Offset of each event in response, for both shipment level and piece level.</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="accept_Language">Format {3-character language code}</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Shipment details found</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<SupermodelIoLogisticsExpressTrackingResponse> ExpApiShipmentsTrackingAsync(string shipmentTrackingNumber, TrackingView? trackingView, LevelOfDetail? levelOfDetail, bool? requestControlledAccessDataCodes, bool? requestGMTOffsetPerEvent, string message_Reference, string message_Reference_Date, string accept_Language, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version)
    {
        return ExpApiShipmentsTrackingAsync(shipmentTrackingNumber, trackingView, levelOfDetail, requestControlledAccessDataCodes, requestGMTOffsetPerEvent, message_Reference, message_Reference_Date, accept_Language, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Track a single DHL Express Shipment
    /// </summary>
    /// <remarks>
    /// The Tracking service retrieves tracking statuses for a single DHL Express Shipment. &lt;br&gt; Waybill numbers to be used during testing for Tracking. &lt;br&gt; Please note that when testing the Tracking service, only the waybill numbers below are loaded and any production waybill numbers or ones created via shipment will not be trackable. &lt;br&gt;
    /// <br/>  9356579890      4818240420      5584773180      5786694550    2449648740  
    /// <br/>  5980622760      5980622970      5980623180      5980770460    6781059250  
    /// <br/>  9077880070      5786694760      7957673080      5786696720    8066924740
    /// </remarks>
    /// <param name="shipmentTrackingNumber">DHL Express shipment identification number</param>
    /// <param name="requestControlledAccessDataCodes">Query parameter to request to return values of controlled access code fields in response.</param>
    /// <param name="requestGMTOffsetPerEvent">Query parameter to request to return GMT Offset of each event in response, for both shipment level and piece level.</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="accept_Language">Format {3-character language code}</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Shipment details found</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressTrackingResponse> ExpApiShipmentsTrackingAsync(string shipmentTrackingNumber, TrackingView? trackingView, LevelOfDetail? levelOfDetail, bool? requestControlledAccessDataCodes, bool? requestGMTOffsetPerEvent, string message_Reference, string message_Reference_Date, string accept_Language, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, System.Threading.CancellationToken cancellationToken)
    {
        if (shipmentTrackingNumber == null)
            throw new System.ArgumentNullException("shipmentTrackingNumber");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/shipments/{shipmentTrackingNumber}/tracking?");
        urlBuilder_.Replace("{shipmentTrackingNumber}", System.Uri.EscapeDataString(ConvertToString(shipmentTrackingNumber, System.Globalization.CultureInfo.InvariantCulture)));
        if (trackingView != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("trackingView") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trackingView, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (levelOfDetail != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("levelOfDetail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(levelOfDetail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (requestControlledAccessDataCodes != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("requestControlledAccessDataCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requestControlledAccessDataCodes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (requestGMTOffsetPerEvent != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("requestGMTOffsetPerEvent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requestGMTOffsetPerEvent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                if (message_Reference != null)
                    request_.Headers.TryAddWithoutValidation("Message-Reference", ConvertToString(message_Reference, System.Globalization.CultureInfo.InvariantCulture));

                if (message_Reference_Date != null)
                    request_.Headers.TryAddWithoutValidation("Message-Reference-Date", ConvertToString(message_Reference_Date, System.Globalization.CultureInfo.InvariantCulture));

                if (accept_Language != null)
                    request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));

                if (plugin_Name != null)
                    request_.Headers.TryAddWithoutValidation("Plugin-Name", ConvertToString(plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                if (plugin_Version != null)
                    request_.Headers.TryAddWithoutValidation("Plugin-Version", ConvertToString(plugin_Version, System.Globalization.CultureInfo.InvariantCulture));

                if (shipping_System_Platform_Name != null)
                    request_.Headers.TryAddWithoutValidation("Shipping-System-Platform-Name", ConvertToString(shipping_System_Platform_Name, System.Globalization.CultureInfo.InvariantCulture));

                if (shipping_System_Platform_Version != null)
                    request_.Headers.TryAddWithoutValidation("Shipping-System-Platform-Version", ConvertToString(shipping_System_Platform_Version, System.Globalization.CultureInfo.InvariantCulture));

                if (webstore_Platform_Name != null)
                    request_.Headers.TryAddWithoutValidation("Webstore-Platform-Name", ConvertToString(webstore_Platform_Name, System.Globalization.CultureInfo.InvariantCulture));

                if (webstore_Platform_Version != null)
                    request_.Headers.TryAddWithoutValidation("Webstore-Platform-Version", ConvertToString(webstore_Platform_Version, System.Globalization.CultureInfo.InvariantCulture));

                if (x_version == null)
                    throw new System.ArgumentNullException("x_version");
                request_.Headers.TryAddWithoutValidation("x-version", ConvertToString(x_version, System.Globalization.CultureInfo.InvariantCulture));
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressTrackingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("No data found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Track a single or multiple DHL Express Shipments
    /// </summary>
    /// <remarks>
    /// The Tracking service retrieves tracking statuses for a single or multiple DHL Express Shipments. Waybill numbers to be used during testing for Tracking. &lt;br&gt; Please note that when testing the Tracking service, only the waybill numbers below are loaded and any production waybill numbers or ones created via shipment will not be trackable. &lt;br&gt;
    /// <br/>  9356579890      4818240420      5584773180      5786694550    2449648740  
    /// <br/>  5980622760      5980622970      5980623180      5980770460    6781059250  
    /// <br/>  9077880070      5786694760      7957673080      5786696720    8066924740
    /// </remarks>
    /// <param name="shipmentTrackingNumber">DHL Express shipment identification number</param>
    /// <param name="pieceTrackingNumber">DHL Express shipment piece tracking number</param>
    /// <param name="shipmentReference">Shipment reference which was provided during the shipment label creation</param>
    /// <param name="shipmentReferenceType">Shipment reference type which was provided during the shipment label creation</param>
    /// <param name="shipperAccountNumber">Shipper DHL Express Account number under which the shipment label was created</param>
    /// <param name="dateRangeFrom">When tracking by Shipment reference you need to restrict the search by timeframe. Please provide the start of the period.</param>
    /// <param name="dateRangeTo">When tracking by Shipment reference you need to restrict the search by timeframe. Please provide the end of the period.</param>
    /// <param name="requestControlledAccessDataCodes">Query parameter to request to return values of controlled access code fields in response.</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="accept_Language">Format {3-character language code}</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Shipment details found</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<SupermodelIoLogisticsExpressTrackingResponse> ExpApiShipmentsTrackingMultiAsync(System.Collections.Generic.IEnumerable<string> shipmentTrackingNumber, System.Collections.Generic.IEnumerable<string> pieceTrackingNumber, string shipmentReference, string shipmentReferenceType, string shipperAccountNumber, string dateRangeFrom, string dateRangeTo, TrackingView? trackingView, LevelOfDetail? levelOfDetail, bool? requestControlledAccessDataCodes, string message_Reference, string message_Reference_Date, string accept_Language, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version)
    {
        return ExpApiShipmentsTrackingMultiAsync(shipmentTrackingNumber, pieceTrackingNumber, shipmentReference, shipmentReferenceType, shipperAccountNumber, dateRangeFrom, dateRangeTo, trackingView, levelOfDetail, requestControlledAccessDataCodes, message_Reference, message_Reference_Date, accept_Language, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Track a single or multiple DHL Express Shipments
    /// </summary>
    /// <remarks>
    /// The Tracking service retrieves tracking statuses for a single or multiple DHL Express Shipments. Waybill numbers to be used during testing for Tracking. &lt;br&gt; Please note that when testing the Tracking service, only the waybill numbers below are loaded and any production waybill numbers or ones created via shipment will not be trackable. &lt;br&gt;
    /// <br/>  9356579890      4818240420      5584773180      5786694550    2449648740  
    /// <br/>  5980622760      5980622970      5980623180      5980770460    6781059250  
    /// <br/>  9077880070      5786694760      7957673080      5786696720    8066924740
    /// </remarks>
    /// <param name="shipmentTrackingNumber">DHL Express shipment identification number</param>
    /// <param name="pieceTrackingNumber">DHL Express shipment piece tracking number</param>
    /// <param name="shipmentReference">Shipment reference which was provided during the shipment label creation</param>
    /// <param name="shipmentReferenceType">Shipment reference type which was provided during the shipment label creation</param>
    /// <param name="shipperAccountNumber">Shipper DHL Express Account number under which the shipment label was created</param>
    /// <param name="dateRangeFrom">When tracking by Shipment reference you need to restrict the search by timeframe. Please provide the start of the period.</param>
    /// <param name="dateRangeTo">When tracking by Shipment reference you need to restrict the search by timeframe. Please provide the end of the period.</param>
    /// <param name="requestControlledAccessDataCodes">Query parameter to request to return values of controlled access code fields in response.</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="accept_Language">Format {3-character language code}</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Shipment details found</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressTrackingResponse> ExpApiShipmentsTrackingMultiAsync(System.Collections.Generic.IEnumerable<string> shipmentTrackingNumber, System.Collections.Generic.IEnumerable<string> pieceTrackingNumber, string shipmentReference, string shipmentReferenceType, string shipperAccountNumber, string dateRangeFrom, string dateRangeTo, TrackingView? trackingView, LevelOfDetail? levelOfDetail, bool? requestControlledAccessDataCodes, string message_Reference, string message_Reference_Date, string accept_Language, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, System.Threading.CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tracking?");
        if (shipmentTrackingNumber != null)
        {
            foreach (var item_ in shipmentTrackingNumber) { urlBuilder_.Append(System.Uri.EscapeDataString("shipmentTrackingNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
        }
        if (pieceTrackingNumber != null)
        {
            foreach (var item_ in pieceTrackingNumber) { urlBuilder_.Append(System.Uri.EscapeDataString("pieceTrackingNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
        }
        if (shipmentReference != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("shipmentReference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shipmentReference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (shipmentReferenceType != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("shipmentReferenceType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shipmentReferenceType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (shipperAccountNumber != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("shipperAccountNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shipperAccountNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (dateRangeFrom != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("dateRangeFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dateRangeFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (dateRangeTo != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("dateRangeTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dateRangeTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (trackingView != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("trackingView") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trackingView, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (levelOfDetail != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("levelOfDetail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(levelOfDetail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (requestControlledAccessDataCodes != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("requestControlledAccessDataCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(requestControlledAccessDataCodes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                if (message_Reference != null)
                    request_.Headers.TryAddWithoutValidation("Message-Reference", ConvertToString(message_Reference, System.Globalization.CultureInfo.InvariantCulture));

                if (message_Reference_Date != null)
                    request_.Headers.TryAddWithoutValidation("Message-Reference-Date", ConvertToString(message_Reference_Date, System.Globalization.CultureInfo.InvariantCulture));

                if (accept_Language != null)
                    request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));

                if (plugin_Name != null)
                    request_.Headers.TryAddWithoutValidation("Plugin-Name", ConvertToString(plugin_Name, System.Globalization.CultureInfo.InvariantCulture));

                if (plugin_Version != null)
                    request_.Headers.TryAddWithoutValidation("Plugin-Version", ConvertToString(plugin_Version, System.Globalization.CultureInfo.InvariantCulture));

                if (shipping_System_Platform_Name != null)
                    request_.Headers.TryAddWithoutValidation("Shipping-System-Platform-Name", ConvertToString(shipping_System_Platform_Name, System.Globalization.CultureInfo.InvariantCulture));

                if (shipping_System_Platform_Version != null)
                    request_.Headers.TryAddWithoutValidation("Shipping-System-Platform-Version", ConvertToString(shipping_System_Platform_Version, System.Globalization.CultureInfo.InvariantCulture));

                if (webstore_Platform_Name != null)
                    request_.Headers.TryAddWithoutValidation("Webstore-Platform-Name", ConvertToString(webstore_Platform_Name, System.Globalization.CultureInfo.InvariantCulture));

                if (webstore_Platform_Version != null)
                    request_.Headers.TryAddWithoutValidation("Webstore-Platform-Version", ConvertToString(webstore_Platform_Version, System.Globalization.CultureInfo.InvariantCulture));

                if (x_version == null)
                    throw new System.ArgumentNullException("x_version");
                request_.Headers.TryAddWithoutValidation("x-version", ConvertToString(x_version, System.Globalization.CultureInfo.InvariantCulture));
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressTrackingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("No data found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Electronic Proof of Delivery
    /// </summary>
    /// <remarks>
    /// The electronic proof of delivery service can be used to retrieve proof of delivery for certain delivered DHL Express shipments
    /// </remarks>
    /// <param name="shipmentTrackingNumber">DHL Express shipment identification number</param>
    /// <param name="shipperAccountNumber">DHL Express customer shipper account number</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Electronic Proof of delivery found</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<SupermodelIoLogisticsExpressEPODResponse> ExpApiShipmentsEpodAsync(string shipmentTrackingNumber, string shipperAccountNumber, Content? content, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version)
    {
        return ExpApiShipmentsEpodAsync(shipmentTrackingNumber, shipperAccountNumber, content, message_Reference, message_Reference_Date, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Electronic Proof of Delivery
    /// </summary>
    /// <remarks>
    /// The electronic proof of delivery service can be used to retrieve proof of delivery for certain delivered DHL Express shipments
    /// </remarks>
    /// <param name="shipmentTrackingNumber">DHL Express shipment identification number</param>
    /// <param name="shipperAccountNumber">DHL Express customer shipper account number</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Electronic Proof of delivery found</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressEPODResponse> ExpApiShipmentsEpodAsync(string shipmentTrackingNumber, string shipperAccountNumber, Content? content, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, System.Threading.CancellationToken cancellationToken)
    {
        if (shipmentTrackingNumber == null)
            throw new System.ArgumentNullException("shipmentTrackingNumber");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/shipments/{shipmentTrackingNumber}/proof-of-delivery?");
        urlBuilder_.Replace("{shipmentTrackingNumber}", System.Uri.EscapeDataString(ConvertToString(shipmentTrackingNumber, System.Globalization.CultureInfo.InvariantCulture)));
        if (shipperAccountNumber != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("shipperAccountNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shipperAccountNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (content != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("content") + "=").Append(System.Uri.EscapeDataString(ConvertToString(content, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressEPODResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("No electronic proof of delivery found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Upload Paperless Trade shipment (PLT) images of previously created shipment.
    /// </summary>
    /// <remarks>
    /// The upload-image service can be used to upload PLT images to a previously created shipment.  The PLT images for the shipment can be uploaded before the shipment has been physically  collected by DHL courier. However, the original shipment must contain WY as the special service otherwise,  an error will be returned when the customer wants to use the reupload function in this upload-image service.     IMPORTANT: Please note that at least 10mins must be given between the initial createShipment request and then  the upload-image request (including subsequent upload-image request).
    /// </remarks>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="shipmentTrackingNumber">DHL Express shipment identification number</param>
    /// <param name="body">Details about the shipment images</param>
    /// <returns>Images uploaded</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task ExpApiShipmentsImgUploadAsync(string x_version, string shipmentTrackingNumber, SupermodelIoLogisticsExpressImageUploadRequest body)
    {
        return ExpApiShipmentsImgUploadAsync(x_version, shipmentTrackingNumber, body, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Upload Paperless Trade shipment (PLT) images of previously created shipment.
    /// </summary>
    /// <remarks>
    /// The upload-image service can be used to upload PLT images to a previously created shipment.  The PLT images for the shipment can be uploaded before the shipment has been physically  collected by DHL courier. However, the original shipment must contain WY as the special service otherwise,  an error will be returned when the customer wants to use the reupload function in this upload-image service.     IMPORTANT: Please note that at least 10mins must be given between the initial createShipment request and then  the upload-image request (including subsequent upload-image request).
    /// </remarks>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="shipmentTrackingNumber">DHL Express shipment identification number</param>
    /// <param name="body">Details about the shipment images</param>
    /// <returns>Images uploaded</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task ExpApiShipmentsImgUploadAsync(string x_version, string shipmentTrackingNumber, SupermodelIoLogisticsExpressImageUploadRequest body, System.Threading.CancellationToken cancellationToken)
    {
        if (shipmentTrackingNumber == null)
            throw new System.ArgumentNullException("shipmentTrackingNumber");

        if (body == null)
            throw new System.ArgumentNullException("body");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/shipments/{shipmentTrackingNumber}/upload-image");
        urlBuilder_.Replace("{shipmentTrackingNumber}", System.Uri.EscapeDataString(ConvertToString(shipmentTrackingNumber, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                if (x_version == null)
                    throw new System.ArgumentNullException("x_version");
                request_.Headers.TryAddWithoutValidation("x-version", ConvertToString(x_version, System.Globalization.CultureInfo.InvariantCulture));
                var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                var content_ = new System.Net.Http.StringContent(json_);
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PATCH");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("No shipment details found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 422)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Unprocessable Entity", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create Shipment
    /// </summary>
    /// <remarks>
    /// ## Create Shipment
    /// <br/>The ShipmentRequest Operation will allow you to generate an AWB number and piece IDs, generate a shipping label, transmit manifest shipment detail to DHL, and optionally book a courier for the pickup of a shipment. The key elements in the response of the Shipment Request will be a base64 encoded PDF label and the Shipment and Piece identification numbers, which you can use for tracking on the DHL web site.
    /// <br/>While the RateRequest and ShipmentRequest services can be used independently, DHL recommends the use of RateRequest to first validate the products available for the shipper/receiver. The global product codes which are output during the RateResponse can be used directly as input into the Shipment Request, as both perform similar validations in terms of service capability.
    /// </remarks>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="strictValidation">If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request.</param>
    /// <param name="bypassPLTError">Option to bypass PLT - WY service code lane capability validation</param>
    /// <param name="validateDataOnly">If set to true, indicate to perform shipment data compliant validation on the shipment information.</param>
    /// <param name="body">Details about the shipment to be created</param>
    /// <returns>Shipment Created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressCreateShipmentResponse> ExpApiShipmentsAsync(
        SupermodelIoLogisticsExpressCreateShipmentRequest body,
        bool strictValidation = false,
        bool bypassPLTError = false,
        bool validateDataOnly = false,
        string? message_Reference = null,
        string? message_Reference_Date = null,
        string? plugin_Name = null,
        string? plugin_Version = null,
        string? shipping_System_Platform_Name = null,
        string? shipping_System_Platform_Version = null,
        string? webstore_Platform_Name = null,
        string? webstore_Platform_Version = null,
        string? x_version = null,
        System.Threading.CancellationToken cancellationToken = default)
    {
        if (body == null)
            throw new System.ArgumentNullException("body");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/shipments?");
        if (strictValidation != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("strictValidation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(strictValidation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (bypassPLTError != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("bypassPLTError") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bypassPLTError, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (validateDataOnly != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("validateDataOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(validateDataOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                var content_ = new System.Net.Http.StringContent(json_);
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressCreateShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 422)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 500)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Process errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Upload Commercial Invoice data for your DHL Express shipment
    /// </summary>
    /// <remarks>
    /// ## Upload Invoice Data with Shipment ID
    /// <br/>The upload invoice data service can be used to upload Commerical Invoice data with Shipment Identification Number for your DHL Express shipment.Customer can provide Commercial Invoice data before Shipment Data via Create Shipment flow or vice versa.
    /// <br/>
    /// <br/>Important Note: UploadInvoiceData service is not enabled by default and must be requested per customer. Use of this service is only enabled on exceptional basis and DHL Express recommends to submit shipment requests together with a commercial invoice data.To enable use of UploadInvoiceData service, please contact your DHL Express IT representative. To use UploadInvoiceData service, it is required that "PM" service code is provided in MyDHL API Create Shipment request. "PM" service code is not enabled by 
    /// <br/>default for the customers, and needs to be enabled upon request.
    /// <br/>
    /// <br/>When Shipment is created via MyDHL API Create Shipment service before uploading the Commercial Invoice (CIN) data,it is mandatory to provide the Shipment Identification Number as received in MyDHL API Create Shipment service Response.
    /// <br/>When Commercial Invoice (CIN) data is uploaded prior to creating a shipment via MyDHL API Create Shipment service, it is mandatory to provide Invoice Reference Number with Invoice Reference Type value "CU" and Shipper Account Number. 
    /// <br/>
    /// <br/>These elements are mandatory to facilitate an effective data merge of the Commercial Invoice (CIN) data with Shipment Data. As an output customer will receive Notification element value '0' on successful upload of Commercial Invoice (CIN) data. 
    /// <br/>DHL backend application performs the subsequent data merging process of the Shipment Data and Commercial Invoice data.
    /// </remarks>
    /// <param name="shipmentTrackingNumber">DHL Express shipment identification number</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="body">Details about the invoice data</param>
    /// <returns>invoice data uploaded</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task ExpApiShipmentsInvoiceDataAwbAsync(string shipmentTrackingNumber, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, SupermodelIoLogisticsExpressUploadInvoiceDataRequest body)
    {
        return ExpApiShipmentsInvoiceDataAwbAsync(shipmentTrackingNumber, message_Reference, message_Reference_Date, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, body, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Upload Commercial Invoice data for your DHL Express shipment
    /// </summary>
    /// <remarks>
    /// ## Upload Invoice Data with Shipment ID
    /// <br/>The upload invoice data service can be used to upload Commerical Invoice data with Shipment Identification Number for your DHL Express shipment.Customer can provide Commercial Invoice data before Shipment Data via Create Shipment flow or vice versa.
    /// <br/>
    /// <br/>Important Note: UploadInvoiceData service is not enabled by default and must be requested per customer. Use of this service is only enabled on exceptional basis and DHL Express recommends to submit shipment requests together with a commercial invoice data.To enable use of UploadInvoiceData service, please contact your DHL Express IT representative. To use UploadInvoiceData service, it is required that "PM" service code is provided in MyDHL API Create Shipment request. "PM" service code is not enabled by 
    /// <br/>default for the customers, and needs to be enabled upon request.
    /// <br/>
    /// <br/>When Shipment is created via MyDHL API Create Shipment service before uploading the Commercial Invoice (CIN) data,it is mandatory to provide the Shipment Identification Number as received in MyDHL API Create Shipment service Response.
    /// <br/>When Commercial Invoice (CIN) data is uploaded prior to creating a shipment via MyDHL API Create Shipment service, it is mandatory to provide Invoice Reference Number with Invoice Reference Type value "CU" and Shipper Account Number. 
    /// <br/>
    /// <br/>These elements are mandatory to facilitate an effective data merge of the Commercial Invoice (CIN) data with Shipment Data. As an output customer will receive Notification element value '0' on successful upload of Commercial Invoice (CIN) data. 
    /// <br/>DHL backend application performs the subsequent data merging process of the Shipment Data and Commercial Invoice data.
    /// </remarks>
    /// <param name="shipmentTrackingNumber">DHL Express shipment identification number</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="body">Details about the invoice data</param>
    /// <returns>invoice data uploaded</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task ExpApiShipmentsInvoiceDataAwbAsync(string shipmentTrackingNumber, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, SupermodelIoLogisticsExpressUploadInvoiceDataRequest body, System.Threading.CancellationToken cancellationToken)
    {
        if (shipmentTrackingNumber == null)
            throw new System.ArgumentNullException("shipmentTrackingNumber");

        if (body == null)
            throw new System.ArgumentNullException("body");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/shipments/{shipmentTrackingNumber}/upload-invoice-data");
        urlBuilder_.Replace("{shipmentTrackingNumber}", System.Uri.EscapeDataString(ConvertToString(shipmentTrackingNumber, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                var content_ = new System.Net.Http.StringContent(json_);
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PATCH");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 422)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Unprocessable Entity", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Upload Commercial invoice data
    /// </summary>
    /// <remarks>
    /// ## Upload invoice data
    /// <br/>The upload invoice data service can be used to upload Commerical Invoice data without Shipment Identification Number for your DHL Express shipment. Customer can provide Commercial Invoice data before Shipment Data via Create Shipment flow or vice versa.
    /// <br/>
    /// <br/>Important Note: UploadInvoiceData service is not enabled by default and must be requested per customer.Use of this service is only enabled on exceptional basis and DHL Express recommends to submit shipment requests together with a commercial invoice data.
    /// <br/>To enable use of UploadInvoiceData service, please contact your DHL Express IT representative. To use UploadInvoiceData service, it is required that "PM" service code is provided in MyDHL API Create Shipment request.
    /// <br/>"PM" service code is not enabled by default for the customers, and needs to be enabled upon request.
    /// <br/>
    /// <br/>When Shipment is created via MyDHL API Create Shipment service before uploading the Commercial Invoice (CIN) data,it is mandatory to provide the Shipment Identification Number as received in MyDHL API Create Shipment service Response. When Commercial Invoice (CIN) data is uploaded prior to creating a shipment via MyDHL API Create Shipment service, it is 
    /// <br/>mandatory to provide Invoice Reference Number with Invoice Reference Type value "CU" and Shipper Account Number.
    /// <br/>
    /// <br/>These elements are mandatory to facilitate an effective data merge of the Commercial Invoice (CIN) data with Shipment Data. As an output customer will receive Notification element value '0' on successful upload of Commercial Invoice (CIN) data.
    /// <br/>DHL backend application performs the subsequent data merging process of the Shipment Data and Commercial Invoice data.
    /// </remarks>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="body">Details about the Commercial Invoice data to be uploaded</param>
    /// <returns>invoice data uploaded</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<SupermodelIoLogisticsExpressUploadInvoiceDataResponse> ExpApiShipmentsInvoiceDataAsync(string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, SupermodelIoLogisticsExpressUploadInvoiceDataRequestSID body)
    {
        return ExpApiShipmentsInvoiceDataAsync(message_Reference, message_Reference_Date, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, body, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Upload Commercial invoice data
    /// </summary>
    /// <remarks>
    /// ## Upload invoice data
    /// <br/>The upload invoice data service can be used to upload Commerical Invoice data without Shipment Identification Number for your DHL Express shipment. Customer can provide Commercial Invoice data before Shipment Data via Create Shipment flow or vice versa.
    /// <br/>
    /// <br/>Important Note: UploadInvoiceData service is not enabled by default and must be requested per customer.Use of this service is only enabled on exceptional basis and DHL Express recommends to submit shipment requests together with a commercial invoice data.
    /// <br/>To enable use of UploadInvoiceData service, please contact your DHL Express IT representative. To use UploadInvoiceData service, it is required that "PM" service code is provided in MyDHL API Create Shipment request.
    /// <br/>"PM" service code is not enabled by default for the customers, and needs to be enabled upon request.
    /// <br/>
    /// <br/>When Shipment is created via MyDHL API Create Shipment service before uploading the Commercial Invoice (CIN) data,it is mandatory to provide the Shipment Identification Number as received in MyDHL API Create Shipment service Response. When Commercial Invoice (CIN) data is uploaded prior to creating a shipment via MyDHL API Create Shipment service, it is 
    /// <br/>mandatory to provide Invoice Reference Number with Invoice Reference Type value "CU" and Shipper Account Number.
    /// <br/>
    /// <br/>These elements are mandatory to facilitate an effective data merge of the Commercial Invoice (CIN) data with Shipment Data. As an output customer will receive Notification element value '0' on successful upload of Commercial Invoice (CIN) data.
    /// <br/>DHL backend application performs the subsequent data merging process of the Shipment Data and Commercial Invoice data.
    /// </remarks>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <param name="body">Details about the Commercial Invoice data to be uploaded</param>
    /// <returns>invoice data uploaded</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressUploadInvoiceDataResponse> ExpApiShipmentsInvoiceDataAsync(string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, SupermodelIoLogisticsExpressUploadInvoiceDataRequestSID body, System.Threading.CancellationToken cancellationToken)
    {
        if (body == null)
            throw new System.ArgumentNullException("body");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/invoices/upload-invoice-data");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                var content_ = new System.Net.Http.StringContent(json_);
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressUploadInvoiceDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 500)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Process errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get Image
    /// </summary>
    /// <remarks>
    /// The Get Image service can be used to retrieve customer's own uploaded or DHL generated Commercial Invoice, Waybill Document or other supporting documents that was uploaded during shipment creation.
    /// </remarks>
    /// <param name="shipmentTrackingNumber">DHL Express shipment identification number</param>
    /// <param name="shipperAccountNumber">DHL Express customer shipper account number</param>
    /// <param name="typeCode">Please provide correct document type.</param>
    /// <param name="pickupYearAndMonth">Please provide the pickup's date in YYYY-MM format</param>
    /// <param name="encodingFormat">Please provide the document image encoding format in pdf or tiff format</param>
    /// <param name="allInOnePDF">Option to return all the document images in a single PDF file</param>
    /// <param name="compressedPackage">Option to return all the document images in a compressed package</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Document Image found</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<SupermodelIoLogisticsExpressDocumentImageResponse> ExpApiShipmentsDocumentimageAsync(string shipmentTrackingNumber, string shipperAccountNumber, TypeCode typeCode, string pickupYearAndMonth, EncodingFormat? encodingFormat, bool? allInOnePDF, bool? compressedPackage, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version)
    {
        return ExpApiShipmentsDocumentimageAsync(shipmentTrackingNumber, shipperAccountNumber, typeCode, pickupYearAndMonth, encodingFormat, allInOnePDF, compressedPackage, message_Reference, message_Reference_Date, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get Image
    /// </summary>
    /// <remarks>
    /// The Get Image service can be used to retrieve customer's own uploaded or DHL generated Commercial Invoice, Waybill Document or other supporting documents that was uploaded during shipment creation.
    /// </remarks>
    /// <param name="shipmentTrackingNumber">DHL Express shipment identification number</param>
    /// <param name="shipperAccountNumber">DHL Express customer shipper account number</param>
    /// <param name="typeCode">Please provide correct document type.</param>
    /// <param name="pickupYearAndMonth">Please provide the pickup's date in YYYY-MM format</param>
    /// <param name="encodingFormat">Please provide the document image encoding format in pdf or tiff format</param>
    /// <param name="allInOnePDF">Option to return all the document images in a single PDF file</param>
    /// <param name="compressedPackage">Option to return all the document images in a compressed package</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Document Image found</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressDocumentImageResponse> ExpApiShipmentsDocumentimageAsync(string shipmentTrackingNumber, string shipperAccountNumber, TypeCode typeCode, string pickupYearAndMonth, EncodingFormat? encodingFormat, bool? allInOnePDF, bool? compressedPackage, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, System.Threading.CancellationToken cancellationToken)
    {
        if (shipmentTrackingNumber == null)
            throw new System.ArgumentNullException("shipmentTrackingNumber");

        if (shipperAccountNumber == null)
            throw new System.ArgumentNullException("shipperAccountNumber");

        if (typeCode == null)
            throw new System.ArgumentNullException("typeCode");

        if (pickupYearAndMonth == null)
            throw new System.ArgumentNullException("pickupYearAndMonth");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/shipments/{shipmentTrackingNumber}/get-image?");
        urlBuilder_.Replace("{shipmentTrackingNumber}", System.Uri.EscapeDataString(ConvertToString(shipmentTrackingNumber, System.Globalization.CultureInfo.InvariantCulture)));
        urlBuilder_.Append(System.Uri.EscapeDataString("shipperAccountNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shipperAccountNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("typeCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(typeCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(System.Uri.EscapeDataString("pickupYearAndMonth") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pickupYearAndMonth, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        if (encodingFormat != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("encodingFormat") + "=").Append(System.Uri.EscapeDataString(ConvertToString(encodingFormat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (allInOnePDF != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("allInOnePDF") + "=").Append(System.Uri.EscapeDataString(ConvertToString(allInOnePDF, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (compressedPackage != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("compressedPackage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(compressedPackage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressDocumentImageResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("No document image found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Returns list of service points based on the given postal location address, service point ID or geocode details for DHL Express Service points to pick-up and drop-off shipments
    /// </summary>
    /// <remarks>
    /// Get service points based on the given input parameters
    /// </remarks>
    /// <param name="address">The address near which Service Points are to be found. If servicePointID is used, address is not needed. 
    /// <br/>
    /// <br/>Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent.</param>
    /// <param name="placeId">To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google</param>
    /// <param name="providerId">To specify the providerId(provider) for the place ID</param>
    /// <param name="latitude">Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed.</param>
    /// <param name="longitude">Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter</param>
    /// <param name="servicePointID">Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID = BRU001. 
    /// <br/>
    /// <br/>If address is used, id is not possible to use.</param>
    /// <param name="countryCode">Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country. 
    /// <br/>
    /// <br/> 
    /// <br/>
    /// <br/>When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter. 
    /// <br/>
    /// <br/>E.g. for countryCode=GB will be time format AM/PM and distance unit will be mi. 
    /// <br/>
    /// <br/>E.g. for countryCode=DE will be time format 24h and distance unit will be km.  
    /// <br/>
    /// <br/> 
    /// <br/>
    /// <br/>The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country)</param>
    /// <param name="language">Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’ 
    /// <br/>
    /// <br/>Language Code is using ISO 3166-1 alpha-3 (3 letters)</param>
    /// <param name="languageScriptCode">Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional.</param>
    /// <param name="languageCountryCode">Language Country Code - can be used to differentiate between linguistic variants of the same Language.</param>
    /// <param name="servicePointResults">Max. number of service points to be returned.  
    /// <br/>
    /// <br/>If id or idf is used, this parameter is not needed as this will return searched service point.</param>
    /// <param name="capability">Comma separated list of physical process capability codes.
    /// <br/>
    /// <br/> 81: I have a DHL account or return shipment
    /// <br/>
    /// <br/> 82: I have paid online
    /// <br/>
    /// <br/> 88: I will pay at the DHL Service Point
    /// <br/>
    /// <br/> 73: I will create a DHL shipping label at the DHL Service Point
    /// <br/>
    /// <br/> 74: I have printed a DHL label
    /// <br/>
    /// <br/>75,76: I have a QR code
    /// <br/>
    /// <br/>78,79: Im collecting a DHL Express parcel
    /// <br/>
    /// <br/>86,87: I have directed a DHL Express parcel to a DHL Service Point
    /// <br/>
    /// <br/>Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87
    /// <br/>
    /// <br/>Note: | is just used to represent the seperation of combinations.</param>
    /// <param name="openBefore">Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00</param>
    /// <param name="openAfter">Service points open After given time e.g.:15:00 will find service points which are open after 15:00</param>
    /// <param name="openDay">Open on Weekday, valid values as follow: 
    /// <br/>
    /// <br/>1 - Monday 
    /// <br/>
    /// <br/>2 - Tuesday 
    /// <br/>
    /// <br/>3 - Wednesday 
    /// <br/>
    /// <br/>4 - Thursday 
    /// <br/>
    /// <br/>5 - Friday 
    /// <br/>
    /// <br/>6 - Saturday 
    /// <br/>
    /// <br/>0 – Sunday</param>
    /// <param name="weight">Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”)</param>
    /// <param name="weightUom">Weight units – kg or lb. Required if weight is passed in.</param>
    /// <param name="length">Max. length of the shipment  - the highest dimension 
    /// <br/>
    /// <br/>e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”)</param>
    /// <param name="width">Max. width of the shipment  - the middle dimension 
    /// <br/>
    /// <br/>e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”)</param>
    /// <param name="height">Max. height of the shipment  - the lowest dimension 
    /// <br/>
    /// <br/>e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”)</param>
    /// <param name="dimensionsUom">Dimension units – cm or in. Required with any of length, width or height parameter.</param>
    /// <param name="resultUom">Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned.</param>
    /// <param name="serviceAreaCode">Service Area Code of the search address</param>
    /// <param name="servicePointTypes">Comma separated list of service point types, e.g. “CTY,STN,247”. 
    /// <br/>
    /// <br/>Allowed Values: 
    /// <br/>
    /// <br/>CTY (City) - High street premises. DHL owned and managed. Eg. Downtown
    /// <br/>
    /// <br/>STN (Station) - DHL premises. DHL owned and managed at PUD locations
    /// <br/>
    /// <br/>PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell
    /// <br/>
    /// <br/>247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated</param>
    /// <param name="maxDistance">Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored. 
    /// <br/>
    /// <br/>Accuracy of the maxDistance parameter: 
    /// <br/>
    /// <br/>The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l = maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r = maxDistance, but still within the search square: 
    /// <br/>
    /// <br/>Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address.</param>
    /// <param name="pieceCountLimit">Static number, max pieces which can be handled on the service point.</param>
    /// <param name="importCharges">Y/N – indicator whether it is possible to pay import charges on service point.</param>
    /// <param name="key">Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication.</param>
    /// <param name="combineParameters">Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&amp;” stands for AND condition “()” splits multiple conditions.</param>
    /// <param name="edd">Estimated Delivery date: 
    /// <br/>
    /// <br/>YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service.</param>
    /// <param name="excludeFullyBooked">Parameter which will enable to filter out fully booked services in the Service Point Locator response to client. 
    /// <br/>
    /// <br/>Values: 
    /// <br/>
    /// <br/>Y - Service Point Locator will not send back service points which are fully booked. 
    /// <br/>
    /// <br/>N - Service Point Locator will send back all service points, also those where is no free capacity. 
    /// <br/>
    /// <br/>If not provided in request, it will be set up as N by default.  
    /// <br/>
    /// <br/>This is a Servicepoint Capacity Management System parameter.</param>
    /// <param name="shipmentID">To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter.</param>
    /// <param name="pieceID">Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter.</param>
    /// <param name="shipmentOriginServiceAreaCode">To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter.</param>
    /// <param name="isResultsSpecificCapabRequired">This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI.</param>
    /// <param name="encrypt">This 'encrypt' flag is to indicate to Service Point Locator whether the address is tokenized(encrypt=y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list. 
    /// <br/>
    /// <br/> 
    /// <br/>
    /// <br/>When 'encrypt=y', Service Point Locator clients should mandatorily send tokenized address in the REST request.  
    /// <br/>
    /// <br/>When 'encrypt=n' or without 'encrypt' parameter, client should only send non-tokenized address(raw address). 
    /// <br/>
    /// <br/>Sample below:  
    /// <br/>
    /// <br/>      Non-tokenized(raw) address: Sabah, Malaysia 
    /// <br/>
    /// <br/>      Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ== 
    /// <br/>
    /// <br/> 
    /// <br/>
    /// <br/>Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools.</param>
    /// <param name="b64">This indicates whether the address parameter contains the base64 encoded value or not.</param>
    /// <param name="svpStatus">ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus 'A' is considered when this parameter is not sent in the request. 
    /// <br/>A = Service Available (Open)
    /// <br/>S = Service Suspended (Temporarily closed) 
    /// <br/>U = Service Unavailable (Temporarily closed) 
    /// <br/>Y = Not Yet Open (Temporarily closed) 
    /// <br/>X = Closed (Temporarily closed)</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<ServicePointsRestResponseV3> ExpApiServicepointsAsync(string address, string placeId, string providerId, string latitude, string longitude, string servicePointID, string countryCode, string language, string languageScriptCode, string languageCountryCode, string servicePointResults, string capability, string openBefore, string openAfter, System.Collections.Generic.IEnumerable<Anonymous> openDay, string weight, System.Collections.Generic.IEnumerable<Anonymous2> weightUom, string length, string width, string height, System.Collections.Generic.IEnumerable<Anonymous3> dimensionsUom, System.Collections.Generic.IEnumerable<Anonymous4> resultUom, string serviceAreaCode, System.Collections.Generic.IEnumerable<Anonymous5> servicePointTypes, string maxDistance, string pieceCountLimit, System.Collections.Generic.IEnumerable<Anonymous6> importCharges, string key, string combineParameters, string edd, System.Collections.Generic.IEnumerable<Anonymous7> excludeFullyBooked, string shipmentID, string pieceID, string shipmentOriginServiceAreaCode, System.Collections.Generic.IEnumerable<Anonymous8> isResultsSpecificCapabRequired, System.Collections.Generic.IEnumerable<Anonymous9> encrypt, System.Collections.Generic.IEnumerable<Anonymous10> b64, System.Collections.Generic.IEnumerable<Anonymous11> svpStatus, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version)
    {
        return ExpApiServicepointsAsync(address, placeId, providerId, latitude, longitude, servicePointID, countryCode, language, languageScriptCode, languageCountryCode, servicePointResults, capability, openBefore, openAfter, openDay, weight, weightUom, length, width, height, dimensionsUom, resultUom, serviceAreaCode, servicePointTypes, maxDistance, pieceCountLimit, importCharges, key, combineParameters, edd, excludeFullyBooked, shipmentID, pieceID, shipmentOriginServiceAreaCode, isResultsSpecificCapabRequired, encrypt, b64, svpStatus, message_Reference, message_Reference_Date, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Returns list of service points based on the given postal location address, service point ID or geocode details for DHL Express Service points to pick-up and drop-off shipments
    /// </summary>
    /// <remarks>
    /// Get service points based on the given input parameters
    /// </remarks>
    /// <param name="address">The address near which Service Points are to be found. If servicePointID is used, address is not needed. 
    /// <br/>
    /// <br/>Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent.</param>
    /// <param name="placeId">To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google</param>
    /// <param name="providerId">To specify the providerId(provider) for the place ID</param>
    /// <param name="latitude">Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed.</param>
    /// <param name="longitude">Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter</param>
    /// <param name="servicePointID">Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID = BRU001. 
    /// <br/>
    /// <br/>If address is used, id is not possible to use.</param>
    /// <param name="countryCode">Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country. 
    /// <br/>
    /// <br/> 
    /// <br/>
    /// <br/>When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter. 
    /// <br/>
    /// <br/>E.g. for countryCode=GB will be time format AM/PM and distance unit will be mi. 
    /// <br/>
    /// <br/>E.g. for countryCode=DE will be time format 24h and distance unit will be km.  
    /// <br/>
    /// <br/> 
    /// <br/>
    /// <br/>The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country)</param>
    /// <param name="language">Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’ 
    /// <br/>
    /// <br/>Language Code is using ISO 3166-1 alpha-3 (3 letters)</param>
    /// <param name="languageScriptCode">Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional.</param>
    /// <param name="languageCountryCode">Language Country Code - can be used to differentiate between linguistic variants of the same Language.</param>
    /// <param name="servicePointResults">Max. number of service points to be returned.  
    /// <br/>
    /// <br/>If id or idf is used, this parameter is not needed as this will return searched service point.</param>
    /// <param name="capability">Comma separated list of physical process capability codes.
    /// <br/>
    /// <br/> 81: I have a DHL account or return shipment
    /// <br/>
    /// <br/> 82: I have paid online
    /// <br/>
    /// <br/> 88: I will pay at the DHL Service Point
    /// <br/>
    /// <br/> 73: I will create a DHL shipping label at the DHL Service Point
    /// <br/>
    /// <br/> 74: I have printed a DHL label
    /// <br/>
    /// <br/>75,76: I have a QR code
    /// <br/>
    /// <br/>78,79: Im collecting a DHL Express parcel
    /// <br/>
    /// <br/>86,87: I have directed a DHL Express parcel to a DHL Service Point
    /// <br/>
    /// <br/>Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87
    /// <br/>
    /// <br/>Note: | is just used to represent the seperation of combinations.</param>
    /// <param name="openBefore">Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00</param>
    /// <param name="openAfter">Service points open After given time e.g.:15:00 will find service points which are open after 15:00</param>
    /// <param name="openDay">Open on Weekday, valid values as follow: 
    /// <br/>
    /// <br/>1 - Monday 
    /// <br/>
    /// <br/>2 - Tuesday 
    /// <br/>
    /// <br/>3 - Wednesday 
    /// <br/>
    /// <br/>4 - Thursday 
    /// <br/>
    /// <br/>5 - Friday 
    /// <br/>
    /// <br/>6 - Saturday 
    /// <br/>
    /// <br/>0 – Sunday</param>
    /// <param name="weight">Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”)</param>
    /// <param name="weightUom">Weight units – kg or lb. Required if weight is passed in.</param>
    /// <param name="length">Max. length of the shipment  - the highest dimension 
    /// <br/>
    /// <br/>e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”)</param>
    /// <param name="width">Max. width of the shipment  - the middle dimension 
    /// <br/>
    /// <br/>e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”)</param>
    /// <param name="height">Max. height of the shipment  - the lowest dimension 
    /// <br/>
    /// <br/>e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”)</param>
    /// <param name="dimensionsUom">Dimension units – cm or in. Required with any of length, width or height parameter.</param>
    /// <param name="resultUom">Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned.</param>
    /// <param name="serviceAreaCode">Service Area Code of the search address</param>
    /// <param name="servicePointTypes">Comma separated list of service point types, e.g. “CTY,STN,247”. 
    /// <br/>
    /// <br/>Allowed Values: 
    /// <br/>
    /// <br/>CTY (City) - High street premises. DHL owned and managed. Eg. Downtown
    /// <br/>
    /// <br/>STN (Station) - DHL premises. DHL owned and managed at PUD locations
    /// <br/>
    /// <br/>PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell
    /// <br/>
    /// <br/>247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated</param>
    /// <param name="maxDistance">Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored. 
    /// <br/>
    /// <br/>Accuracy of the maxDistance parameter: 
    /// <br/>
    /// <br/>The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l = maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r = maxDistance, but still within the search square: 
    /// <br/>
    /// <br/>Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address.</param>
    /// <param name="pieceCountLimit">Static number, max pieces which can be handled on the service point.</param>
    /// <param name="importCharges">Y/N – indicator whether it is possible to pay import charges on service point.</param>
    /// <param name="key">Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication.</param>
    /// <param name="combineParameters">Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&amp;” stands for AND condition “()” splits multiple conditions.</param>
    /// <param name="edd">Estimated Delivery date: 
    /// <br/>
    /// <br/>YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service.</param>
    /// <param name="excludeFullyBooked">Parameter which will enable to filter out fully booked services in the Service Point Locator response to client. 
    /// <br/>
    /// <br/>Values: 
    /// <br/>
    /// <br/>Y - Service Point Locator will not send back service points which are fully booked. 
    /// <br/>
    /// <br/>N - Service Point Locator will send back all service points, also those where is no free capacity. 
    /// <br/>
    /// <br/>If not provided in request, it will be set up as N by default.  
    /// <br/>
    /// <br/>This is a Servicepoint Capacity Management System parameter.</param>
    /// <param name="shipmentID">To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter.</param>
    /// <param name="pieceID">Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter.</param>
    /// <param name="shipmentOriginServiceAreaCode">To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter.</param>
    /// <param name="isResultsSpecificCapabRequired">This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI.</param>
    /// <param name="encrypt">This 'encrypt' flag is to indicate to Service Point Locator whether the address is tokenized(encrypt=y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list. 
    /// <br/>
    /// <br/> 
    /// <br/>
    /// <br/>When 'encrypt=y', Service Point Locator clients should mandatorily send tokenized address in the REST request.  
    /// <br/>
    /// <br/>When 'encrypt=n' or without 'encrypt' parameter, client should only send non-tokenized address(raw address). 
    /// <br/>
    /// <br/>Sample below:  
    /// <br/>
    /// <br/>      Non-tokenized(raw) address: Sabah, Malaysia 
    /// <br/>
    /// <br/>      Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ== 
    /// <br/>
    /// <br/> 
    /// <br/>
    /// <br/>Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools.</param>
    /// <param name="b64">This indicates whether the address parameter contains the base64 encoded value or not.</param>
    /// <param name="svpStatus">ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus 'A' is considered when this parameter is not sent in the request. 
    /// <br/>A = Service Available (Open)
    /// <br/>S = Service Suspended (Temporarily closed) 
    /// <br/>U = Service Unavailable (Temporarily closed) 
    /// <br/>Y = Not Yet Open (Temporarily closed) 
    /// <br/>X = Closed (Temporarily closed)</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<ServicePointsRestResponseV3> ExpApiServicepointsAsync(string address, string placeId, string providerId, string latitude, string longitude, string servicePointID, string countryCode, string language, string languageScriptCode, string languageCountryCode, string servicePointResults, string capability, string openBefore, string openAfter, System.Collections.Generic.IEnumerable<Anonymous> openDay, string weight, System.Collections.Generic.IEnumerable<Anonymous2> weightUom, string length, string width, string height, System.Collections.Generic.IEnumerable<Anonymous3> dimensionsUom, System.Collections.Generic.IEnumerable<Anonymous4> resultUom, string serviceAreaCode, System.Collections.Generic.IEnumerable<Anonymous5> servicePointTypes, string maxDistance, string pieceCountLimit, System.Collections.Generic.IEnumerable<Anonymous6> importCharges, string key, string combineParameters, string edd, System.Collections.Generic.IEnumerable<Anonymous7> excludeFullyBooked, string shipmentID, string pieceID, string shipmentOriginServiceAreaCode, System.Collections.Generic.IEnumerable<Anonymous8> isResultsSpecificCapabRequired, System.Collections.Generic.IEnumerable<Anonymous9> encrypt, System.Collections.Generic.IEnumerable<Anonymous10> b64, System.Collections.Generic.IEnumerable<Anonymous11> svpStatus, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, System.Threading.CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/servicepoints?");
        if (address != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("address") + "=").Append(System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (placeId != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("placeId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(placeId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (providerId != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("providerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(providerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (latitude != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("latitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (longitude != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("longitude") + "=").Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (servicePointID != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("servicePointID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(servicePointID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (countryCode != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("countryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(countryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (language != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("language") + "=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (languageScriptCode != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("languageScriptCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageScriptCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (languageCountryCode != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("languageCountryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageCountryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (servicePointResults != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("servicePointResults") + "=").Append(System.Uri.EscapeDataString(ConvertToString(servicePointResults, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (capability != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("capability") + "=").Append(System.Uri.EscapeDataString(ConvertToString(capability, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (openBefore != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("openBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(openBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (openAfter != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("openAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(openAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (openDay != null)
        {
            foreach (var item_ in openDay) { urlBuilder_.Append(System.Uri.EscapeDataString("openDay") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
        }
        if (weight != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("weight") + "=").Append(System.Uri.EscapeDataString(ConvertToString(weight, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (weightUom != null)
        {
            foreach (var item_ in weightUom) { urlBuilder_.Append(System.Uri.EscapeDataString("weightUom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
        }
        if (length != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("length") + "=").Append(System.Uri.EscapeDataString(ConvertToString(length, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (width != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("width") + "=").Append(System.Uri.EscapeDataString(ConvertToString(width, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (height != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("height") + "=").Append(System.Uri.EscapeDataString(ConvertToString(height, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (dimensionsUom != null)
        {
            foreach (var item_ in dimensionsUom) { urlBuilder_.Append(System.Uri.EscapeDataString("dimensionsUom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
        }
        if (resultUom != null)
        {
            foreach (var item_ in resultUom) { urlBuilder_.Append(System.Uri.EscapeDataString("resultUom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
        }
        if (serviceAreaCode != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("serviceAreaCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(serviceAreaCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (servicePointTypes != null)
        {
            foreach (var item_ in servicePointTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("servicePointTypes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
        }
        if (maxDistance != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("maxDistance") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxDistance, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (pieceCountLimit != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("pieceCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pieceCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (importCharges != null)
        {
            foreach (var item_ in importCharges) { urlBuilder_.Append(System.Uri.EscapeDataString("importCharges") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
        }
        if (key != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (combineParameters != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("combineParameters") + "=").Append(System.Uri.EscapeDataString(ConvertToString(combineParameters, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (edd != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("edd") + "=").Append(System.Uri.EscapeDataString(ConvertToString(edd, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (excludeFullyBooked != null)
        {
            foreach (var item_ in excludeFullyBooked) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeFullyBooked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
        }
        if (shipmentID != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("shipmentID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shipmentID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (pieceID != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("pieceID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pieceID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (shipmentOriginServiceAreaCode != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("shipmentOriginServiceAreaCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shipmentOriginServiceAreaCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (isResultsSpecificCapabRequired != null)
        {
            foreach (var item_ in isResultsSpecificCapabRequired) { urlBuilder_.Append(System.Uri.EscapeDataString("isResultsSpecificCapabRequired") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
        }
        if (encrypt != null)
        {
            foreach (var item_ in encrypt) { urlBuilder_.Append(System.Uri.EscapeDataString("encrypt") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
        }
        if (b64 != null)
        {
            foreach (var item_ in b64) { urlBuilder_.Append(System.Uri.EscapeDataString("b64") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
        }
        if (svpStatus != null)
        {
            foreach (var item_ in svpStatus) { urlBuilder_.Append(System.Uri.EscapeDataString("svpStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ServicePointsRestResponseV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 500)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ExceptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ExceptionResponse>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// provide reference data currently used for MyDHL API services usage.
    /// </summary>
    /// <remarks>
    /// The reference data service retrieves the reference data used for MyDHL API shipment or upload invoice data service.
    /// </remarks>
    /// <param name="datasetName">Must provide at least one datasetName value. If providing just the datasetName with no filterBy fields - the response will return the entire data set from the dataset table (bulk).</param>
    /// <param name="filterByValue">Use filter by value to query based on the specific string for optimized search.&lt;br&gt; &lt;br&gt; List of supported filterByValue per dataset (eg. dataset: filterByAttribute| supported filterByValue) &lt;br&gt;&lt;br&gt; a) returnStatusMessage: serviceName|CreateShipment,DocumentImageRequest,RateRequest,RequestIdentifier,RequestPickup,AddressValidateRequest,TrackingRequest,UpdatePickup,UpdateShipment,UploadInvoiceData,DeleteShipment,DocumentRetrieve-ePOD &lt;br&gt; b) returnStatusMessage: operationName|get-image,identifiers,address-validate,
    /// <br/>   RouteRequest, shipments, tracking, upload-image,landed-cost,rates,upload-invoice-data,pickup,proof-of-delivery &lt;br&gt;
    /// <br/>c) returnStatusMessage: protocol|REST,SOAP,XMLPI &lt;br&gt; d) productCode: docNonDocIndicator|Y,N &lt;br&gt; e) languageCode: serviceName|Tracking,CreateShipment, categoryGroup|Tracking,commercial invoice, shipment receipt, email notification</param>
    /// <param name="filterByAttribute">Use filter by attribute to define the list of supported attibuted for the specified datasetName. &lt;br&gt; List of supported attributes per dataset &lt;br&gt; (eg. dataset: supported filterByAttributes values) &lt;br&gt;&lt;br&gt; a) country: countryCode, countryName &lt;br&gt; b) countryPostalcodeFormat: countryCode &lt;br&gt; c) dangerousGoods: serviceCode &lt;br&gt; d) incoterm: incoterm &lt;br&gt; e) productCode: productCode, countryCode, docNonDocIndicator &lt;br&gt; f) serviceCode: serviceCode, countryCode, chargeCodeTypeCode, serviceGroupDescription &lt;br&gt; g) packageTypeCode: packageTypeCode &lt;br&gt; h) documentTypeCode: customsDocumentTypeCode &lt;br&gt; i) customerShipmentReferenceType: shipmentReferenceTypeCode &lt;br&gt; j) customerPackageReferenceType: packageReferenceTypeCode &lt;br&gt; k) invoiceReferenceType: invoiceReferenceTypeCode &lt;br&gt; l) invoiceItemReferenceType: itemReferenceTypeCode &lt;br&gt; m) registrationNumberTypeCode: registrationTypeCode &lt;br&gt; n) commodityCategory: commodityCategoryCode, commodityCategoryGroup, commodityCategoryDescription &lt;br&gt; o) returnStatusMessage: statusCode, serviceName, operationName, protocol &lt;br&gt; p) trackingEventCode: eventTypeCode, eventTypeDescription, visibleToCustomer &lt;br&gt; q) unitOfMeasurement: unitOfMeasurement &lt;br&gt; r) languageCode: languageCode, serviceName, categoryGroup, description</param>
    /// <param name="comparisonOperator">Use comparison operator to define the specific match condition for optimized search.</param>
    /// <param name="queryString">Use queryString for additional filter criteria in format of '[attribute]:[value]:[comparisonOperator]'. &lt;br&gt; All additional filters are applied together with logical connector 'AND'. &lt;br&gt; Maximum of three additional attribute-value-comparisonOperator combinations. &lt;br&gt; Multiple queryString parameters will be separated  by comma "," separator</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Reference Data found.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual System.Threading.Tasks.Task<SupermodelIoLogisticsExpressReferenceDataResponse> ExpApiReferenceDataAsync(DatasetName datasetName, string filterByValue, string filterByAttribute, ComparisonOperator? comparisonOperator, string queryString, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version)
    {
        return ExpApiReferenceDataAsync(datasetName, filterByValue, filterByAttribute, comparisonOperator, queryString, message_Reference, message_Reference_Date, plugin_Name, plugin_Version, shipping_System_Platform_Name, shipping_System_Platform_Version, webstore_Platform_Name, webstore_Platform_Version, x_version, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// provide reference data currently used for MyDHL API services usage.
    /// </summary>
    /// <remarks>
    /// The reference data service retrieves the reference data used for MyDHL API shipment or upload invoice data service.
    /// </remarks>
    /// <param name="datasetName">Must provide at least one datasetName value. If providing just the datasetName with no filterBy fields - the response will return the entire data set from the dataset table (bulk).</param>
    /// <param name="filterByValue">Use filter by value to query based on the specific string for optimized search.&lt;br&gt; &lt;br&gt; List of supported filterByValue per dataset (eg. dataset: filterByAttribute| supported filterByValue) &lt;br&gt;&lt;br&gt; a) returnStatusMessage: serviceName|CreateShipment,DocumentImageRequest,RateRequest,RequestIdentifier,RequestPickup,AddressValidateRequest,TrackingRequest,UpdatePickup,UpdateShipment,UploadInvoiceData,DeleteShipment,DocumentRetrieve-ePOD &lt;br&gt; b) returnStatusMessage: operationName|get-image,identifiers,address-validate,
    /// <br/>   RouteRequest, shipments, tracking, upload-image,landed-cost,rates,upload-invoice-data,pickup,proof-of-delivery &lt;br&gt;
    /// <br/>c) returnStatusMessage: protocol|REST,SOAP,XMLPI &lt;br&gt; d) productCode: docNonDocIndicator|Y,N &lt;br&gt; e) languageCode: serviceName|Tracking,CreateShipment, categoryGroup|Tracking,commercial invoice, shipment receipt, email notification</param>
    /// <param name="filterByAttribute">Use filter by attribute to define the list of supported attibuted for the specified datasetName. &lt;br&gt; List of supported attributes per dataset &lt;br&gt; (eg. dataset: supported filterByAttributes values) &lt;br&gt;&lt;br&gt; a) country: countryCode, countryName &lt;br&gt; b) countryPostalcodeFormat: countryCode &lt;br&gt; c) dangerousGoods: serviceCode &lt;br&gt; d) incoterm: incoterm &lt;br&gt; e) productCode: productCode, countryCode, docNonDocIndicator &lt;br&gt; f) serviceCode: serviceCode, countryCode, chargeCodeTypeCode, serviceGroupDescription &lt;br&gt; g) packageTypeCode: packageTypeCode &lt;br&gt; h) documentTypeCode: customsDocumentTypeCode &lt;br&gt; i) customerShipmentReferenceType: shipmentReferenceTypeCode &lt;br&gt; j) customerPackageReferenceType: packageReferenceTypeCode &lt;br&gt; k) invoiceReferenceType: invoiceReferenceTypeCode &lt;br&gt; l) invoiceItemReferenceType: itemReferenceTypeCode &lt;br&gt; m) registrationNumberTypeCode: registrationTypeCode &lt;br&gt; n) commodityCategory: commodityCategoryCode, commodityCategoryGroup, commodityCategoryDescription &lt;br&gt; o) returnStatusMessage: statusCode, serviceName, operationName, protocol &lt;br&gt; p) trackingEventCode: eventTypeCode, eventTypeDescription, visibleToCustomer &lt;br&gt; q) unitOfMeasurement: unitOfMeasurement &lt;br&gt; r) languageCode: languageCode, serviceName, categoryGroup, description</param>
    /// <param name="comparisonOperator">Use comparison operator to define the specific match condition for optimized search.</param>
    /// <param name="queryString">Use queryString for additional filter criteria in format of '[attribute]:[value]:[comparisonOperator]'. &lt;br&gt; All additional filters are applied together with logical connector 'AND'. &lt;br&gt; Maximum of three additional attribute-value-comparisonOperator combinations. &lt;br&gt; Multiple queryString parameters will be separated  by comma "," separator</param>
    /// <param name="message_Reference">Please provide message reference</param>
    /// <param name="message_Reference_Date">Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2</param>
    /// <param name="plugin_Name">Please provide name of the plugin (applicable to 3PV only)</param>
    /// <param name="plugin_Version">Please provide version of the plugin (applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Name">Please provide name of the shipping platform(applicable to 3PV only)</param>
    /// <param name="shipping_System_Platform_Version">Please provide version of the shipping platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Name">Please provide name of the webstore platform (applicable to 3PV only)</param>
    /// <param name="webstore_Platform_Version">Please provide version of the webstore platform (applicable to 3PV only)</param>
    /// <param name="x_version">Interface version - do not change this field value</param>
    /// <returns>Reference Data found.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<SupermodelIoLogisticsExpressReferenceDataResponse> ExpApiReferenceDataAsync(DatasetName datasetName, string filterByValue, string filterByAttribute, ComparisonOperator? comparisonOperator, string queryString, string message_Reference, string message_Reference_Date, string plugin_Name, string plugin_Version, string shipping_System_Platform_Name, string shipping_System_Platform_Version, string webstore_Platform_Name, string webstore_Platform_Version, string x_version, System.Threading.CancellationToken cancellationToken)
    {
        if (datasetName == null)
            throw new System.ArgumentNullException("datasetName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/reference-data?");
        urlBuilder_.Append(System.Uri.EscapeDataString("datasetName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(datasetName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        if (filterByValue != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("filterByValue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterByValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (filterByAttribute != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("filterByAttribute") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterByAttribute, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (comparisonOperator != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("comparisonOperator") + "=").Append(System.Uri.EscapeDataString(ConvertToString(comparisonOperator, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (queryString != null)
        {
            urlBuilder_.Append(System.Uri.EscapeDataString("queryString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new System.Net.Http.HttpRequestMessage())
            {

                AddRequestHeaders(request_);
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressReferenceDataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Wrong input parameters", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Reference Data not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 500)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SupermodelIoLogisticsExpressErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<SupermodelIoLogisticsExpressErrorResponse>("Process errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    private void AddRequestHeaders(HttpRequestMessage request_)
    {

        if (_options.MessageReference != null)
            request_.Headers.TryAddWithoutValidation("Message-Reference", ConvertToString(_options.MessageReference, System.Globalization.CultureInfo.InvariantCulture));

        if (_options.MessageReferenceDate != null)
            request_.Headers.TryAddWithoutValidation("Message-Reference-Date", ConvertToString(_options.MessageReferenceDate, System.Globalization.CultureInfo.InvariantCulture));

        if (_options.PluginName != null)
            request_.Headers.TryAddWithoutValidation("Plugin-Name", ConvertToString(_options.PluginName, System.Globalization.CultureInfo.InvariantCulture));

        if (_options.PluginVersion != null)
            request_.Headers.TryAddWithoutValidation("Plugin-Version", ConvertToString(_options.PluginVersion, System.Globalization.CultureInfo.InvariantCulture));

        if (_options.ShippingSystemPlatformName != null)
            request_.Headers.TryAddWithoutValidation("Shipping-System-Platform-Name", ConvertToString(_options.ShippingSystemPlatformName, System.Globalization.CultureInfo.InvariantCulture));

        if (_options.ShippingSystemPlatformVersion != null)
            request_.Headers.TryAddWithoutValidation("Shipping-System-Platform-Version", ConvertToString(_options.ShippingSystemPlatformVersion, System.Globalization.CultureInfo.InvariantCulture));

        if (_options.WebstorePlatformName != null)
            request_.Headers.TryAddWithoutValidation("Webstore-Platform-Name", ConvertToString(_options.WebstorePlatformName, System.Globalization.CultureInfo.InvariantCulture));

        if (_options.WebstorePlatformVersion != null)
            request_.Headers.TryAddWithoutValidation("Webstore-Platform-Version", ConvertToString(_options.WebstorePlatformVersion, System.Globalization.CultureInfo.InvariantCulture));

        if (_options.XVersion == null)
            throw new System.ArgumentNullException("x_version");

        request_.Headers.TryAddWithoutValidation("x-version", ConvertToString(_options.XVersion, System.Globalization.CultureInfo.InvariantCulture));

        if(_options.ApiKey == null)
            throw new System.ArgumentNullException("apiKey");

        if(_options.ApiSecret == null)
            throw new System.ArgumentNullException("apiSecret");

        var credentials = Encoding.ASCII.GetBytes($"{_options.ApiKey}:{_options.ApiSecret}");
        request_.Headers.Authorization =
            new AuthenticationHeaderValue("Basic", Convert.ToBase64String(credentials));
    }
    protected struct ObjectResponseResult<T>
    {
        public ObjectResponseResult(T responseObject, string responseText)
        {
            this.Object = responseObject;
            this.Text = responseText;
        }

        public T Object { get; }

        public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
    {
        if (response == null || response.Content == null)
        {
            return new ObjectResponseResult<T>(default(T), string.Empty);
        }

        if (ReadResponseAsString)
        {
            var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            try
            {
                var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                return new ObjectResponseResult<T>(typedBody, responseText);
            }
            catch (Newtonsoft.Json.JsonException exception)
            {
                var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
            }
        }
        else
        {
            try
            {
                using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                using (var streamReader = new System.IO.StreamReader(responseStream))
                using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                {
                    var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                    var typedBody = serializer.Deserialize<T>(jsonTextReader);
                    return new ObjectResponseResult<T>(typedBody, string.Empty);
                }
            }
            catch (Newtonsoft.Json.JsonException exception)
            {
                var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
            }
        }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
        if (value == null)
        {
            return "";
        }

        if (value is System.Enum)
        {
            var name = System.Enum.GetName(value.GetType(), value);
            if (name != null)
            {
                var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                if (field != null)
                {
                    var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                        as System.Runtime.Serialization.EnumMemberAttribute;
                    if (attribute != null)
                    {
                        return attribute.Value != null ? attribute.Value : name;
                    }
                }

                var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                return converted == null ? string.Empty : converted;
            }
        }
        else if (value is bool)
        {
            return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
        }
        else if (value is byte[])
        {
            return System.Convert.ToBase64String((byte[])value);
        }
        else if (value.GetType().IsArray)
        {
            var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
            return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
        }

        var result = System.Convert.ToString(value, cultureInfo);
        return result == null ? "" : result;
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressAccount
{
    /// <summary>
    /// Please enter DHL Express acount type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(15, MinimumLength = 1)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressAccountTypeCode TypeCode { get; set; }

    /// <summary>
    /// Please enter DHL Express account number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength = 1)]
    public string Number { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressAddress
{
    /// <summary>
    /// Please enter your postcode or leave empty if the address doesn't have a postcode
    /// </summary>
    [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(12)]
    public string PostalCode { get; set; }

    /// <summary>
    /// Please enter the city
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string CityName { get; set; }

    /// <summary>
    /// Please enter ISO country code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
    public string CountryCode { get; set; }

    /// <summary>
    /// Please enter your province or state code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("provinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 2)]
    public string ProvinceCode { get; set; }

    /// <summary>
    /// Please enter address line 1
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string AddressLine1 { get; set; }

    /// <summary>
    /// Please enter address line 2
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string AddressLine2 { get; set; }

    /// <summary>
    /// Please enter address line 3
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string AddressLine3 { get; set; }

    /// <summary>
    /// Please enter your suburb or county name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string CountyName { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressAddressCreateShipmentRequest
{
    /// <summary>
    /// Please enter your postcode or leave empty if the address doesn't have a postcode
    /// </summary>
    [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(12)]
    public string PostalCode { get; set; }

    /// <summary>
    /// Please enter the city
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string CityName { get; set; }

    /// <summary>
    /// Please enter ISO country code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
    public string CountryCode { get; set; }

    /// <summary>
    /// Please enter your province or state code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("provinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 2)]
    public string ProvinceCode { get; set; }

    /// <summary>
    /// Please enter address line 1
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string AddressLine1 { get; set; }

    /// <summary>
    /// Please enter address line 2
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string? AddressLine2 { get; set; }

    /// <summary>
    /// Please enter address line 3
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string? AddressLine3 { get; set; }

    /// <summary>
    /// Please enter your suburb or county name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string CountyName { get; set; }

    /// <summary>
    /// Please enter your state or province name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("provinceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string ProvinceName { get; set; }

    /// <summary>
    /// Please enter your country name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countryName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string CountryName { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressAddressCreateShipmentResponse
{
    /// <summary>
    /// Postal code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(12)]
    public string PostalCode { get; set; }

    /// <summary>
    /// City name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string CityName { get; set; }

    /// <summary>
    /// Country code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
    public string CountryCode { get; set; }

    /// <summary>
    /// Province or state code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("provinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProvinceCode { get; set; }

    /// <summary>
    /// Address line 1
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string AddressLine1 { get; set; }

    /// <summary>
    /// Address line 2
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string AddressLine2 { get; set; }

    /// <summary>
    /// Address line 3
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string AddressLine3 { get; set; }

    /// <summary>
    /// Suburb or county name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cityDistrictName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(45)]
    public string CityDistrictName { get; set; }

    /// <summary>
    /// Please enter your state or province name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("provinceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string ProvinceName { get; set; }

    /// <summary>
    /// Please enter your country name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countryName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string CountryName { get; set; }

}

/// <summary>
/// Address defintion for rating related services
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressAddressRatesRequest
{
    /// <summary>
    /// Please enter your postcode or leave empty if the address doesn't have a postcode
    /// </summary>
    [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(12)]
    public string PostalCode { get; set; }

    /// <summary>
    /// Please enter the city
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string CityName { get; set; }

    /// <summary>
    /// Please enter ISO country code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
    public string CountryCode { get; set; }

    /// <summary>
    /// Please enter your province or state code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("provinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 2)]
    public string ProvinceCode { get; set; }

    /// <summary>
    /// Please enter address line 1
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string AddressLine1 { get; set; }

    /// <summary>
    /// Please enter address line 3
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string AddressLine2 { get; set; }

    /// <summary>
    /// Please enter address line 3
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string AddressLine3 { get; set; }

    /// <summary>
    /// Please enter your suburb or county name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(45, MinimumLength = 1)]
    public string CountyName { get; set; }

}

/// <summary>
/// Comment describing your JSON Schema
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressAddressValidateResponse
{
    [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Warnings { get; set; }

    [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Address2> Address { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressBankDetails : System.Collections.ObjectModel.Collection<Anonymous12>
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressContact
{
    /// <summary>
    /// Please enter email address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
    public string Email { get; set; }

    /// <summary>
    /// Please enter phone number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
    public string Phone { get; set; }

    /// <summary>
    /// Please enter mobile phone number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mobilePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
    public string MobilePhone { get; set; }

    /// <summary>
    /// Please enter company name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
    public string CompanyName { get; set; }

    /// <summary>
    /// Please enter full name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
    public string FullName { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressContactBuyer
{
    /// <summary>
    /// Please enter email address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
    public string Email { get; set; }

    /// <summary>
    /// Please enter phone number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
    public string Phone { get; set; }

    /// <summary>
    /// Please enter mobile phone number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mobilePhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
    public string MobilePhone { get; set; }

    /// <summary>
    /// Please enter company name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
    public string CompanyName { get; set; }

    /// <summary>
    /// Please enter full name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
    public string FullName { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressContactCreateShipmentResponse
{
    /// <summary>
    /// Company name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
    public string CompanyName { get; set; }

    /// <summary>
    /// Full name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
    public string FullName { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressCreateShipmentRequest
{
    /// <summary>
    /// Identifies the date and time the package is tendered. Both the date and time portions of the string are expected to be used. The date should not be in the past or more than 10 days in the future. The time represents the local time of the shipment origin coupled with corresponding time zone. The date component must be in the format: YYYY-MM-DD; the time component must be in the format: HH:MM:SS using a 24-hour clock. The date and time parts are separated by the letter T (e.g., 2025-01-18T17:00:00 GMT+01:00). It is not recommended to populate this field with current time, the time the request is sent to DHL Express as it may be evaluated as being in the past the time it is received.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("plannedShippingDateAndTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(29, MinimumLength = 1)]
    public string PlannedShippingDateAndTime { get; set; }

    [Newtonsoft.Json.JsonProperty("pickup", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Pickup Pickup { get; set; } = new Pickup();

    /// <summary>
    /// Please enter DHL Express Global Product code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 1)]
    public string ProductCode { get; set; }

    /// <summary>
    /// Please enter DHL Express Local Product code. Important when shipping domestic products.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localProductCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
    public string LocalProductCode { get; set; }

    /// <summary>
    /// Please advise if you want to get rate estimates for given shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("getRateEstimates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool GetRateEstimates { get; set; } = false;

    /// <summary>
    /// Please enter all the DHL Express accounts and types to be used for this shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(3)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressAccount> Accounts { get; set; } = new System.Collections.ObjectModel.Collection<SupermodelIoLogisticsExpressAccount>();

    /// <summary>
    /// This section communicates additional shipping services, such as Insurance (or Shipment Value Protection).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("valueAddedServices", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(99)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressValueAddedServices>? ValueAddedServices { get; set; }

    /// <summary>
    /// Here you can modify label, waybillDoc, invoice and shipment receipt properties
    /// </summary>
    [Newtonsoft.Json.JsonProperty("outputImageProperties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public OutputImageProperties OutputImageProperties { get; set; }

    /// <summary>
    /// Here you can declare your customer references
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customerReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressReference> CustomerReferences { get; set; }

    /// <summary>
    /// Identifiers section is on the shipment level where you can optionaly provide a DHL Express waybill number. This has to be enabled by your DHL Express IT contact.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("identifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(5)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressIdentifier> Identifiers { get; set; }

    /// <summary>
    /// Here you need to define all the parties needed to ship the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customerDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public CustomerDetails CustomerDetails { get; set; } = new CustomerDetails();

    /// <summary>
    /// Here you can define all the properties related to the content of the prospected shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Content2 Content { get; set; } = new Content2();

    [Newtonsoft.Json.JsonProperty("documentImages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public SupermodelIoLogisticsExpressDocumentImages DocumentImages { get; set; }

    /// <summary>
    /// Here you can provide data in case you wish to use DHL Express On demand delivery service. Please note, that if using this segment then 'buyerDetails' customer role data also must be populated in the request message.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("onDemandDelivery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public OnDemandDelivery OnDemandDelivery { get; set; }

    /// <summary>
    /// Determines whether to request the On Demand Delivery (ODD) link. When set to true it will provide an URL link for the specified Waybill Number, Shipper Account Number. The default value is false, no ODD link URL is provided in the response message.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("requestOndemandDeliveryURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool RequestOndemandDeliveryURL { get; set; }

    /// <summary>
    /// This is to support sending email notification once the shipment is created. The email will contain the basic information on the shipper, recipient, waybill number, and shipment information
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentNotification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(5)]
    public System.Collections.Generic.ICollection<ShipmentNotification> ShipmentNotification { get; set; }

    /// <summary>
    /// Please provide any charges you have already paid for this shipment, like freight paid upfront. To allow using this section please contact your DHL Express representative
    /// </summary>
    [Newtonsoft.Json.JsonProperty("prepaidCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public System.Collections.Generic.ICollection<PrepaidCharges> PrepaidCharges { get; set; }

    /// <summary>
    /// If set to true, response will return transliterated text of shipper and receiver details.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("getTransliteratedResponse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool GetTransliteratedResponse { get; set; }

    /// <summary>
    /// Estimated delivery date option for QDDF or QDDC.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("estimatedDeliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EstimatedDeliveryDate EstimatedDeliveryDate { get; set; }

    /// <summary>
    /// Provides additional information in the response like service area details, routing code and pickup-related information
    /// </summary>
    [Newtonsoft.Json.JsonProperty("getAdditionalInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(5)]
    public System.Collections.Generic.ICollection<GetAdditionalInformation> GetAdditionalInformation { get; set; }

    /// <summary>
    /// Please provide the parent (mother) shipment details
    /// </summary>
    [Newtonsoft.Json.JsonProperty("parentShipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ParentShipment ParentShipment { get; set; }

}

/// <summary>
/// MyDHL API REST /shipments response schema
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressCreateShipmentResponse
{
    /// <summary>
    /// URL where the request has been sent to
    /// </summary>
    [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Url { get; set; }

    /// <summary>
    /// Here you will receive Shipment Identification Number of your package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentTrackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShipmentTrackingNumber { get; set; }

    /// <summary>
    /// If you requested pickup for your shipment you can use this URL to cancel the pickup
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cancelPickupUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CancelPickupUrl { get; set; }

    /// <summary>
    /// You can use ths URL to track your shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("trackingUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TrackingUrl { get; set; }

    /// <summary>
    /// If you asked for pickup service here you will find Dispach Confirmation Number which identifies your pickup booking
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dispatchConfirmationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DispatchConfirmationNumber { get; set; }

    /// <summary>
    /// Here you can find information for all pieces your shipment is having like Piece Identification Number 
    /// </summary>
    [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<Packages> Packages { get; set; }

    /// <summary>
    /// Here you can find all documents created for the shipment like Transport and WaybillDoc labels, Invoice, Profoma or Receipt
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Documents> Documents { get; set; }

    /// <summary>
    /// In this field you will find the On Demand Delivery (ODD) URL link if requested
    /// </summary>
    [Newtonsoft.Json.JsonProperty("onDemandDeliveryURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OnDemandDeliveryURL { get; set; }

    /// <summary>
    /// Here you can find additional information related to your shipment when you ask for it in the request
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ShipmentDetails> ShipmentDetails { get; set; }

    /// <summary>
    /// Here you can find rates related to your shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ShipmentCharges> ShipmentCharges { get; set; }

    /// <summary>
    /// Here you can find barcode details in base64
    /// </summary>
    [Newtonsoft.Json.JsonProperty("barcodeInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BarcodeInfo BarcodeInfo { get; set; }

    /// <summary>
    /// Here you can find details of estimated delivery date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("estimatedDeliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EstimatedDeliveryDate2 EstimatedDeliveryDate { get; set; }

    [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Warnings { get; set; }

}

/// <summary>
/// MyDHL API REST document image response schema
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressDocumentImageResponse
{
    /// <summary>
    /// Here you can find all document images from search query
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<Documents2> Documents { get; set; }

}

/// <summary>
/// This section is to support multiple base64 encoded string with the image of export documentation for Paperless Trade images. When an invalid base64 encoded string is provided, an error message will be returned
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressDocumentImages : System.Collections.ObjectModel.Collection<Anonymous13>
{

}

/// <summary>
/// error message
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressErrorResponse
{
    [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Instance { get; set; }

    [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Detail { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Message { get; set; }

    [Newtonsoft.Json.JsonProperty("additionalDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> AdditionalDetails { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

}

/// <summary>
/// Here you can find all details related to export declaration
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressExportDeclaration
{
    /// <summary>
    /// Please enter details for each export line item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lineItems", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(1000)]
    public System.Collections.Generic.ICollection<LineItems> LineItems { get; set; } = new System.Collections.ObjectModel.Collection<LineItems>();

    /// <summary>
    /// Please provide invoice related information
    /// </summary>
    [Newtonsoft.Json.JsonProperty("invoice", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Invoice Invoice { get; set; } = new Invoice();

    /// <summary>
    /// Please enter up to three remarks
    /// </summary>
    [Newtonsoft.Json.JsonProperty("remarks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(3)]
    public System.Collections.Generic.ICollection<Remarks> Remarks { get; set; }

    /// <summary>
    /// Please enter additional charge to appear on the invoice&lt;BR&gt;      admin, Administration Charge&lt;BR&gt;      delivery, Delivery Charge&lt;BR&gt;      documentation, Documentation Charge&lt;BR&gt;      expedite, Expedite Charge&lt;BR&gt;      freight, Freight Charge&lt;BR&gt;      fuel surcharge, Fuel Surcharge&lt;BR&gt;      logistic, Logistic Charge&lt;BR&gt;      other, Other Charge&lt;BR&gt;      packaging, Packaging Charge&lt;BR&gt;      pickup, Pickup Charge&lt;BR&gt;      handling, Handling Charge&lt;BR&gt;      vat, VAT Charge&lt;BR&gt;      insurance, Insurance Cost
    /// </summary>
    [Newtonsoft.Json.JsonProperty("additionalCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(5)]
    public System.Collections.Generic.ICollection<AdditionalCharges> AdditionalCharges { get; set; }

    /// <summary>
    /// Name of port of departure, shipment or destination as required under the applicable delivery term.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("placeOfIncoterm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
    public string PlaceOfIncoterm { get; set; }

    /// <summary>
    /// Please enter recipient reference
    /// </summary>
    [Newtonsoft.Json.JsonProperty("recipientReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string RecipientReference { get; set; }

    /// <summary>
    /// Exporter related details
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exporter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Exporter Exporter { get; set; }

    /// <summary>
    /// Please provide the reason for export
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exportReasonType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressExportDeclarationExportReasonType ExportReasonType { get; set; }

    /// <summary>
    /// Please provide the shipment was sent for Personal (Gift) or Commercial (Sale) reasons
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressExportDeclarationShipmentType ShipmentType { get; set; }

    /// <summary>
    /// Please provide the Customs Documents at invoice level
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customsDocuments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<CustomsDocuments> CustomsDocuments { get; set; }

    /// <summary>
    /// The Incoterms rules are a globally-recognized set of standards, used worldwide in international and domestic contracts for the delivery of goods, illustrating responsibilities between buyer and seller for costs and risk, as well as cargo insurance.&lt;BR&gt;      EXW ExWorks&lt;BR&gt;      FCA Free Carrier&lt;BR&gt;      CPT Carriage Paid To&lt;BR&gt;      CIP Carriage and Insurance Paid To&lt;BR&gt;      DPU Delivered at Place Unloaded&lt;BR&gt;      DAP Delivered at Place&lt;BR&gt;      DDP Delivered Duty Paid&lt;BR&gt;      FAS Free Alongside Ship&lt;BR&gt;      FOB Free on Board&lt;BR&gt;      CFR Cost and Freight&lt;BR&gt;      CIF Cost, Insurance and Freight&lt;BR&gt;      DAF Delivered at Frontier&lt;BR&gt;      DAT Delivered at Terminal&lt;BR&gt;      DDU Delivered Duty Unpaid&lt;BR&gt;      DEQ Delivery ex Quay&lt;BR&gt;      DES Delivered ex Ship
    /// </summary>
    [Newtonsoft.Json.JsonProperty("incoterm", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressExportDeclarationIncoterm Incoterm { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressIdentifier
{
    /// <summary>
    /// Please provide type of the identifier you want to set value for
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressIdentifierTypeCode TypeCode { get; set; }

    /// <summary>
    /// Please enter value of your identifier (WB number, PieceID)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string Value { get; set; }

    /// <summary>
    /// Please enter value of Piece Data Identifier. Note: Piece identification data should be same for all the pieces provided in single shipment.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dataIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
    public string DataIdentifier { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressIdentifierResponse
{
    [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Warnings { get; set; }

    [Newtonsoft.Json.JsonProperty("identifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Identifiers> Identifiers { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressImageUploadRequest
{
    [Newtonsoft.Json.JsonProperty("originalPlannedShippingDate", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$")]
    public string OriginalPlannedShippingDate { get; set; }

    /// <summary>
    /// Please enter all the DHL Express accounts and types to be used for this shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(3)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressAccount> Accounts { get; set; } = new System.Collections.ObjectModel.Collection<SupermodelIoLogisticsExpressAccount>();

    /// <summary>
    /// Please enter DHL Express Global Product code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 1)]
    public string ProductCode { get; set; }

    [Newtonsoft.Json.JsonProperty("documentImages", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public SupermodelIoLogisticsExpressDocumentImages DocumentImages { get; set; } = new SupermodelIoLogisticsExpressDocumentImages();

}

/// <summary>
/// Landed cost request model description
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressLandedCostRequest
{
    /// <summary>
    /// Here you need to define all the parties needed to ship the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customerDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public CustomerDetails2 CustomerDetails { get; set; } = new CustomerDetails2();

    /// <summary>
    /// Please enter all the DHL Express accounts and types to be used for this shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MaxLength(5)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressAccount> Accounts { get; set; } = new System.Collections.ObjectModel.Collection<SupermodelIoLogisticsExpressAccount>();

    /// <summary>
    /// Please enter DHL Express Global Product code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 1)]
    public string ProductCode { get; set; }

    /// <summary>
    /// Please enter DHL Express Local Product code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localProductCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
    public string LocalProductCode { get; set; }

    /// <summary>
    /// Please enter Unit of measurement - metric,imperial
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unitOfMeasurement", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressLandedCostRequestUnitOfMeasurement UnitOfMeasurement { get; set; }

    /// <summary>
    /// Currency code for the item price (the product being sold) and freight charge. The Landed Cost calculation result will be returned in this defined currency
    /// </summary>
    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string CurrencyCode { get; set; }

    /// <summary>
    /// Set this to true is shipment contains declarable content
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isCustomsDeclarable", Required = Newtonsoft.Json.Required.Always)]
    public bool IsCustomsDeclarable { get; set; }

    /// <summary>
    /// Set this to true if you want DHL EXpress product Duties and Taxes Paid outside shipment destination
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isDTPRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsDTPRequested { get; set; }

    /// <summary>
    /// Set this true if you ask for DHL Express insurance service
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isInsuranceRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsInsuranceRequested { get; set; }

    /// <summary>
    /// Allowed values 'true' - item cost breakdown will be returned, 'false' - item cost breakdown will not be returned
    /// </summary>
    [Newtonsoft.Json.JsonProperty("getCostBreakdown", Required = Newtonsoft.Json.Required.Always)]
    public bool GetCostBreakdown { get; set; }

    /// <summary>
    /// Please provide any additional charges you would like to include in total cost calculation
    /// </summary>
    [Newtonsoft.Json.JsonProperty("charges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(20)]
    public System.Collections.Generic.ICollection<Charges> Charges { get; set; }

    /// <summary>
    /// Possible values:&lt;BR&gt;      commercial: B2B&lt;BR&gt;      personal: B2C&lt;BR&gt;      commercia': B2B&lt;BR&gt;      personal: B2C
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentPurpose", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressLandedCostRequestShipmentPurpose ShipmentPurpose { get; set; }

    [Newtonsoft.Json.JsonProperty("transportationMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressLandedCostRequestTransportationMode TransportationMode { get; set; }

    /// <summary>
    /// Carrier being used to ship with. Allowed values are:&lt;BR&gt;      'DHL','UPS','FEDEX','TNT','POST',&lt;BR&gt;      'OTHERS'
    /// </summary>
    [Newtonsoft.Json.JsonProperty("merchantSelectedCarrierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressLandedCostRequestMerchantSelectedCarrierName MerchantSelectedCarrierName { get; set; }

    /// <summary>
    /// Here you can define properties per package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressPackageRR> Packages { get; set; } = new System.Collections.ObjectModel.Collection<SupermodelIoLogisticsExpressPackageRR>();

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(1000)]
    public System.Collections.Generic.ICollection<Items> Items { get; set; } = new System.Collections.ObjectModel.Collection<Items>();

    /// <summary>
    /// Allowed values 'true' - tariff formula on item and shipment level will be returned, 'false' - tariff formula on item and shipment level will not be returned
    /// </summary>
    [Newtonsoft.Json.JsonProperty("getTariffFormula", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool GetTariffFormula { get; set; }

    /// <summary>
    /// Allowed values 'true' - quotation ID on shipment level will be returned, 'false' - quotation ID on shipment level will not be returned
    /// </summary>
    [Newtonsoft.Json.JsonProperty("getQuotationID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool GetQuotationID { get; set; }

}

/// <summary>
/// Package definition for /shipments
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressPackage
{
    /// <summary>
    /// Please contact your DHL Express representative if you wish to use a DHL specific package otherwise ignore this element.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 2)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressPackageTypeCode? TypeCode { get; set; }

    /// <summary>
    /// The weight of the package.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0.001D, 999999999999D)]
    public double Weight { get; set; }

    /// <summary>
    /// Dimensions of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Dimensions2 Dimensions { get; set; } = new Dimensions2();

    /// <summary>
    /// Here you can declare your customer references for each package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customerReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(99)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressPackageReference> CustomerReferences { get; set; }

    /// <summary>
    /// Identifiers section is on the package level where you can optionaly provide a DHL Express waybill number. This has to be enabled by your DHL Express IT contact.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("identifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(3)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressIdentifier> Identifiers { get; set; }

    /// <summary>
    /// Please enter description of content for each package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
    public string? Description { get; set; }

    /// <summary>
    /// This allows you to define up to two bespoke barcodes on the DHL Express Tranport label. To use this feature please set outputImageProperties/imageOptions/templateName as ECOM26_84CI_003 for typeCode=label
    /// </summary>
    [Newtonsoft.Json.JsonProperty("labelBarcodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(2)]
    public System.Collections.Generic.ICollection<LabelBarcodes> LabelBarcodes { get; set; }

    /// <summary>
    /// This allows you to enter up to two bespoke texts on the DHL Express Tranport label. To use this feature please set outputImageProperties/imageOptions/templateName as ECOM26_84CI_003 for typeCode=label
    /// </summary>
    [Newtonsoft.Json.JsonProperty("labelText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(6)]
    public System.Collections.Generic.ICollection<LabelText> LabelText { get; set; }

    /// <summary>
    /// Please enter additional customer description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("labelDescription", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(80, MinimumLength = 1)]
    public string? LabelDescription { get; set; }

    /// <summary>
    /// Please enter package reference number. If package reference number is provided for at least one package, then package reference number must be provided for all packages.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, 999D)]
    public double ReferenceNumber { get; set; }

}

/// <summary>
/// Package defintion for rating related services
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressPackageRR
{
    /// <summary>
    /// Please contact your DHL Express representative if you wish to use a DHL specific package otherwise ignore this element.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressPackageRRTypeCode TypeCode { get; set; }

    /// <summary>
    /// The weight of the package.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0.001D, 999999999999D)]
    public double Weight { get; set; }

    /// <summary>
    /// Dimensions of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Dimensions3 Dimensions { get; set; } = new Dimensions3();

}

/// <summary>
/// Package Reference model description
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressPackageReference
{
    /// <summary>
    /// Please provide reference
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string Value { get; set; }

    /// <summary>
    /// Please provide reference type&lt;BR&gt;      &lt;BR&gt;      AAO, shipment reference number of receiver&lt;BR&gt;      CU, reference number of consignor - default&lt;BR&gt;      FF, reference number of freight forwarder&lt;BR&gt;      FN, freight bill number for &lt;ex works invoice number&gt;&lt;BR&gt;      IBC, inbound center reference number&lt;BR&gt;      LLR, load list reference for &lt;10-digit Shipment ID&gt;&lt;BR&gt;      OBC, outbound center reference number for &lt;SHIPMEN IDENTIFIER (COUNTRY OF ORIGIN)&gt;&lt;BR&gt;      PRN, pickup request number for &lt;BOOKINGREFERENCE NUMBER&gt;&lt;BR&gt;      ACP, local payer account number&lt;BR&gt;      ACS, local shipper account number&lt;BR&gt;      ACR, local receiver account number&lt;BR&gt;      CDN, customs declaration number&lt;BR&gt;      STD, eurolog 15-digit shipment id&lt;BR&gt;      CO, buyers order number
    /// <br/>
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 2)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressPackageReferenceTypeCode TypeCode { get; set; } = SupermodelIoLogisticsExpressPackageReferenceTypeCode.CU;

}

/// <summary>
/// RequestPickup schema definition
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressPickupRequest
{
    /// <summary>
    /// Identifies the date and time the package is ready for pickup Both the date and time portions of the string are expected to be used. The date should not be a past date or a date more than 10 days in the future. The time is the local time of the shipment based on the shipper's time zone. The date component must be in the format: YYYY-MM-DD; the time component must be in the format: HH:MM:SS using a 24 hour clock. The date and time parts are separated by the letter T (e.g. 2006-06-26T17:00:00 GMT+01:00).&lt;BR&gt;                           
    /// </summary>
    [Newtonsoft.Json.JsonProperty("plannedPickupDateAndTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(29, MinimumLength = 1)]
    public string PlannedPickupDateAndTime { get; set; }

    /// <summary>
    /// The latest time the location premises is available to dispatch the DHL Express shipment. (HH:MM) 
    /// </summary>
    [Newtonsoft.Json.JsonProperty("closeTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(5)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-1][0-9]|2[0-3]):([0-5][0-9])")]
    public string CloseTime { get; set; }

    /// <summary>
    /// Provides information on where the package should be picked up by DHL courier. &lt;BR&gt;                           
    /// </summary>
    [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(80)]
    public string Location { get; set; }

    /// <summary>
    /// Provides information on where the package should be picked up by DHL courier. &lt;BR&gt;                           
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressPickupRequestLocationType LocationType { get; set; }

    [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(5)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressAccount> Accounts { get; set; } = new System.Collections.ObjectModel.Collection<SupermodelIoLogisticsExpressAccount>();

    /// <summary>
    /// Details special pickup instructions you may wish to send to the DHL Courier.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("specialInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(4)]
    public System.Collections.Generic.ICollection<SpecialInstructions> SpecialInstructions { get; set; }

    /// <summary>
    /// Please provide additional pickup remark
    /// </summary>
    [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Remark { get; set; }

    [Newtonsoft.Json.JsonProperty("customerDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public CustomerDetails3 CustomerDetails { get; set; } = new CustomerDetails3();

    /// <summary>
    /// Please provide details related to shipment you want to do the pickup for
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<ShipmentDetails2> ShipmentDetails { get; set; } = new System.Collections.ObjectModel.Collection<ShipmentDetails2>();

}

/// <summary>
/// Comment describing your JSON Schema
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressPickupResponse
{
    /// <summary>
    /// List of Dispatch Confirmation Numbers which identifies the scheduled pickup
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dispatchConfirmationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<string> DispatchConfirmationNumbers { get; set; }

    [Newtonsoft.Json.JsonProperty("readyByTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ReadyByTime { get; set; }

    [Newtonsoft.Json.JsonProperty("nextPickupDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string NextPickupDate { get; set; }

    [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Warnings { get; set; }

}

/// <summary>
/// List of products
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressProducts
{
    [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<Products> Products { get; set; } = new System.Collections.ObjectModel.Collection<Products>();

    [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Warnings { get; set; }

}

/// <summary>
/// Definition of /rates request message
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressRateRequest
{
    [Newtonsoft.Json.JsonProperty("customerDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public CustomerDetails4 CustomerDetails { get; set; } = new CustomerDetails4();

    /// <summary>
    /// Please enter all the DHL Express accounts and types to be used for this shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(2)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressAccount> Accounts { get; set; }

    /// <summary>
    /// Please enter DHL Express Global Product code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 1)]
    public string ProductCode { get; set; }

    /// <summary>
    /// Please enter DHL Express Local Product code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localProductCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
    public string LocalProductCode { get; set; }

    /// <summary>
    /// Please use if you wish to filter the response by value added services
    /// </summary>
    [Newtonsoft.Json.JsonProperty("valueAddedServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(99)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressValueAddedServicesRates> ValueAddedServices { get; set; }

    /// <summary>
    /// Please use if you wish to filter the response by product(s) and/or value added services
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productsAndServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ProductsAndServices> ProductsAndServices { get; set; }

    /// <summary>
    /// payerCountryCode is to be provided if your profile has been enabled to view rates without an account number (this will provide DHL Express published rates for the payer country)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("payerCountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
    public string PayerCountryCode { get; set; }

    /// <summary>
    /// Identifies the date and time the package is tendered. Both the date and time portions of the string are expected to be used. The date should not be a past date or a date more than 10 days in the future. The time is the local time of the shipment based on the shipper's time zone. The date component must be in the format: YYYY-MM-DD; the time component must be in the format: HH:MM:SS using a 24 hour clock. The date and time parts are separated by the letter T (e.g. 2006-06-26T17:00:00 GMT+01:00).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("plannedShippingDateAndTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(29, MinimumLength = 1)]
    public string PlannedShippingDateAndTime { get; set; }

    /// <summary>
    /// Please enter Unit of measurement - metric,imperial
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unitOfMeasurement", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressRateRequestUnitOfMeasurement UnitOfMeasurement { get; set; }

    /// <summary>
    /// For customs purposes please advise if your shipment is dutiable (true) or non dutiable (false)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isCustomsDeclarable", Required = Newtonsoft.Json.Required.Always)]
    public bool IsCustomsDeclarable { get; set; }

    /// <summary>
    /// Please provide monetary amount related to your shipment, for example shipment declared value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("monetaryAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<MonetaryAmount> MonetaryAmount { get; set; }

    /// <summary>
    /// Legacy field and replaced by newer field getAdditionalInformation. Please set this to true to receive all value added services for each product available
    /// </summary>
    [Newtonsoft.Json.JsonProperty("requestAllValueAddedServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool RequestAllValueAddedServices { get; set; }

    /// <summary>
    /// Estimated delivery date option for QDDF or QDDC.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("estimatedDeliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EstimatedDeliveryDate3 EstimatedDeliveryDate { get; set; }

    /// <summary>
    /// Provides additional information in the response like all value added services, and rule groups
    /// </summary>
    [Newtonsoft.Json.JsonProperty("getAdditionalInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(3)]
    public System.Collections.Generic.ICollection<GetAdditionalInformation2> GetAdditionalInformation { get; set; }

    /// <summary>
    /// Please set this to true to filter out all products which needs DHL Express special customer agreement
    /// </summary>
    [Newtonsoft.Json.JsonProperty("returnStandardProductsOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool ReturnStandardProductsOnly { get; set; }

    /// <summary>
    /// Please set this to true in case you want to receive products which are not available on planned shipping date but next available day
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nextBusinessDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool NextBusinessDay { get; set; } = false;

    /// <summary>
    /// Please select which type of priducts you are interested in
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressRateRequestProductTypeCode ProductTypeCode { get; set; }

    /// <summary>
    /// Here you can define properties per package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressPackageRR> Packages { get; set; } = new System.Collections.ObjectModel.Collection<SupermodelIoLogisticsExpressPackageRR>();

}

/// <summary>
/// Comment describing your JSON Schema
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressRates
{
    [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<Products2> Products { get; set; } = new System.Collections.ObjectModel.Collection<Products2>();

    [Newtonsoft.Json.JsonProperty("exchangeRates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ExchangeRates> ExchangeRates { get; set; }

    [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Warnings { get; set; }

}

/// <summary>
/// Reference model description
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressReference
{
    /// <summary>
    /// Please provide reference
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string Value { get; set; }

    /// <summary>
    /// Please provide reference type&lt;BR&gt;      &lt;BR&gt;      AAO, shipment reference number of receiver&lt;BR&gt;      CU, reference number of consignor - default&lt;BR&gt;      FF, reference number of freight forwarder&lt;BR&gt;      FN, freight bill number for &lt;ex works invoice number&gt;&lt;BR&gt;      IBC, inbound center reference number&lt;BR&gt;      LLR, load list reference for &lt;10-digit Shipment ID&gt;&lt;BR&gt;      OBC, outbound center reference number for &lt;SHIPMEN IDENTIFIER (COUNTRY OF ORIGIN)&gt;&lt;BR&gt;      PRN, pickup request number for &lt;BOOKINGREFERENCE NUMBER&gt;&lt;BR&gt;      ACP, local payer account number&lt;BR&gt;      ACS, local shipper account number&lt;BR&gt;      ACR, local receiver account number&lt;BR&gt;      CDN, customs declaration number&lt;BR&gt;      STD, eurolog 15-digit shipment id&lt;BR&gt;      CO, buyers order number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 2)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressReferenceTypeCode TypeCode { get; set; } = SupermodelIoLogisticsExpressReferenceTypeCode.CU;

}

/// <summary>
/// Should your country require registration numbers, such as VAT, EOR etc., please declare it here
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressRegistrationNumbers
{
    /// <summary>
    /// VAT: Value-Added tax&lt;BR&gt;      EIN: Employer Identification Number&lt;BR&gt;      GST: Goods and Service Tax&lt;BR&gt;      SSN: Social Security Number&lt;BR&gt;      EOR: European Union Registration and Identification&lt;BR&gt;      DUN: Data Universal Numberin System&lt;BR&gt;      FED: Federal Tax ID&lt;BR&gt;      STA: State Tax ID&lt;BR&gt;      CNP: Brazil CNPJ/CPF Federal Tax&lt;BR&gt;      IE: Brazil type IE/RG Federal Tax&lt;BR&gt;      INN: Russia bank details section INN&lt;BR&gt;      KPP: Russia bank details section KPP&lt;BR&gt;      OGR: Russia bank details section OGRN&lt;BR&gt;      OKP: Russia bank details section OKPO&lt;BR&gt;      SDT: Overseas Registered Supplier or Import One-Stop-Shop or GB VAT (foreign) registration or AUSid GST Registration or VAT on E-Commerce&lt;BR&gt;      FTZ: Free Trade Zone ID&lt;BR&gt;      DAN: Deferment Account Duties Only&lt;BR&gt;      TAN: Deferment Account Tax Only&lt;BR&gt;      DTF: Deferment Account Duties, Taxes and Fees Only&lt;BR&gt;      RGP: EU Registered Exporters registration ID&lt;BR&gt;       DLI: Driver's License &lt;BR&gt;      NID: National Identity Card&lt;BR&gt; PAS: Passport&lt;BR&gt; MID: Manufacturer ID&lt;BR&gt;IMS: UK Internal Market Scheme&lt;BR&gt; Note: 'IMS' code will be available in Production by the end of March 2025.&lt;BR&gt; EIC: eInvoice Carrier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressRegistrationNumbersTypeCode TypeCode { get; set; } = SupermodelIoLogisticsExpressRegistrationNumbersTypeCode.VAT;

    /// <summary>
    /// Please enter registration number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string Number { get; set; }

    /// <summary>
    /// Please enter 2 character code of the country where the Registration Number has been issued by
    /// </summary>
    [Newtonsoft.Json.JsonProperty("issuerCountryCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
    public string IssuerCountryCode { get; set; }

}

/// <summary>
/// tracking response schema
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressTrackingResponse
{
    [Newtonsoft.Json.JsonProperty("shipments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Shipments> Shipments { get; set; }

}

/// <summary>
/// UpdatePickup schema definition
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressUpdatePickupRequest
{
    /// <summary>
    /// Please enter Dispatch confirmation number which identifies the already scheduled pickup
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dispatchConfirmationNumber", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 15)]
    public string DispatchConfirmationNumber { get; set; }

    /// <summary>
    /// Please enter the shipper account number which was used during the scheduled pickup creation
    /// </summary>
    [Newtonsoft.Json.JsonProperty("originalShipperAccountNumber", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength = 1)]
    public string OriginalShipperAccountNumber { get; set; }

    /// <summary>
    /// Identifies the date and time the package is ready for pickup Both the date and time portions of the string are expected to be used. The date should not be a past date or a date more than 10 days in the future. The time is the local time of the shipment based on the shipper's time zone. The date component must be in the format: YYYY-MM-DD; the time component must be in the format: HH:MM:SS using a 24 hour clock. The date and time parts are separated by the letter T (e.g. 2006-06-26T17:00:00 GMT+01:00).&lt;BR&gt;                           
    /// </summary>
    [Newtonsoft.Json.JsonProperty("plannedPickupDateAndTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(29, MinimumLength = 1)]
    public string PlannedPickupDateAndTime { get; set; }

    /// <summary>
    /// The latest time the location premises is available to dispatch the DHL Express shipment. (HH:MM) 
    /// </summary>
    [Newtonsoft.Json.JsonProperty("closeTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(5)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-1][0-9]|2[0-3]):([0-5][0-9])")]
    public string CloseTime { get; set; }

    /// <summary>
    /// Provides information on where the package should be picked up by DHL courier. &lt;BR&gt;                           
    /// </summary>
    [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(80)]
    public string Location { get; set; }

    /// <summary>
    /// Provides information on where the package should be picked up by DHL courier. &lt;BR&gt;                           
    /// </summary>
    [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressUpdatePickupRequestLocationType LocationType { get; set; }

    [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(5)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressAccount> Accounts { get; set; } = new System.Collections.ObjectModel.Collection<SupermodelIoLogisticsExpressAccount>();

    /// <summary>
    /// Details special pickup instructions you may wish to send to the DHL Courier.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("specialInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(4)]
    public System.Collections.Generic.ICollection<SpecialInstructions2> SpecialInstructions { get; set; }

    /// <summary>
    /// Please provide additional pickup remark
    /// </summary>
    [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Remark { get; set; }

    [Newtonsoft.Json.JsonProperty("customerDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public CustomerDetails5 CustomerDetails { get; set; } = new CustomerDetails5();

    /// <summary>
    /// Please provide updated details related to shipment you want update the pickup for
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<ShipmentDetails3> ShipmentDetails { get; set; }

}

/// <summary>
/// Comment describing your JSON Schema
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressUpdatePickupResponse
{
    /// <summary>
    /// Identifies the pickup you made the changes for
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dispatchConfirmationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DispatchConfirmationNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("readyByTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ReadyByTime { get; set; }

    [Newtonsoft.Json.JsonProperty("nextPickupDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string NextPickupDate { get; set; }

    [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Warnings { get; set; }

}

/// <summary>
/// MyDHL API REST UploadInvoiceData request JSON Schema
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressUploadInvoiceDataRequest
{
    /// <summary>
    /// The planned shipment date for the provided shipmentTrackingNumber.  The date must be in the format: YYYY-MM-DD
    /// </summary>
    [Newtonsoft.Json.JsonProperty("plannedShipDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$")]
    public string PlannedShipDate { get; set; }

    /// <summary>
    /// Please enter all the DHL Express accounts and types to be used for this shipment.  Note: accounts/0/number with typeCode 'shipper' is mandatory if using POST method and no shipmentTrackingNumber is provided in request.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(2)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressAccount> Accounts { get; set; }

    /// <summary>
    /// Here you can define all the properties related to the content of the prospected shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Content3 Content { get; set; } = new Content3();

    /// <summary>
    /// Here you can set invoice properties
    /// </summary>
    [Newtonsoft.Json.JsonProperty("outputImageProperties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public OutputImageProperties2 OutputImageProperties { get; set; }

    /// <summary>
    /// Here you need to define all the parties needed to ship the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CustomerDetails6 CustomerDetails { get; set; }

}

/// <summary>
/// MyDHL API REST UploadInvoiceData request JSON Schema
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressUploadInvoiceDataRequestSID
{
    /// <summary>
    /// Please provide Shipment Identification number (AWB number)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentTrackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShipmentTrackingNumber { get; set; }

    /// <summary>
    /// The planned shipment date for the provided shipmentTrackingNumber.  The date must be in the format: YYYY-MM-DD
    /// </summary>
    [Newtonsoft.Json.JsonProperty("plannedShipDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$")]
    public string PlannedShipDate { get; set; }

    /// <summary>
    /// Please enter all the DHL Express accounts and types to be used for this shipment.  Note: accounts/0/number with typeCode 'shipper' is mandatory if using POST method and no shipmentTrackingNumber is provided in request.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(2)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressAccount> Accounts { get; set; }

    /// <summary>
    /// Here you can define all the properties related to the content of the prospected shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Content4 Content { get; set; } = new Content4();

    /// <summary>
    /// Here you can set invoice properties
    /// </summary>
    [Newtonsoft.Json.JsonProperty("outputImageProperties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public OutputImageProperties3 OutputImageProperties { get; set; }

    /// <summary>
    /// Here you need to define all the parties needed to ship the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CustomerDetails7 CustomerDetails { get; set; }

}

/// <summary>
/// MyDHL API REST UploadInvoiceData response JSON schema
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressUploadInvoiceDataResponse
{
    [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Warnings { get; set; }

    /// <summary>
    /// Status description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressValueAddedServices
{
    /// <summary>
    /// Please enter DHL Express value added service code. For detailed list of all available service codes for your prospect shipment please invoke GET /products or GET /rates
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 1)]
    public string ServiceCode { get; set; }

    /// <summary>
    /// Please enter monetary value of service (e.g. Insured Value)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double? Value { get; set; }

    /// <summary>
    /// Please enter currency code (e.g. Insured Value currency code)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string? Currency { get; set; }

    /// <summary>
    /// Payment method code (e.g. Cash)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Method { get; set; }

    /// <summary>
    /// The DangerousGoods section indicates if there is dangerous good content within the shipment. &lt;BR&gt; The ContentID node contains the Content ID for Dangerous Good classification. &lt;BR&gt; It is required to provide the dangerous good Content ID for every dangerous good special service provided, and vice versa. &lt;BR&gt;
    /// <br/>For the complete list of dangerous goods Content IDs and dangerous goods special services combinations, refer to Reference Data Guide section 5. valueAddedServicesDefinition\\dangerousGoods. &lt;BR&gt; Note: Please contact your DHL Express IT representative if additional assistance is required.&lt;BR&gt;&lt;BR&gt;
    /// <br/>For dangerous goods shipment with Dry Ice example: UN1845 (Content ID: 901), additional node must be populated 'dryIceTotalNetWeight.'&lt;BR&gt;
    /// <br/>For dangerous goods shipment with 'Excepted Quantities', additional node must be populated 'unCodes'. Few scenarios guideline to prepare a Dangerous Goods shipment for:&lt;BR&gt;&lt;BR&gt;
    /// <br/>A) Dry Ice: &lt;BR&gt; 1.'serviceCode' element must contain value of 'HC'&lt;BR&gt; 2.'contentID' element consists of '901'&lt;BR&gt; 3.'dryIceTotalNetWeight' element consists of the total net weight of the dry ice in 'unitofMeasurement' &lt;BR&gt;&lt;BR&gt;
    /// <br/>B) Lithium Battery: &lt;BR&gt; 1.'serviceType' element must contain value of 'HD', 'HM', 'HV' or 'HW'&lt;BR&gt; 2.'contentID' element consists of '966', '969', '967', '970' respectively&lt;BR&gt;&lt;BR&gt;
    /// <br/>C) Excepted Quantities:&lt;BR&gt; 1.'serviceCode' element must contain value of 'HH'&lt;BR&gt; 2.'contentID' element consists of 'E01&lt;BR&gt; 3.'unCodes' element consists of the UN code associate with it.&lt;BR&gt;
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dangerousGoods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public System.Collections.Generic.ICollection<DangerousGoods> DangerousGoods { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressValueAddedServicesRates
{
    /// <summary>
    /// Please enter DHL Express value added global service code. For detailed list of all available service codes for your prospect shipment please invoke /products or /rates
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 1)]
    public string ServiceCode { get; set; }

    /// <summary>
    /// Please enter DHL Express value added local service code. For detailed list of all available service codes for your prospect shipment please invoke /products or /rates
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localServiceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
    public string LocalServiceCode { get; set; }

    /// <summary>
    /// Please enter monetary value of service (e.g. Insured Value)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double Value { get; set; }

    /// <summary>
    /// Please enter currency code (e.g. Insured Value currency code)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string Currency { get; set; }

    /// <summary>
    /// For future use
    /// </summary>
    [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SupermodelIoLogisticsExpressValueAddedServicesRatesMethod Method { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressEPODResponse
{
    [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Documents3> Documents { get; set; }

}

/// <summary>
/// MyDHL API REST ReferenceData response JSON Schema
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressReferenceDataResponse
{
    /// <summary>
    /// The result of search from provided reference criteria
    /// </summary>
    [Newtonsoft.Json.JsonProperty("referenceData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(99)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressReferenceData> ReferenceData { get; set; }

    [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Warnings { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressReferenceData
{
    /// <summary>
    /// The reference data dataset name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("datasetName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength = 1)]
    public string DatasetName { get; set; }

    [Newtonsoft.Json.JsonProperty("dataSetCaptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength = 1)]
    public string DataSetCaptions { get; set; }

    [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(3000)]
    public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<Anonymous14>> Data { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Sub-entity holding the facility address
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Address
{
    /// <summary>
    /// First line of the facility address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AddressLine1 { get; set; }

    /// <summary>
    /// Second line of the facility address (only present if field is filled in GREF database)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AddressLine2 { get; set; }

    /// <summary>
    /// Third line of the facility address (only present if field is filled in GREF database)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AddressLine3 { get; set; }

    /// <summary>
    /// Street details in facility address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Street { get; set; }

    /// <summary>
    /// House number in facility address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("houseNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HouseNumber { get; set; }

    /// <summary>
    /// Additional details in facility address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("additionalInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AdditionalInfo { get; set; }

    /// <summary>
    /// Facility city
    /// </summary>
    [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string City { get; set; }

    /// <summary>
    /// Zip code of the facility
    /// </summary>
    [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ZipCode { get; set; }

    /// <summary>
    /// State
    /// </summary>
    [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string State { get; set; }

    /// <summary>
    /// Country
    /// </summary>
    [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Country { get; set; }

    /// <summary>
    /// DHL country
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dhlCountry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DhlCountry { get; set; }

    /// <summary>
    /// Country Division Code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countryDivisionCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountryDivisionCode { get; set; }

    /// <summary>
    /// Enumeration (State, Province)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countryDivisionCodeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountryDivisionCodeType { get; set; }

    /// <summary>
    /// Obsolete. This is planned to be removed in future releases.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Html { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Capacity information – only if additional call to SCMS was triggered
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CapacityStatus
{
    /// <summary>
    /// Severity code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sev", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Sev { get; set; }

    /// <summary>
    /// SCMS
    /// </summary>
    [Newtonsoft.Json.JsonProperty("msgClg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MsgClg { get; set; }

    /// <summary>
    /// SCMS Status code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("msgCIgd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MsgCIgd { get; set; }

    /// <summary>
    /// SCMS Description of status code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dsc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Dsc { get; set; }

    /// <summary>
    /// SCMS detailed description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dtlDsc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DtlDsc { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Chronology
{
    [Newtonsoft.Json.JsonProperty("zone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DateTimeZone Zone { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Array of dates:{from, to} when is closed.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ClosedDates
{
    /// <summary>
    /// Date – start when it is closed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string From { get; set; }

    /// <summary>
    /// Date – end when it is closed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string To { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Information about how the Service Point can be contacted
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ContactDetails
{
    /// <summary>
    /// Phone number of the Service Point
    /// </summary>
    [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PhoneNumber { get; set; }

    /// <summary>
    /// E-Mail address of the Service Point
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    /// <summary>
    /// Link to website of the Service Point
    /// </summary>
    [Newtonsoft.Json.JsonProperty("linkUri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LinkUri { get; set; }

    /// <summary>
    /// Service Point ID
    /// </summary>
    [Newtonsoft.Json.JsonProperty("servicePointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServicePointId { get; set; }

    /// <summary>
    /// Obsolete. This is planned to be removed in future releases.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Html { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DateTimeField
{
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DateTimeFieldType Type { get; set; }

    [Newtonsoft.Json.JsonProperty("supported", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Supported { get; set; }

    [Newtonsoft.Json.JsonProperty("lenient", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Lenient { get; set; }

    [Newtonsoft.Json.JsonProperty("minimumValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int MinimumValue { get; set; }

    [Newtonsoft.Json.JsonProperty("maximumValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int MaximumValue { get; set; }

    [Newtonsoft.Json.JsonProperty("durationField", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DurationField DurationField { get; set; }

    [Newtonsoft.Json.JsonProperty("rangeDurationField", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DurationField RangeDurationField { get; set; }

    [Newtonsoft.Json.JsonProperty("leapDurationField", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DurationField LeapDurationField { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DateTimeFieldType
{
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("durationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DurationFieldType DurationType { get; set; }

    [Newtonsoft.Json.JsonProperty("rangeDurationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DurationFieldType RangeDurationType { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DateTimeZone
{
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    [Newtonsoft.Json.JsonProperty("fixed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Fixed { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Array of numbers L W H
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Dimensions
{
    [Newtonsoft.Json.JsonProperty("l", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double L { get; set; }

    [Newtonsoft.Json.JsonProperty("w", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double W { get; set; }

    [Newtonsoft.Json.JsonProperty("h", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double H { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DurationField
{
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DurationFieldType Type { get; set; }

    [Newtonsoft.Json.JsonProperty("supported", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Supported { get; set; }

    [Newtonsoft.Json.JsonProperty("unitMillis", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long UnitMillis { get; set; }

    [Newtonsoft.Json.JsonProperty("precise", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Precise { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DurationFieldType
{
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// The geo coordinates of the facility’s location
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class GeoLocation
{
    /// <summary>
    /// Latitude of the geocoded search address (used for GREF web service search)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Latitude { get; set; }

    /// <summary>
    /// Longitude of the geocoded search address (used for GREF web service search)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Longitude { get; set; }

    [Newtonsoft.Json.JsonProperty("suggestion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Suggestion Suggestion { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Holiday details
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Holidays
{
    /// <summary>
    /// Array of objects: {date, from, to}, where date is date and from and to is time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("open", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<OpenDatesTime> Open { get; set; }

    /// <summary>
    /// Array of dates:{from, to} when is closed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("closed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ClosedDates> Closed { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Information about language used for search
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Language
{
    /// <summary>
    /// Language Code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode { get; set; }

    /// <summary>
    /// Language Script Code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("languageScriptCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageScriptCode { get; set; }

    /// <summary>
    /// Language Country Code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("languageCountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCountryCode { get; set; }

    /// <summary>
    /// Language Valid
    /// </summary>
    [Newtonsoft.Json.JsonProperty("languageOk", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool LanguageOk { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Array of openingHours entities, each consisting of week day, opening time and closing time.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class LocalTime
{
    [Newtonsoft.Json.JsonProperty("chronology", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Chronology Chronology { get; set; }

    [Newtonsoft.Json.JsonProperty("hourOfDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int HourOfDay { get; set; }

    [Newtonsoft.Json.JsonProperty("minuteOfHour", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int MinuteOfHour { get; set; }

    [Newtonsoft.Json.JsonProperty("secondOfMinute", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int SecondOfMinute { get; set; }

    [Newtonsoft.Json.JsonProperty("millisOfSecond", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int MillisOfSecond { get; set; }

    [Newtonsoft.Json.JsonProperty("millisOfDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int MillisOfDay { get; set; }

    [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DateTimeField> Fields { get; set; }

    [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<int> Values { get; set; }

    [Newtonsoft.Json.JsonProperty("fieldTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DateTimeFieldType> FieldTypes { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Array of objects: {date, from, to}, where date is date and from and to is time
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class OpenDatesTime
{
    /// <summary>
    /// Date – when is open during holidays
    /// </summary>
    [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Date { get; set; }

    /// <summary>
    /// Time – beginning of open hours
    /// </summary>
    [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string From { get; set; }

    /// <summary>
    /// Time – end of open hours
    /// </summary>
    [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string To { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Array of openingHours entities, each consisting of week day, opening time and closing time.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class OpeningHours
{
    /// <summary>
    /// Multiple opening hours entities can exist for the same week day.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("openingHours", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<OpeningTime> OpeningHours1 { get; set; } = new System.Collections.ObjectModel.Collection<OpeningTime>();

    /// <summary>
    /// Holiday details with date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("holidayDates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<System.DateTimeOffset> HolidayDates { get; set; }

    /// <summary>
    /// Holiday details with date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("holidaysDates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<System.DateTimeOffset>> HolidaysDates { get; set; }

    /// <summary>
    /// Obsolete. This is planned to be removed in future releases.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Html { get; set; }

    /// <summary>
    /// Obsolete. This is planned to be removed in future releases.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("holidayOpeningHoursHtml", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HolidayOpeningHoursHtml { get; set; }

    [Newtonsoft.Json.JsonProperty("holidays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Holidays Holidays { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Multiple opening hours entities can exist for the same week day.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class OpeningTime
{
    /// <summary>
    /// Weekday for which this opening hours entity is valid. Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY, HOLIDAY
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public OpeningTimeDayOfWeek DayOfWeek { get; set; }

    /// <summary>
    /// The opening time of this entity
    /// </summary>
    [Newtonsoft.Json.JsonProperty("openingTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OpeningTime1 { get; set; }

    /// <summary>
    /// The closing time of this entity
    /// </summary>
    [Newtonsoft.Json.JsonProperty("closingTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ClosingTime { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Partner information (when SVP type is PRT)
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Partner
{
    /// <summary>
    /// ID of a partner
    /// </summary>
    [Newtonsoft.Json.JsonProperty("partnerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PartnerId { get; set; }

    /// <summary>
    /// Name of a partner
    /// </summary>
    [Newtonsoft.Json.JsonProperty("partnerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PartnerName { get; set; }

    /// <summary>
    /// Code of a partner
    /// </summary>
    [Newtonsoft.Json.JsonProperty("partnerTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PartnerTypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("promotion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Promotion Promotion { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Promotion on a SVP level
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Promotion
{
    /// <summary>
    /// Unique identifier for promotion
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// Country Code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountryCode { get; set; }

    /// <summary>
    /// Partner Type code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("partnerTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PartnerTypeCode { get; set; }

    /// <summary>
    /// Service Point ID
    /// </summary>
    [Newtonsoft.Json.JsonProperty("servicePointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServicePointId { get; set; }

    /// <summary>
    /// Client ID
    /// </summary>
    [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ClientId { get; set; }

    /// <summary>
    /// Capability(PPC)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("capability", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Capability { get; set; }

    /// <summary>
    /// Promotion Start date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.DateTimeOffset StartDate { get; set; }

    /// <summary>
    /// Promotion End date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.DateTimeOffset EndDate { get; set; }

    /// <summary>
    /// Promotion on specific day of the week
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DayOfWeek { get; set; }

    /// <summary>
    /// Promotion message
    /// </summary>
    [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Text { get; set; }

    /// <summary>
    /// Promotion button text
    /// </summary>
    [Newtonsoft.Json.JsonProperty("buttonText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ButtonText { get; set; }

    /// <summary>
    /// Promotion Language Code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("languageCode1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode1 { get; set; }

    /// <summary>
    /// Promotion message
    /// </summary>
    [Newtonsoft.Json.JsonProperty("text1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Text1 { get; set; }

    /// <summary>
    /// Promotion button text
    /// </summary>
    [Newtonsoft.Json.JsonProperty("buttonText1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ButtonText1 { get; set; }

    /// <summary>
    /// Promotion Language Code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("languageCode2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode2 { get; set; }

    /// <summary>
    /// Promotion message
    /// </summary>
    [Newtonsoft.Json.JsonProperty("text2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Text2 { get; set; }

    /// <summary>
    /// Promotion button text
    /// </summary>
    [Newtonsoft.Json.JsonProperty("buttonText2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ButtonText2 { get; set; }

    /// <summary>
    /// Promotion Language Code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("languageCode3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode3 { get; set; }

    /// <summary>
    /// Promotion message
    /// </summary>
    [Newtonsoft.Json.JsonProperty("text3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Text3 { get; set; }

    /// <summary>
    /// Promotion button text
    /// </summary>
    [Newtonsoft.Json.JsonProperty("buttonText3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ButtonText3 { get; set; }

    /// <summary>
    /// Promotion Web link
    /// </summary>
    [Newtonsoft.Json.JsonProperty("hyperlink", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Hyperlink { get; set; }

    /// <summary>
    /// Promotion created date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTimeOffset Created { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Response status
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class RestResponseStatus
{
    /// <summary>
    /// Status/error code of the response
    /// </summary>
    [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int StatusCode { get; set; }

    /// <summary>
    /// Status/error message text of the response
    /// </summary>
    [Newtonsoft.Json.JsonProperty("statusMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string StatusMessage { get; set; }

    [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Ok { get; set; }

    [Newtonsoft.Json.JsonProperty("warning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Warning { get; set; }

    [Newtonsoft.Json.JsonProperty("errorStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool ErrorStatus { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Array of the found Service Points. Each Service Point entity contains details about the service point.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServicePoint
{
    /// <summary>
    /// The facility ID from GREF database
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Id { get; set; }

    /// <summary>
    /// Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID = BRU001.
    /// <br/>If address is used id not possible to use.
    /// <br/>
    /// </summary>
    [Newtonsoft.Json.JsonProperty("facilityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FacilityId { get; set; }

    /// <summary>
    /// The facility type code from GREF database
    /// </summary>
    [Newtonsoft.Json.JsonProperty("facilityTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FacilityTypeCode { get; set; }

    /// <summary>
    /// The service point’s Service Area Code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceAreaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceAreaCode { get; set; }

    /// <summary>
    /// Name of the service point
    /// </summary>
    [Newtonsoft.Json.JsonProperty("servicePointName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServicePointName { get; set; }

    /// <summary>
    /// Formatted name of the service point
    /// </summary>
    [Newtonsoft.Json.JsonProperty("servicePointNameFormatted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServicePointNameFormatted { get; set; }

    /// <summary>
    /// The local trading name of the Service Point
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LocalName { get; set; }

    /// <summary>
    /// The type of the Service Point. CITY, STATION, PARTNER or TWENTYFOURSEVEN.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("servicePointType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ServicePointType ServicePointType { get; set; }

    [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Address Address { get; set; }

    [Newtonsoft.Json.JsonProperty("geoLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public GeoLocation GeoLocation { get; set; }

    /// <summary>
    /// The distance from the search address to this Service Point (beeline). 
    /// </summary>
    [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Distance { get; set; }

    /// <summary>
    /// Time until which a shipment can be handed in at the Service Point, and is still shipped on the same day
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shippingCutOffTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShippingCutOffTime { get; set; }

    [Newtonsoft.Json.JsonProperty("openingHours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public OpeningHours OpeningHours { get; set; }

    [Newtonsoft.Json.JsonProperty("servicePointCapabilities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ServicePointCapabilities ServicePointCapabilities { get; set; }

    [Newtonsoft.Json.JsonProperty("contactDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ContactDetails ContactDetails { get; set; }

    /// <summary>
    /// Obsolete. This is planned to be removed in future releases.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shippingCutOffTimeHtml", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShippingCutOffTimeHtml { get; set; }

    /// <summary>
    /// Distance of SVP from searched location
    /// </summary>
    [Newtonsoft.Json.JsonProperty("distanceValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DistanceValue { get; set; }

    /// <summary>
    /// Metric of distance
    /// </summary>
    [Newtonsoft.Json.JsonProperty("distanceMetric", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double DistanceMetric { get; set; }

    [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Language Language { get; set; }

    [Newtonsoft.Json.JsonProperty("shipmentLimitations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ShipmentLimitations ShipmentLimitations { get; set; }

    [Newtonsoft.Json.JsonProperty("shipmentLimitationsByPiece", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ShipmentLimitationsByPiece ShipmentLimitationsByPiece { get; set; }

    /// <summary>
    /// Charge code, e.g. XX
    /// </summary>
    [Newtonsoft.Json.JsonProperty("chargeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ChargeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("partner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Partner Partner { get; set; }

    [Newtonsoft.Json.JsonProperty("promotion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Promotion Promotion { get; set; }

    [Newtonsoft.Json.JsonProperty("capacityStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CapacityStatus CapacityStatus { get; set; }

    /// <summary>
    /// Status of the service point(Active or Inactive)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("svpStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SvpStatus { get; set; }

    /// <summary>
    /// Number of day when the work week starts. It starts from 0 to 6(Sunday to Saturday)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("workWeekStart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int WorkWeekStart { get; set; }

    [Newtonsoft.Json.JsonProperty("locatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LocatedAt { get; set; }

    [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DateTimeZone TimeZone { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// An entity that lists all capabilities of a Service Point.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServicePointCapabilities
{
    /// <summary>
    /// Indicates whether parking facility is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("parkingAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool ParkingAvailable { get; set; }

    /// <summary>
    /// Indicates whether disabled access is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("disabledAccess", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool DisabledAccess { get; set; }

    /// <summary>
    /// Indicates whether Shipment Drop Off is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentDropOff", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool ShipmentDropOff { get; set; }

    /// <summary>
    /// Indicates whether Shipment Collection is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentCollection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool ShipmentCollection { get; set; }

    /// <summary>
    /// Indicates whether International Shipping is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("internationalShipping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool InternationalShipping { get; set; }

    /// <summary>
    /// Indicates whether Domestic Shipping is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("domesticShipping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool DomesticShipping { get; set; }

    /// <summary>
    /// Indicates whether Account Shipping is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("accountShippers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool AccountShippers { get; set; }

    /// <summary>
    /// Indicates whether Label Printing is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("labelPrinting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool LabelPrinting { get; set; }

    /// <summary>
    /// Indicates whether Insurance facility is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("insurance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Insurance { get; set; }

    /// <summary>
    /// Indicates whether Import Charges is applicable in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("importCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool ImportCharges { get; set; }

    /// <summary>
    /// Indicates whether Packaging facility is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("packaging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Packaging { get; set; }

    /// <summary>
    /// Indicates whether Receiver Paying option is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("receiverPaid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool ReceiverPaid { get; set; }

    /// <summary>
    /// Indicates whether VISA program is applicable in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("visaProgram", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool VisaProgram { get; set; }

    /// <summary>
    /// Indicates whether pay by cash option is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("payWithCash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool PayWithCash { get; set; }

    /// <summary>
    /// Indicates whether pay with credit card option is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("payWithCreditCard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool PayWithCreditCard { get; set; }

    /// <summary>
    /// Indicates whether pay with cheque option is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("payWithCheque", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool PayWithCheque { get; set; }

    /// <summary>
    /// Indicates whether pay with mobile option is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("payWithMobile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool PayWithMobile { get; set; }

    /// <summary>
    /// Indicates whether pay with paypal option is available in the service point or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("payWithPayPal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool PayWithPayPal { get; set; }

    /// <summary>
    /// Title for the parking icon
    /// </summary>
    [Newtonsoft.Json.JsonProperty("parkingTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ParkingTitle { get; set; }

    /// <summary>
    /// Title for the disable wheel chair icon
    /// </summary>
    [Newtonsoft.Json.JsonProperty("disabledAccessTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisabledAccessTitle { get; set; }

    /// <summary>
    /// Piece Weight Limit
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pieceWeightLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double PieceWeightLimit { get; set; }

    /// <summary>
    /// Enumeration (KG or LB)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pieceWeightLimitUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PieceWeightLimitUnit { get; set; }

    [Newtonsoft.Json.JsonProperty("pieceDimensionsLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Dimensions PieceDimensionsLimit { get; set; }

    /// <summary>
    /// Enumeration (CM or IN)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pieceDimensionsLimitUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PieceDimensionsLimitUnit { get; set; }

    /// <summary>
    /// Number (integer)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pieceCountLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double PieceCountLimit { get; set; }

    /// <summary>
    /// Account prepaid shippers
    /// </summary>
    [Newtonsoft.Json.JsonProperty("accountPrepaidShippers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool AccountPrepaidShippers { get; set; }

    /// <summary>
    /// Prepaid shippers
    /// </summary>
    [Newtonsoft.Json.JsonProperty("prepaidShippers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool PrepaidShippers { get; set; }

    /// <summary>
    /// Pre-printed return label
    /// </summary>
    [Newtonsoft.Json.JsonProperty("prePrintReturnLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool PrePrintReturnLabel { get; set; }

    /// <summary>
    /// Indicates whether this particular service point can handle label free shipments or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("labelFree", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool LabelFree { get; set; }

    /// <summary>
    /// PPC list.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ppcList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> PpcList { get; set; }

    /// <summary>
    /// Obsolete. This is planned to be removed in future releases.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Html { get; set; }

    /// <summary>
    /// PPC codes available for this service point
    /// </summary>
    [Newtonsoft.Json.JsonProperty("capabilityCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CapabilityCodes { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServicePointsRestResponseV3
{
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public RestResponseStatus Status { get; set; }

    /// <summary>
    /// The address used for the search (value of request parameter 'address')
    /// </summary>
    [Newtonsoft.Json.JsonProperty("searchAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SearchAddress { get; set; }

    [Newtonsoft.Json.JsonProperty("searchLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public GeoLocation SearchLocation { get; set; }

    /// <summary>
    /// The culture parameter for Bing Maps API (derived from the country parameter in the request)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mapCulture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MapCulture { get; set; }

    /// <summary>
    /// Map Culture Used for Third party Maps
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mapLanguage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MapLanguage { get; set; }

    /// <summary>
    /// Array of the found Service Points. Each Service Point entity contains details about the service point.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("servicePoints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ServicePoint> ServicePoints { get; set; }

    /// <summary>
    /// Array of strings. Contains information messages  - e.g. required language is not available, result was filtered due to incoming holidays.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Messages { get; set; }

    [Newtonsoft.Json.JsonProperty("translations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Translations Translations { get; set; }

    /// <summary>
    /// Indicates whether lite mode is acitvated or not.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("liteMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool LiteMode { get; set; }

    [Newtonsoft.Json.JsonProperty("promotion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Promotion Promotion { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Information about shipment piece / size
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ShipmentLimitations
{
    [Newtonsoft.Json.JsonProperty("maxNumberOfPieces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ValueUnit MaxNumberOfPieces { get; set; }

    [Newtonsoft.Json.JsonProperty("maxShipmentWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ValueUnit MaxShipmentWeight { get; set; }

    /// <summary>
    /// Obsolete. This is planned to be removed in future releases.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Html { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Shipment Piece Limitations in this Service Point.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ShipmentLimitationsByPiece
{
    [Newtonsoft.Json.JsonProperty("pieceSizeLimit1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ValueUnit PieceSizeLimit1 { get; set; }

    [Newtonsoft.Json.JsonProperty("pieceSizeLimit2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ValueUnit PieceSizeLimit2 { get; set; }

    [Newtonsoft.Json.JsonProperty("pieceSizeLimit3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ValueUnit PieceSizeLimit3 { get; set; }

    [Newtonsoft.Json.JsonProperty("maxPieceWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ValueUnit MaxPieceWeight { get; set; }

    /// <summary>
    /// Obsolete. This is planned to be removed in future releases.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Html { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Suggestion for the search address
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Suggestion
{
    /// <summary>
    /// Always holds null value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Label { get; set; }

    /// <summary>
    /// Always holds null value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    /// <summary>
    /// Latitude of the geocoded search address (used for GREF web service search)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Latitude { get; set; }

    /// <summary>
    /// Longitude of the geocoded search address (used for GREF web service search)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Longitude { get; set; }

    /// <summary>
    /// Country code of the search address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountryCode { get; set; }

    /// <summary>
    /// Place id of the search address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("placeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PlaceId { get; set; }

    /// <summary>
    /// Provider id of the search address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("providerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProviderId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Translations
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Translations
{
    /// <summary>
    /// key value pairs representing the translations
    /// </summary>
    [Newtonsoft.Json.JsonProperty("map", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.IDictionary<string, string> Map { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// Max. weight per piece
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ValueUnit
{
    /// <summary>
    /// Value in BigDecimal
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Value { get; set; }

    /// <summary>
    /// UOM
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Uom { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ExceptionResponse
{
    [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Message { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

    [Newtonsoft.Json.JsonProperty("exception", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Exception { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

/// <summary>
/// MyDHL API REST DeliveryOption response JSON Schema
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SupermodelIoLogisticsExpressDeliveryOptionsResponse
{
    /// <summary>
    /// Contains available deliveryOptions for the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deliveryOptions", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(99)]
    public System.Collections.Generic.ICollection<DeliveryOptions> DeliveryOptions { get; set; } = new System.Collections.ObjectModel.Collection<DeliveryOptions>();

    [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Warnings { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Type
{

    [System.Runtime.Serialization.EnumMember(Value = @"SID")]
    SID = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"PID")]
    PID = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ASID3")]
    ASID3 = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"ASID6")]
    ASID6 = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ASID12")]
    ASID12 = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"ASID24")]
    ASID24 = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"HUID")]
    HUID = 6,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Type2
{

    [System.Runtime.Serialization.EnumMember(Value = @"pickup")]
    Pickup = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"delivery")]
    Delivery = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum UnitOfMeasurement
{

    [System.Runtime.Serialization.EnumMember(Value = @"metric")]
    Metric = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"imperial")]
    Imperial = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum EstimatedDeliveryDateType
{

    [System.Runtime.Serialization.EnumMember(Value = @"QDDC")]
    QDDC = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"QDDF")]
    QDDF = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum TrackingView
{

    [System.Runtime.Serialization.EnumMember(Value = @"all-checkpoints")]
    AllCheckpoints = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"all-checkpoints-with-remarks")]
    AllCheckpointsWithRemarks = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"last-checkpoint")]
    LastCheckpoint = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"shipment-details-only")]
    ShipmentDetailsOnly = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"advance-shipment")]
    AdvanceShipment = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"bbx-children")]
    BbxChildren = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum LevelOfDetail
{

    [System.Runtime.Serialization.EnumMember(Value = @"shipment")]
    Shipment = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"piece")]
    Piece = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"all")]
    All = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Content
{

    [System.Runtime.Serialization.EnumMember(Value = @"epod-detail")]
    EpodDetail = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"epod-summary")]
    EpodSummary = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"epod-detail-esig")]
    EpodDetailEsig = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"epod-summary-esig")]
    EpodSummaryEsig = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"epod-table")]
    EpodTable = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"epod-table-detail")]
    EpodTableDetail = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"epod-table-esig")]
    EpodTableEsig = 6,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"waybill")]
    Waybill = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"commercial-invoice")]
    CommercialInvoice = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"customs-entry")]
    CustomsEntry = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"transport-accompanying-document")]
    TransportAccompanyingDocument = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"generic-entry-summary")]
    GenericEntrySummary = 4,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum EncodingFormat
{

    [System.Runtime.Serialization.EnumMember(Value = @"pdf")]
    Pdf = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"tiff")]
    Tiff = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Anonymous
{

    [System.Runtime.Serialization.EnumMember(Value = @"1")]
    _1 = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"2")]
    _2 = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"3")]
    _3 = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"4")]
    _4 = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"5")]
    _5 = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"6")]
    _6 = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"0")]
    _0 = 6,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Anonymous2
{

    [System.Runtime.Serialization.EnumMember(Value = @"kg")]
    Kg = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"lb")]
    Lb = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Anonymous3
{

    [System.Runtime.Serialization.EnumMember(Value = @"cm")]
    Cm = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"in")]
    In = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Anonymous4
{

    [System.Runtime.Serialization.EnumMember(Value = @"km")]
    Km = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"mi")]
    Mi = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Anonymous5
{

    [System.Runtime.Serialization.EnumMember(Value = @"CTY")]
    CTY = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"STN")]
    STN = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"PRT")]
    PRT = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"247")]
    _247 = 3,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Anonymous6
{

    [System.Runtime.Serialization.EnumMember(Value = @"y")]
    Y = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"n")]
    N = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Anonymous7
{

    [System.Runtime.Serialization.EnumMember(Value = @"y")]
    Y = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"n")]
    N = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Anonymous8
{

    [System.Runtime.Serialization.EnumMember(Value = @"true")]
    True = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"false")]
    False = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Anonymous9
{

    [System.Runtime.Serialization.EnumMember(Value = @"y")]
    Y = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"n")]
    N = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Anonymous10
{

    [System.Runtime.Serialization.EnumMember(Value = @"true")]
    True = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"false")]
    False = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Anonymous11
{

    [System.Runtime.Serialization.EnumMember(Value = @"A")]
    A = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"S")]
    S = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"U")]
    U = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"X")]
    X = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"Y")]
    Y = 4,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum DatasetName
{

    [System.Runtime.Serialization.EnumMember(Value = @"country")]
    Country = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"countryPostalcodeFormat")]
    CountryPostalcodeFormat = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"dangerousGoods")]
    DangerousGoods = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"incoterm")]
    Incoterm = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"productCode")]
    ProductCode = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"serviceCode")]
    ServiceCode = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"packageTypeCode")]
    PackageTypeCode = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"documentTypeCode")]
    DocumentTypeCode = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"customerShipmentReferenceType")]
    CustomerShipmentReferenceType = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"customerPackageReferenceType")]
    CustomerPackageReferenceType = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"invoiceReferenceType")]
    InvoiceReferenceType = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"invoiceItemReferenceType")]
    InvoiceItemReferenceType = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"registrationNumberTypeCode")]
    RegistrationNumberTypeCode = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"commodityCategory")]
    CommodityCategory = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"returnStatusMessage")]
    ReturnStatusMessage = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"trackingEventCode")]
    TrackingEventCode = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"unitOfMeasurement")]
    UnitOfMeasurement = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"languageCode")]
    LanguageCode = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"all")]
    All = 18,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ComparisonOperator
{

    [System.Runtime.Serialization.EnumMember(Value = @"equal")]
    Equal = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"notEqual")]
    NotEqual = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"contains")]
    Contains = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressAccountTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"shipper")]
    Shipper = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"payer")]
    Payer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"duties-taxes")]
    DutiesTaxes = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Address2
{
    [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string CountryCode { get; set; }

    [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string PostalCode { get; set; }

    [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CityName { get; set; }

    /// <summary>
    /// Please enter your suburb or county name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountyName { get; set; }

    [Newtonsoft.Json.JsonProperty("serviceArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ServiceArea ServiceArea { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Anonymous12
{
    /// <summary>
    /// To be mapped in commercial Invoice - Russia Bank Name field
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(60)]
    public string Name { get; set; }

    /// <summary>
    /// To be mapped in commercial Invoice - Russia Bank Settlement Account Number in RUR field
    /// </summary>
    [Newtonsoft.Json.JsonProperty("settlementLocalCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SettlementLocalCurrency { get; set; }

    /// <summary>
    /// To be mapped in commercial Invoice - Russia Bank Settlement Account Number in RUR field
    /// </summary>
    [Newtonsoft.Json.JsonProperty("settlementForeignCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SettlementForeignCurrency { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Pickup
{
    /// <summary>
    /// Please advise if a pickup is needed for this shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isRequested", Required = Newtonsoft.Json.Required.Always)]
    public bool IsRequested { get; set; } = false;

    /// <summary>
    /// The latest time the location premises is available to dispatch the DHL Express shipment. (HH:MM) 
    /// </summary>
    [Newtonsoft.Json.JsonProperty("closeTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(5)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-1][0-9]|2[0-3]):([0-5][0-9])")]
    public string CloseTime { get; set; }

    /// <summary>
    /// Provides information on where the package should be picked up by DHL courier.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(80)]
    public string Location { get; set; }

    /// <summary>
    /// Details special pickup instructions you may wish to send to the DHL Courier.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("specialInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public System.Collections.Generic.ICollection<SpecialInstructions3> SpecialInstructions { get; set; }

    /// <summary>
    /// Please enter address and contact details related to your pickup
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PickupDetails PickupDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details of the individual requesting the pickup
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupRequestorDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PickupRequestorDetails PickupRequestorDetails { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class OutputImageProperties
{
    /// <summary>
    /// Printer DPI Resolution for X-axis and Y-axis (in DPI) for transport label and waybill document output
    /// </summary>
    [Newtonsoft.Json.JsonProperty("printerDPI", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PrinterDPI PrinterDPI { get; set; }

    /// <summary>
    /// Customer barcodes to be printed on supported transport label templates
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customerBarcodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public System.Collections.Generic.ICollection<CustomerBarcodes> CustomerBarcodes { get; set; }

    /// <summary>
    /// Customer Logo Image to be printed on transport label
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customerLogos", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public System.Collections.Generic.ICollection<CustomerLogos> CustomerLogos { get; set; }

    /// <summary>
    /// Please provide the format of the output documents. Note that invoice and shipment receipt will always come back as PDF
    /// </summary>
    [Newtonsoft.Json.JsonProperty("encodingFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public OutputImagePropertiesEncodingFormat EncodingFormat { get; set; } = OutputImagePropertiesEncodingFormat.Pdf;

    /// <summary>
    /// Here the image options are defined for label, waybillDoc, invoice, QRcode and shipment receipt
    /// </summary>
    [Newtonsoft.Json.JsonProperty("imageOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(20)]
    public System.Collections.Generic.ICollection<ImageOptions> ImageOptions { get; set; }

    /// <summary>
    /// When set to true it will generate a single PDF or thermal output file for the Transport Label, a single PDF or thermal output file for the Waybill document and a single PDF file consisting of Commercial Invoice and Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label and single PDF or thermal output image file for Waybill Document will be returned in create shipment response.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("splitTransportAndWaybillDocLabels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool SplitTransportAndWaybillDocLabels { get; set; }

    /// <summary>
    /// When set to true it will generate a single PDF or thermal output image file consists of Transport Label, Waybill Document, Shipment Receipt and Commercial Invoice.&lt;BR&gt;          The default value is false, where a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF or thermal output image file for Shipment Receipt and Customs Invoice will be returned.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("allDocumentsInOneImage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool AllDocumentsInOneImage { get; set; }

    /// <summary>
    /// When set to true it will generate a single PDF or thermal output image file for each page for the Transport Label and single PDF or thermal output image file for Waybill Document will be returned in the create shipment response. The default value is false, a single PDF or thermal output image file for each page for Transport Label and single PDF or thermal output image file for Waybill Document will be returned in create shipment response.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("splitDocumentsByPages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool SplitDocumentsByPages { get; set; }

    /// <summary>
    /// When set to true it will generate a single PDF or thermal output image file consisting of Transport Label + Waybill Document, a single file consist of Commercial Invoice and a single file consist of Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF or thermal output image file for Shipment Receipt and Customs Invoice will be returned in create shipment response.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("splitInvoiceAndReceipt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool SplitInvoiceAndReceipt { get; set; }

    /// <summary>
    /// When set to true it will generate a single PDF file consisting of Transport Label, Waybill Document and Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF file for Shipment Receipt will be returned in create shipment response.  Applicable only when #/outputImageProperties/imageOptions/0/typeCode is 'receipt' and #/outputImageProperties/encodingFormat is PDF.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("receiptAndLabelsInOneImage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool ReceiptAndLabelsInOneImage { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomerDetails
{
    /// <summary>
    /// Please enter address and contact details related to shipper
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipperDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ShipperDetails ShipperDetails { get; set; } = new ShipperDetails();

    /// <summary>
    /// Please enter address and contact details related to receiver
    /// </summary>
    [Newtonsoft.Json.JsonProperty("receiverDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ReceiverDetails ReceiverDetails { get; set; } = new ReceiverDetails();

    /// <summary>
    /// Please enter address and contact details related to buyer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("buyerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BuyerDetails BuyerDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to importer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("importerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ImporterDetails ImporterDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to exporter
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exporterDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ExporterDetails ExporterDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to seller
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sellerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SellerDetails SellerDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to payer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("payerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PayerDetails PayerDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to manufacturer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("manufacturerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ManufacturerDetails ManufacturerDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to ultimate consignee
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ultimateConsigneeDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public UltimateConsigneeDetails UltimateConsigneeDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to broker
    /// </summary>
    [Newtonsoft.Json.JsonProperty("brokerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BrokerDetails BrokerDetails { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Content2
{
    /// <summary>
    /// Here you can define properties per package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressPackage> Packages { get; set; } = new System.Collections.ObjectModel.Collection<SupermodelIoLogisticsExpressPackage>();

    /// <summary>
    /// For customs purposes please advise if your shipment is dutiable (true) or non dutiable (false).Note:If the shipment is dutiable, exportDeclaration element must be provided.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isCustomsDeclarable", Required = Newtonsoft.Json.Required.Always)]
    public bool IsCustomsDeclarable { get; set; }

    /// <summary>
    /// For customs purposes please advise on declared value of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("declaredValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double DeclaredValue { get; set; }

    /// <summary>
    /// For customs purposes please advise on declared value currency code of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("declaredValueCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string DeclaredValueCurrency { get; set; }

    /// <summary>
    /// Here you can find all details related to export declaration
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exportDeclaration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ExportDeclaration ExportDeclaration { get; set; }

    /// <summary>
    /// Please enter description of your shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^[^\s]")]
    public string Description { get; set; }

    /// <summary>
    /// This is used for the US AES4, FTR and ITN numbers to be printed on the Transport Label
    /// </summary>
    [Newtonsoft.Json.JsonProperty("USFilingTypeValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
    public string USFilingTypeValue { get; set; }

    /// <summary>
    /// The Incoterms rules are a globally-recognized set of standards, used worldwide in international and domestic contracts for the delivery of goods, illustrating responsibilities between buyer and seller for costs and risk, as well as cargo insurance.&lt;BR&gt;          EXW ExWorks&lt;BR&gt;          FCA Free Carrier&lt;BR&gt;          CPT Carriage Paid To&lt;BR&gt;          CIP Carriage and Insurance Paid To&lt;BR&gt;          DPU Delivered at Place Unloaded&lt;BR&gt;          DAP Delivered at Place&lt;BR&gt;          DDP Delivered Duty Paid&lt;BR&gt;          FAS Free Alongside Ship&lt;BR&gt;          FOB Free on Board&lt;BR&gt;          CFR Cost and Freight&lt;BR&gt;          CIF Cost, Insurance and Freight&lt;BR&gt;          DAF Delivered at Frontier&lt;BR&gt;          DAT Delivered at Terminal&lt;BR&gt;          DDU Delivered Duty Unpaid&lt;BR&gt;          DEQ Delivery ex Quay&lt;BR&gt;          DES Delivered ex Ship
    /// </summary>
    [Newtonsoft.Json.JsonProperty("incoterm", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Content2Incoterm Incoterm { get; set; }

    /// <summary>
    /// Please enter Unit of measurement - metric,imperial
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unitOfMeasurement", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Content2UnitOfMeasurement UnitOfMeasurement { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class OnDemandDelivery : object
{
    /// <summary>
    /// Please choose from one of the delivery options
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deliveryOption", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public OnDemandDeliveryDeliveryOption DeliveryOption { get; set; }

    /// <summary>
    /// If delivery option is signatureDelivery please specify location where to leave the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(15, MinimumLength = 1)]
    public string Location { get; set; }

    /// <summary>
    /// Please enter additional information that might be useful for the DHL Express courier. This field is conditionally mandatory if selected location is 'Other'.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("specialInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(110, MinimumLength = 1)]
    public string SpecialInstructions { get; set; }

    /// <summary>
    /// Please provide entry code to gain access to an apartment complex or gate
    /// </summary>
    [Newtonsoft.Json.JsonProperty("gateCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
    public string GateCode { get; set; }

    /// <summary>
    /// In ase your deliveryOption is 'neighbour' please specify where to leave the package 
    /// </summary>
    [Newtonsoft.Json.JsonProperty("whereToLeave", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public OnDemandDeliveryWhereToLeave WhereToLeave { get; set; }

    /// <summary>
    /// In case you wish to leave the package with neighbour please provide the neighbour's name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("neighbourName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
    public string NeighbourName { get; set; }

    /// <summary>
    /// In case you wish to leave the package with neighbour please provide the neighbour's house number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("neighbourHouseNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
    public string NeighbourHouseNumber { get; set; }

    /// <summary>
    /// In case your delivery option is 'signatureRelease' please provide name of the person who is authorized to sign and receive the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("authorizerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
    public string AuthorizerName { get; set; }

    /// <summary>
    /// In case your delivery option is 'servicepoint' please provide unique DHL Express Service point location ID of where the parcel should be delieverd (please contact your local DHL Express Account Manager to obtain the list of the servicepoint IDs)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("servicePointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 1)]
    public string ServicePointId { get; set; }

    /// <summary>
    /// for future use
    /// </summary>
    [Newtonsoft.Json.JsonProperty("requestedDeliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(29, MinimumLength = 1)]
    public string RequestedDeliveryDate { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ShipmentNotification
{
    /// <summary>
    /// Please enter channel type to send the notification by. At this moment only email is supported
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ShipmentNotificationTypeCode TypeCode { get; set; }

    /// <summary>
    /// Please enter notification receiver email address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("receiverId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
    public string ReceiverId { get; set; }

    /// <summary>
    /// Please enter three letter lanuage code in which you wish to receive the notification in
    /// </summary>
    [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string LanguageCode { get; set; } = "eng";

    /// <summary>
    /// Please enter two letter language country code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("languageCountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
    public string LanguageCountryCode { get; set; } = "UK";

    /// <summary>
    /// Please enter your message which will be added to the DHL Express notification email
    /// </summary>
    [Newtonsoft.Json.JsonProperty("bespokeMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(250)]
    public string BespokeMessage { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PrepaidCharges
{
    /// <summary>
    /// Please enter type of prepaid charge. At this moment only freight is supported
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PrepaidChargesTypeCode TypeCode { get; set; }

    /// <summary>
    /// Please enter currency for the value you have entered into value field
    /// </summary>
    [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string Currency { get; set; }

    /// <summary>
    /// Please enter nominal value related to the charge
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0.01D, 9999999999D)]
    public double Value { get; set; }

    /// <summary>
    /// Please enter method you have used to pay the charges. At this moment only cash is supported
    /// </summary>
    [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PrepaidChargesMethod Method { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class EstimatedDeliveryDate
{
    /// <summary>
    /// Please indicate if requesting to get EDD for this shipment.
    /// <br/> Estimated Delivery Date Type. QDDF: is the fastest transit time as quoted to the customer at booking or shipment creation. When clearance or any other non-transport operational component is expected to impact transit time, QDDF does not constitute DHL's service commitment. QDDC: cconstitutes DHL's service commitment as quoted at booking or shipment creation. QDDC builds in clearance time, and potentially other special operational non-transport component(s), when relevant.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isRequested", Required = Newtonsoft.Json.Required.Always)]
    public bool IsRequested { get; set; } = false;

    /// <summary>
    /// Please indicate the EDD type being requested
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(4)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public EstimatedDeliveryDateTypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class GetAdditionalInformation
{
    /// <summary>
    /// Provide type code of data that can be returned in response.  Values can be pickupDetails, optionalShipmentData, transliterateResponse and linkLabelsByPieces (link label image generated for each package level)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public GetAdditionalInformationTypeCode TypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("isRequested", Required = Newtonsoft.Json.Required.Always)]
    public bool IsRequested { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ParentShipment
{
    /// <summary>
    /// Please provide the parent (mother) Product Code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength = 1)]
    public string ProductCode { get; set; }

    /// <summary>
    /// Please provide the parent (mother) shipment's Number of Packages
    /// </summary>
    [Newtonsoft.Json.JsonProperty("packagesCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
    public double PackagesCount { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Packages
{
    /// <summary>
    /// Piece serial number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, 999D)]
    public double ReferenceNumber { get; set; }

    /// <summary>
    /// Here is provided each piece its Identification number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string TrackingNumber { get; set; }

    /// <summary>
    /// You can use ths URL to track your shipment by Piece Identification Number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("trackingUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TrackingUrl { get; set; }

    /// <summary>
    /// Here is provided each piece volumetric/ dimensional weight
    /// </summary>
    [Newtonsoft.Json.JsonProperty("volumetricWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double VolumetricWeight { get; set; }

    /// <summary>
    /// Here you can find all documents created for the piece's QRcode
    /// </summary>
    [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Documents4> Documents { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Documents
{
    /// <summary>
    /// Identifie image format the document is created in, like PDF, JPG etc.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("imageFormat", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ImageFormat { get; set; }

    /// <summary>
    /// Contains base64 encoded document image
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Content { get; set; }

    /// <summary>
    /// Identifie type of the document, like invoice, proforma, label or receipt
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string TypeCode { get; set; }

    /// <summary>
    /// Package reference number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("packageReferenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, 999D)]
    public double PackageReferenceNumber { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ShipmentDetails
{
    /// <summary>
    /// This array contains all the DHL Express special handling feature codes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceHandlingFeatureCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> ServiceHandlingFeatureCodes { get; set; }

    /// <summary>
    /// Here you can find calculated volumetric weight based on dimensions provided in the request
    /// </summary>
    [Newtonsoft.Json.JsonProperty("volumetricWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(double.MinValue, 999999999999D)]
    public double VolumetricWeight { get; set; }

    /// <summary>
    /// Here you can find billing code which was applied on your shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("billingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string BillingCode { get; set; }

    /// <summary>
    /// Here you can find the DHL Express shipment content code of your shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceContentCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceContentCode { get; set; }

    /// <summary>
    /// Here you need to define all the parties needed to ship the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CustomerDetails8 CustomerDetails { get; set; }

    [Newtonsoft.Json.JsonProperty("originServiceArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public OriginServiceArea OriginServiceArea { get; set; }

    [Newtonsoft.Json.JsonProperty("destinationServiceArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DestinationServiceArea DestinationServiceArea { get; set; }

    /// <summary>
    /// Here you can find DHL Routing Code which was applied on your shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dhlRoutingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DhlRoutingCode { get; set; }

    /// <summary>
    /// Here you can find DHL Routing Data ID which was applied on your shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dhlRoutingDataId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DhlRoutingDataId { get; set; }

    /// <summary>
    /// Here you can find Delivery Date Code which was applied on your shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deliveryDateCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DeliveryDateCode { get; set; }

    /// <summary>
    /// Here you can find Delivery Time Code which was applied on your shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deliveryTimeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DeliveryTimeCode { get; set; }

    /// <summary>
    /// Here you can find the product short name of your shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productShortName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProductShortName { get; set; }

    [Newtonsoft.Json.JsonProperty("valueAddedServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(99)]
    public System.Collections.Generic.ICollection<ValueAddedServices> ValueAddedServices { get; set; }

    /// <summary>
    /// Here you can find pickup details
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PickupDetails2 PickupDetails { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ShipmentCharges
{
    /// <summary>
    /// Possible Values :&lt;BR&gt;            - 'BILLC', billing currency&lt;BR&gt;            - 'PULCL', country public rates currency&lt;BR&gt;            - 'BASEC', base currency
    /// </summary>
    [Newtonsoft.Json.JsonProperty("currencyType", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string CurrencyType { get; set; }

    /// <summary>
    /// This the currency of the rated shipment for the prices listed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("priceCurrency", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string PriceCurrency { get; set; }

    /// <summary>
    /// The amount price of DHL product and services
    /// </summary>
    [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
    public double Price { get; set; }

    [Newtonsoft.Json.JsonProperty("serviceBreakdown", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ServiceBreakdown> ServiceBreakdown { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class BarcodeInfo
{
    /// <summary>
    /// Barcode base64 encoded airwaybill number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentIdentificationNumberBarcodeContent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShipmentIdentificationNumberBarcodeContent { get; set; }

    /// <summary>
    /// Barcode base64 image of origin service area code, destination service area code and global product code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("originDestinationServiceTypeBarcodeContent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OriginDestinationServiceTypeBarcodeContent { get; set; }

    /// <summary>
    /// Barcode base64 image of DHL routing code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("routingBarcodeContent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string RoutingBarcodeContent { get; set; }

    /// <summary>
    /// Here you can find barcode details for each piece
    /// </summary>
    [Newtonsoft.Json.JsonProperty("trackingNumberBarcodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<TrackingNumberBarcodes> TrackingNumberBarcodes { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class EstimatedDeliveryDate2
{
    [Newtonsoft.Json.JsonProperty("estimatedDeliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EstimatedDeliveryDate { get; set; }

    /// <summary>
    /// EDD type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("estimatedDeliveryType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EstimatedDeliveryType { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Documents2
{
    /// <summary>
    /// Shipment Tracking Number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentTrackingNumber", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ShipmentTrackingNumber { get; set; }

    /// <summary>
    /// Identifies type of the document like commercial invoice, waybill, customs entry, transport accompanying document, generic entry summary or archived zip documents
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string TypeCode { get; set; }

    /// <summary>
    /// Clearance code or document function whether for import, export or both.  Returned only for customs-entry
    /// </summary>
    [Newtonsoft.Json.JsonProperty("function", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Documents2Function Function { get; set; }

    /// <summary>
    /// Identifies image format the document is created in, like PDF, TIFF, or ZIP
    /// </summary>
    [Newtonsoft.Json.JsonProperty("encodingFormat", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string EncodingFormat { get; set; }

    /// <summary>
    /// Contains base64 encoded document image or archived zip
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Content { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Anonymous13
{
    /// <summary>
    /// Please provide correct document type you wish to upload&lt;BR&gt;        &lt;BR&gt;        Possible values;&lt;BR&gt;        INV, Invoice&lt;BR&gt;        PNV, Proforma&lt;BR&gt;        COO, Certificate of Origin&lt;BR&gt;        NAF, Nafta Certificate of Origin&lt;BR&gt;        CIN, Commercial Invoice&lt;BR&gt;        DCL, Custom Declaration&lt;BR&gt;        AWB, Air Waybill and Waybill Document
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public TypeCode2 TypeCode { get; set; } = TypeCode2.INV;

    /// <summary>
    /// Please provide the image file format for the document you want to upload
    /// </summary>
    [Newtonsoft.Json.JsonProperty("imageFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ImageFormat ImageFormat { get; set; } = ImageFormat.PDF;

    /// <summary>
    /// Please provide the base64 encoded document
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Content { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class LineItems
{
    /// <summary>
    /// Please provide line item number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1, 1000)]
    public int Number { get; set; }

    /// <summary>
    /// Please provide description of the line item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(512)]
    public string Description { get; set; }

    /// <summary>
    /// Please provide unit or article price line item value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double Price { get; set; }

    /// <summary>
    /// Please enter information about quantity for this line item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Quantity Quantity { get; set; } = new Quantity();

    /// <summary>
    /// Please provide Commodity codes for the shipment at item line level
    /// </summary>
    [Newtonsoft.Json.JsonProperty("commodityCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(2)]
    public System.Collections.Generic.ICollection<CommodityCodes> CommodityCodes { get; set; }

    /// <summary>
    /// Please provide the reason for export
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exportReasonType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public LineItemsExportReasonType ExportReasonType { get; set; }

    /// <summary>
    /// Please enter two letter ISO manufacturer country code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("manufacturerCountry", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
    public string ManufacturerCountry { get; set; }

    /// <summary>
    /// Please enter the weight information for line item.  Either a netValue or grossValue must be provided for the line item.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Weight Weight { get; set; } = new Weight();

    /// <summary>
    /// Please provide if the Taxes is paid for the line item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isTaxesPaid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsTaxesPaid { get; set; }

    /// <summary>
    /// Please provide the Customer References for the line item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customerReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(100)]
    public System.Collections.Generic.ICollection<CustomerReferences> CustomerReferences { get; set; }

    /// <summary>
    /// Please provide the customs documents details
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customsDocuments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<CustomsDocuments2> CustomsDocuments { get; set; }

    /// <summary>
    /// Please provide monetary value of the line item x quantity
    /// </summary>
    [Newtonsoft.Json.JsonProperty("preCalculatedLineItemTotalValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double PreCalculatedLineItemTotalValue { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Invoice
{
    /// <summary>
    /// Please enter commercial invoice number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string Number { get; set; }

    /// <summary>
    /// Please enter commercial invoice date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$")]
    public string Date { get; set; }

    /// <summary>
    /// Please provide the purpose was the document details captured and are planned to be used. Note: export and import is only applicable for approve Sale In Transit customers
    /// </summary>
    [Newtonsoft.Json.JsonProperty("function", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public InvoiceFunction Function { get; set; }

    /// <summary>
    /// Please provide the customer references at invoice level.  Note: customerReference/0/value with typeCode 'CU' is mandatory if using POST method and no shipmentTrackingNumber is provided in request. It is recommended to provide less than 20 customer references of 'MRN' type code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customerReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(100)]
    public System.Collections.Generic.ICollection<CustomerReferences2> CustomerReferences { get; set; }

    /// <summary>
    /// Please provide Perfect Invoice related information
    /// </summary>
    [Newtonsoft.Json.JsonProperty("indicativeCustomsValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public IndicativeCustomsValues IndicativeCustomsValues { get; set; }

    /// <summary>
    /// Please provide pre-calculated total values for total goods value and total invoice value.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("preCalculatedTotalValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PreCalculatedTotalValues PreCalculatedTotalValues { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Remarks
{
    /// <summary>
    /// Please enter remark text
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(500)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class AdditionalCharges
{
    /// <summary>
    /// Please provide the charge value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0.001D, 999999999999999D)]
    public double Value { get; set; }

    /// <summary>
    /// Please enter charge type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AdditionalChargesTypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Exporter
{
    /// <summary>
    /// Please provide exporter Id
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    /// <summary>
    /// Please provide exporter code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressExportDeclarationExportReasonType
{

    [System.Runtime.Serialization.EnumMember(Value = @"permanent")]
    Permanent = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"temporary")]
    Temporary = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"return")]
    Return = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"used_exhibition_goods_to_origin")]
    Used_exhibition_goods_to_origin = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"intercompany_use")]
    Intercompany_use = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"commercial_purpose_or_sale")]
    Commercial_purpose_or_sale = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"personal_belongings_or_personal_use")]
    Personal_belongings_or_personal_use = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"sample")]
    Sample = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"gift")]
    Gift = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"return_to_origin")]
    Return_to_origin = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"warranty_replacement")]
    Warranty_replacement = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"diplomatic_goods")]
    Diplomatic_goods = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"defence_material")]
    Defence_material = 12,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressExportDeclarationShipmentType
{

    [System.Runtime.Serialization.EnumMember(Value = @"personal")]
    Personal = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"commercial")]
    Commercial = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomsDocuments
{
    /// <summary>
    /// Please provide the Customs Document type code at invoice level. Please refer to the YAML Reference Data Guide PDF file for valid enumeration values.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CustomsDocumentsTypeCode TypeCode { get; set; }

    /// <summary>
    /// Please provide the Customs Document ID at invoice level
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressExportDeclarationIncoterm
{

    [System.Runtime.Serialization.EnumMember(Value = @"EXW")]
    EXW = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"FCA")]
    FCA = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CPT")]
    CPT = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"CIP")]
    CIP = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"DPU")]
    DPU = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"DAP")]
    DAP = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"DDP")]
    DDP = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"FAS")]
    FAS = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"FOB")]
    FOB = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"CFR")]
    CFR = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"CIF")]
    CIF = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"DAF")]
    DAF = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"DAT")]
    DAT = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"DDU")]
    DDU = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"DEQ")]
    DEQ = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"DES")]
    DES = 15,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressIdentifierTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"parentId")]
    ParentId = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"shipmentId")]
    ShipmentId = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"pieceId")]
    PieceId = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Identifiers
{
    /// <summary>
    /// Type of identifier
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string TypeCode { get; set; }

    /// <summary>
    /// List of identifers
    /// </summary>
    [Newtonsoft.Json.JsonProperty("list", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    public System.Collections.Generic.ICollection<string> List { get; set; } = new System.Collections.ObjectModel.Collection<string>();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomerDetails2
{
    [Newtonsoft.Json.JsonProperty("shipperDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressRatesRequest ShipperDetails { get; set; } = new SupermodelIoLogisticsExpressAddressRatesRequest();

    [Newtonsoft.Json.JsonProperty("receiverDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressRatesRequest ReceiverDetails { get; set; } = new SupermodelIoLogisticsExpressAddressRatesRequest();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressLandedCostRequestUnitOfMeasurement
{

    [System.Runtime.Serialization.EnumMember(Value = @"metric")]
    Metric = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"imperial")]
    Imperial = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Charges
{
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ChargesTypeCode TypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(double.MinValue, 999999999999999D)]
    public double Amount { get; set; }

    [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string CurrencyCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressLandedCostRequestShipmentPurpose
{

    [System.Runtime.Serialization.EnumMember(Value = @"commercial")]
    Commercial = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"personal")]
    Personal = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressLandedCostRequestTransportationMode
{

    [System.Runtime.Serialization.EnumMember(Value = @"air")]
    Air = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"ocean")]
    Ocean = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ground")]
    Ground = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressLandedCostRequestMerchantSelectedCarrierName
{

    [System.Runtime.Serialization.EnumMember(Value = @"DHL")]
    DHL = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"UPS")]
    UPS = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"FEDEX")]
    FEDEX = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"TNT")]
    TNT = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"POST")]
    POST = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"OTHERS")]
    OTHERS = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Items
{
    /// <summary>
    /// Line item number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1D, 1000D)]
    public double Number { get; set; }

    /// <summary>
    /// Name of the item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
    public string Name { get; set; }

    /// <summary>
    /// Item full description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
    public string Description { get; set; }

    /// <summary>
    /// ISO Country code of the goods manufacturer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("manufacturerCountry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
    public string ManufacturerCountry { get; set; }

    /// <summary>
    /// SKU number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("partNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string PartNumber { get; set; }

    /// <summary>
    /// Total quantity of the item(s) to be shipped.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(double.MinValue, 999999999999D)]
    public double Quantity { get; set; }

    /// <summary>
    /// Please provide quantitiy type. prt - part, box - box
    /// </summary>
    [Newtonsoft.Json.JsonProperty("quantityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 2)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ItemsQuantityType QuantityType { get; set; }

    /// <summary>
    /// Product Unit price
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(double.MinValue, 999999999999999D)]
    public double UnitPrice { get; set; }

    /// <summary>
    /// Currency code of the Unit Price
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unitPriceCurrencyCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string UnitPriceCurrencyCode { get; set; }

    /// <summary>
    /// not used
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customsValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(double.MinValue, 999999999999999D)]
    public double CustomsValue { get; set; }

    /// <summary>
    /// not used
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customsValueCurrencyCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string CustomsValueCurrencyCode { get; set; }

    /// <summary>
    /// commodityCode is mandatory if estimatedTariffRateType ('derived_rate' or 'highest_rate' or 'lowest_rate' or 'center_rate') not provided in the request otherwise it is considered as Optional.&lt;BR&gt;                              'highest_rate' or 'lowest_rate' or 'center_rate') not provided in the request otherwise it is considered as Optional.&lt;BR&gt;            Can be provided with or without dots
    /// </summary>
    [Newtonsoft.Json.JsonProperty("commodityCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(18)]
    public string CommodityCode { get; set; }

    /// <summary>
    /// Weight of the item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(double.MinValue, 999999999999D)]
    public double Weight { get; set; }

    /// <summary>
    /// Unit of measurement
    /// </summary>
    [Newtonsoft.Json.JsonProperty("weightUnitOfMeasurement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ItemsWeightUnitOfMeasurement WeightUnitOfMeasurement { get; set; }

    /// <summary>
    /// commodityCode category can be retrieved via referenceData API/ commodityCategory dataset.&lt;BR&gt;
    /// <br/>Category code of the Item.&lt;BR&gt;            101 - Coats &amp; Jacket&lt;BR&gt;            102 - Blazers&lt;BR&gt;            103 - Suits&lt;BR&gt;            104 - Ensembles&lt;BR&gt;            105 - Trousers&lt;BR&gt;            106 - Shirts &amp; Blouses&lt;BR&gt;            107 - Dresses&lt;BR&gt;            108 - Skirts&lt;BR&gt;            109 - Jerseys, Sweatshirts &amp; Pullovers&lt;BR&gt;            110 - Sports &amp; Swimwear&lt;BR&gt;            111 - Night &amp; Underwear&lt;BR&gt;            112 - T-Shirts&lt;BR&gt;            113 - Tights &amp; Leggings&lt;BR&gt;            114 - Socks &lt;BR&gt;            115 - Baby Clothes&lt;BR&gt;            116 - Clothing Accessories&lt;BR&gt;            201 - Sneakers&lt;BR&gt;            202 - Athletic Footwear&lt;BR&gt;            203 - Leather Footwear&lt;BR&gt;            204 - Textile &amp; Other Footwear&lt;BR&gt;            301 - Spectacle Lenses&lt;BR&gt;            302 - Sunglasses&lt;BR&gt;            303 - Eyewear Frames&lt;BR&gt;            304 - Contact Lenses&lt;BR&gt;            401 - Watches&lt;BR&gt;            402 - Jewelry&lt;BR&gt;            403 - Suitcases &amp; Briefcases&lt;BR&gt;            404 - Handbags&lt;BR&gt;            405 - Wallets &amp; Little Cases&lt;BR&gt;            406 - Bags &amp; Containers&lt;BR&gt;            501 - Beer&lt;BR&gt;            502 - Spirits&lt;BR&gt;            503 - Wine&lt;BR&gt;            504 - Cider, Perry &amp; Rice Wine&lt;BR&gt;            601 - Bottled Water&lt;BR&gt;            602 - Soft Drinks&lt;BR&gt;            603 - Juices&lt;BR&gt;            604 - Coffee&lt;BR&gt;            605 - Tea&lt;BR&gt;            606 - Cocoa&lt;BR&gt;            701 - Dairy Products &amp; Eggs&lt;BR&gt;            702 - Meat&lt;BR&gt;            703 - Fish &amp; Seafood&lt;BR&gt;            704 - Fruits &amp; Nuts&lt;BR&gt;            705 - Vegetables&lt;BR&gt;            706 - Bread &amp; Cereal Products&lt;BR&gt;            707 - Oils &amp; Fats&lt;BR&gt;            708 - Sauces &amp; Spices&lt;BR&gt;            709 - Convenience Food&lt;BR&gt;            710 - Spreads &amp; Sweeteners&lt;BR&gt;            711 - Baby Food&lt;BR&gt;            712 - Pet Food&lt;BR&gt;            801 - Cigarettes&lt;BR&gt;            802 - Smoking Tobacco&lt;BR&gt;            803 - Cigars&lt;BR&gt;            804 - E-Cigarettes&lt;BR&gt;            901 - Household Cleaners&lt;BR&gt;            902 - Dishwashing Detergents&lt;BR&gt;            903 - Polishes&lt;BR&gt;            904 - Room Scents&lt;BR&gt;            905 - Insecticides&lt;BR&gt;            1001 - Cosmetics&lt;BR&gt;            1002 - Skin Care&lt;BR&gt;            1003 - Personal Care&lt;BR&gt;            1004 - Fragrances&lt;BR&gt;            1101 - Toilet Paper&lt;BR&gt;            1102 - Paper Tissues&lt;BR&gt;            1103 - Household Paper&lt;BR&gt;            1104 - Feminine Hygiene&lt;BR&gt;            1105 - Baby Diapers&lt;BR&gt;            1106 - Incontinence&lt;BR&gt;            1202 - TV, Radio &amp; Multimedia&lt;BR&gt;            1203 - TV Peripheral Devices&lt;BR&gt;            1204 - Telephony&lt;BR&gt;            1205 - Computing&lt;BR&gt;            1206 - Drones&lt;BR&gt;            1301 - Refrigerators&lt;BR&gt;            1302 - Freezers&lt;BR&gt;            1303 - Dishwashing Machines&lt;BR&gt;            1304 - Washing Machines&lt;BR&gt;            1305 - Cookers &amp; Oven&lt;BR&gt;            1306 - Vacuum Cleaners&lt;BR&gt;            1307 - Small Kitchen Appliances&lt;BR&gt;            1308 - Hair Clippers&lt;BR&gt;            1309 - Irons&lt;BR&gt;            1310 - Toasters&lt;BR&gt;            1311 - Grills &amp; Roasters&lt;BR&gt;            1312 - Hair Dryers&lt;BR&gt;            1313 - Coffee Machines&lt;BR&gt;            1314 - Microwave Ovens&lt;BR&gt;            1315 - Electric Kettles&lt;BR&gt;            1401 - Seats &amp; Sofas&lt;BR&gt;            1402 - Beds&lt;BR&gt;            1403 - Mattresses&lt;BR&gt;            1404 - Closets, Nightstands &amp; Dressers&lt;BR&gt;            1405 - Lamps &amp; Lighting&lt;BR&gt;            1406 - Floor Covering&lt;BR&gt;            1407 - Kitchen Furniture&lt;BR&gt;            1408 - Plastic &amp; Other Furniture&lt;BR&gt;            1501 - Analgesics&lt;BR&gt;            1502 - Cold &amp; Cough Remedies&lt;BR&gt;            1503 - Digestives &amp; Intestinal Remedies&lt;BR&gt;            1504 - Skin Treatment&lt;BR&gt;            1505 - Vitamins &amp; Minerals&lt;BR&gt;            1506 - Hand Sanitizer &lt;BR&gt;            1601 - Toys &amp; Games&lt;BR&gt;            1602 - Musical Instruments&lt;BR&gt;            1603 - Sports Equipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(50)]
    public string Category { get; set; }

    /// <summary>
    /// Item's brand
    /// </summary>
    [Newtonsoft.Json.JsonProperty("brand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(50)]
    public string Brand { get; set; }

    [Newtonsoft.Json.JsonProperty("goodsCharacteristics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<GoodsCharacteristics> GoodsCharacteristics { get; set; }

    [Newtonsoft.Json.JsonProperty("additionalQuantityDefinitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(100)]
    public System.Collections.Generic.ICollection<AdditionalQuantityDefinitions> AdditionalQuantityDefinitions { get; set; }

    /// <summary>
    /// Please enter Tariff Rate Type - default_rate,derived_rate,highest_rate,center_rate,lowest_rate
    /// </summary>
    [Newtonsoft.Json.JsonProperty("estimatedTariffRateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ItemsEstimatedTariffRateType EstimatedTariffRateType { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressPackageTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"3BX")]
    _3BX = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"2BC")]
    _2BC = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"2BP")]
    _2BP = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"CE1")]
    CE1 = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"7BX")]
    _7BX = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"6BX")]
    _6BX = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"4BX")]
    _4BX = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"2BX")]
    _2BX = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"1CE")]
    _1CE = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"WB1")]
    WB1 = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"WB3")]
    WB3 = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"XPD")]
    XPD = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"8BX")]
    _8BX = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"5BX")]
    _5BX = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"WB6")]
    WB6 = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"TBL")]
    TBL = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"TBS")]
    TBS = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"WB2")]
    WB2 = 17,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Dimensions2
{
    /// <summary>
    /// Length of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1D, 9999999D)]
    public double Length { get; set; }

    /// <summary>
    /// Width of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1D, 9999999D)]
    public double Width { get; set; }

    /// <summary>
    /// Height of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1D, 9999999D)]
    public double Height { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class LabelBarcodes
{
    /// <summary>
    /// Position of the bespoke barcode
    /// </summary>
    [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public LabelBarcodesPosition Position { get; set; }

    /// <summary>
    /// Please enter valid Symbology code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("symbologyCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public LabelBarcodesSymbologyCode SymbologyCode { get; set; }

    /// <summary>
    /// Please enter barcode content
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Content { get; set; }

    /// <summary>
    /// Please enter text below customer barcode
    /// </summary>
    [Newtonsoft.Json.JsonProperty("textBelowBarcode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string TextBelowBarcode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class LabelText
{
    /// <summary>
    /// Position of the bespoke text
    /// </summary>
    [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public LabelTextPosition Position { get; set; }

    /// <summary>
    /// Please enter caption to be printed in the tag value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("caption", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(20)]
    public string Caption { get; set; }

    /// <summary>
    /// Please enter value to be printed for the respective tag in caption
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(40)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressPackageRRTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"3BX")]
    _3BX = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"2BC")]
    _2BC = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"2BP")]
    _2BP = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"CE1")]
    CE1 = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"7BX")]
    _7BX = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"6BX")]
    _6BX = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"4BX")]
    _4BX = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"2BX")]
    _2BX = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"1CE")]
    _1CE = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"WB1")]
    WB1 = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"WB3")]
    WB3 = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"XPD")]
    XPD = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"8BX")]
    _8BX = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"5BX")]
    _5BX = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"WB6")]
    WB6 = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"TBL")]
    TBL = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"TBS")]
    TBS = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"WB2")]
    WB2 = 17,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Dimensions3
{
    /// <summary>
    /// Length of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1D, 9999999D)]
    public double Length { get; set; }

    /// <summary>
    /// Width of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1D, 9999999D)]
    public double Width { get; set; }

    /// <summary>
    /// Height of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1D, 9999999D)]
    public double Height { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressPackageReferenceTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"AAO")]
    AAO = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"CU")]
    CU = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"FF")]
    FF = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"FN")]
    FN = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"IBC")]
    IBC = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"LLR")]
    LLR = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"OBC")]
    OBC = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"PRN")]
    PRN = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"ACP")]
    ACP = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"ACS")]
    ACS = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"ACR")]
    ACR = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"CDN")]
    CDN = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"STD")]
    STD = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CO")]
    CO = 13,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressPickupRequestLocationType
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"residence")]
    Residence = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SpecialInstructions
{
    /// <summary>
    /// Any special instructions user wish to send to the courier for the order pick-up.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(80)]
    public string Value { get; set; }

    /// <summary>
    /// for future use
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 2)]
    public string TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomerDetails3
{
    [Newtonsoft.Json.JsonProperty("shipperDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ShipperDetails2 ShipperDetails { get; set; } = new ShipperDetails2();

    [Newtonsoft.Json.JsonProperty("receiverDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ReceiverDetails2 ReceiverDetails { get; set; }

    [Newtonsoft.Json.JsonProperty("bookingRequestorDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BookingRequestorDetails BookingRequestorDetails { get; set; }

    [Newtonsoft.Json.JsonProperty("pickupDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PickupDetails3 PickupDetails { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ShipmentDetails2
{
    /// <summary>
    /// Please provide DHL Express Global product code of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 1)]
    public string ProductCode { get; set; }

    /// <summary>
    /// Please provide DHL Express Local product code of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localProductCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
    public string LocalProductCode { get; set; }

    /// <summary>
    /// Please enter all the DHL Express accounts related to this shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(5)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressAccount> Accounts { get; set; }

    /// <summary>
    /// This section communicates additional shipping services, such as Insurance (or Shipment Value Protection).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("valueAddedServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(99)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressValueAddedServicesRates> ValueAddedServices { get; set; }

    /// <summary>
    /// For customs purposes please advise if your shipment is dutiable (true) or non dutiable (false)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isCustomsDeclarable", Required = Newtonsoft.Json.Required.Always)]
    public bool IsCustomsDeclarable { get; set; }

    /// <summary>
    /// For customs purposes please advise on declared value of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("declaredValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double DeclaredValue { get; set; }

    /// <summary>
    /// For customs purposes please advise on declared value currency code of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("declaredValueCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string DeclaredValueCurrency { get; set; }

    /// <summary>
    /// Please enter Unit of measurement - metric,imperial
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unitOfMeasurement", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ShipmentDetails2UnitOfMeasurement UnitOfMeasurement { get; set; }

    /// <summary>
    /// Please provide Shipment Identification number (AWB number)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentTrackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShipmentTrackingNumber { get; set; }

    /// <summary>
    /// Here you can define properties per package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressPackageRR> Packages { get; set; } = new System.Collections.ObjectModel.Collection<SupermodelIoLogisticsExpressPackageRR>();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Products
{
    /// <summary>
    /// DHL Express product - Global Product Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProductName { get; set; }

    /// <summary>
    /// This is the global DHL Express product code for which the delivery is feasible respecting the input data from the request.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProductCode { get; set; }

    /// <summary>
    /// This is the local DHL Express product code for which the delivery is feasible respecting the input data from the request.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localProductCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LocalProductCode { get; set; }

    /// <summary>
    /// The country code for the local service used
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localProductCountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LocalProductCountryCode { get; set; }

    /// <summary>
    /// The NetworkTypeCode element indicates the product belongs to the Day Definite (DD) or Time Definite (TD) network.&lt;BR&gt;            Possible Values;&lt;BR&gt;            DD: Day Definite product&lt;BR&gt;            TD: Time Definite product
    /// </summary>
    [Newtonsoft.Json.JsonProperty("networkTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string NetworkTypeCode { get; set; }

    /// <summary>
    /// Indicator that the product only can be offered to customers with prior agreement.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isCustomerAgreement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsCustomerAgreement { get; set; }

    [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Weight2 Weight { get; set; }

    [Newtonsoft.Json.JsonProperty("breakdown", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Breakdown> Breakdown { get; set; }

    /// <summary>
    /// Group of serviceCodes that are mutually exclusive.  Only one serviceCode among the list must be applied for a shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCodeMutuallyExclusiveGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ServiceCodeMutuallyExclusiveGroups> ServiceCodeMutuallyExclusiveGroups { get; set; }

    /// <summary>
    /// Dependency rule groups for a particular serviceCode.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCodeDependencyRuleGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ServiceCodeDependencyRuleGroups> ServiceCodeDependencyRuleGroups { get; set; }

    [Newtonsoft.Json.JsonProperty("pickupCapabilities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PickupCapabilities PickupCapabilities { get; set; }

    [Newtonsoft.Json.JsonProperty("deliveryCapabilities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DeliveryCapabilities DeliveryCapabilities { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomerDetails4
{
    [Newtonsoft.Json.JsonProperty("shipperDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressRatesRequest ShipperDetails { get; set; } = new SupermodelIoLogisticsExpressAddressRatesRequest();

    [Newtonsoft.Json.JsonProperty("receiverDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressRatesRequest ReceiverDetails { get; set; } = new SupermodelIoLogisticsExpressAddressRatesRequest();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ProductsAndServices
{
    /// <summary>
    /// Please enter DHL Express Global Product code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 1)]
    public string ProductCode { get; set; }

    /// <summary>
    /// Please enter DHL Express Local Product code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localProductCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
    public string LocalProductCode { get; set; }

    /// <summary>
    /// Please use if you wish to filter the response by value added services
    /// </summary>
    [Newtonsoft.Json.JsonProperty("valueAddedServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(99)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressValueAddedServicesRates> ValueAddedServices { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressRateRequestUnitOfMeasurement
{

    [System.Runtime.Serialization.EnumMember(Value = @"metric")]
    Metric = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"imperial")]
    Imperial = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class MonetaryAmount
{
    /// <summary>
    /// Please provide the monetary amount type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public MonetaryAmountTypeCode TypeCode { get; set; }

    /// <summary>
    /// Please provide the monetary value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(double.MinValue, 999999999999999D)]
    public double Value { get; set; }

    /// <summary>
    /// Pleaseprovide monetary amount currency code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string Currency { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class EstimatedDeliveryDate3
{
    /// <summary>
    /// Please indicate if requesting to get EDD for this shipment. 
    /// <br/> Estimated Delivery Date Type. QDDF: is the fastest transit time as quoted to the customer at booking or shipment creation. When clearance or any other non-transport operational component is expected to impact transit time, QDDF does not constitute DHL's service commitment. QDDC: cconstitutes DHL's service commitment as quoted at booking or shipment creation. QDDC builds in clearance time, and potentially other special operational non-transport component(s), when relevant. 
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsRequested { get; set; } = true;

    /// <summary>
    /// Please indicate the EDD type being requested
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(4)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public EstimatedDeliveryDate3TypeCode TypeCode { get; set; } = EstimatedDeliveryDate3TypeCode.QDDF;

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class GetAdditionalInformation2
{
    /// <summary>
    /// Provide type code of data that can be returned in response.  Values can be allValueAddedServices, allValueAddedServicesAndRuleGroups
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public GetAdditionalInformation2TypeCode TypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("isRequested", Required = Newtonsoft.Json.Required.Always)]
    public bool IsRequested { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressRateRequestProductTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"all")]
    All = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"dayDefinite")]
    DayDefinite = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"timeDefinite")]
    TimeDefinite = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Products2
{
    /// <summary>
    /// DHL Express product - Global Product Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProductName { get; set; }

    /// <summary>
    /// This is the global DHL Express product code for which the delivery is feasible respecting the input data from the request.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProductCode { get; set; }

    /// <summary>
    /// This is the local DHL Express product code for which the delivery is feasible respecting the input data from the request.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localProductCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LocalProductCode { get; set; }

    /// <summary>
    /// The country code for the local service used
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localProductCountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LocalProductCountryCode { get; set; }

    /// <summary>
    /// The NetworkTypeCode element indicates the product belongs to the Day Definite (DD) or Time Definite (TD) network.&lt;BR&gt;            Possible Values;&lt;BR&gt;             DD: Day Definite product&lt;BR&gt;             TD: Time Definite product
    /// </summary>
    [Newtonsoft.Json.JsonProperty("networkTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string NetworkTypeCode { get; set; }

    /// <summary>
    /// Indicator that the product only can be offered to customers with prior agreement.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isCustomerAgreement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsCustomerAgreement { get; set; }

    [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Weight3 Weight { get; set; } = new Weight3();

    [Newtonsoft.Json.JsonProperty("totalPrice", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<TotalPrice> TotalPrice { get; set; } = new System.Collections.ObjectModel.Collection<TotalPrice>();

    [Newtonsoft.Json.JsonProperty("totalPriceBreakdown", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<TotalPriceBreakdown> TotalPriceBreakdown { get; set; }

    [Newtonsoft.Json.JsonProperty("detailedPriceBreakdown", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DetailedPriceBreakdown> DetailedPriceBreakdown { get; set; }

    /// <summary>
    /// Group of serviceCodes that are mutually exclusive.  Only one serviceCode among the list must be applied for a shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCodeMutuallyExclusiveGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ServiceCodeMutuallyExclusiveGroups2> ServiceCodeMutuallyExclusiveGroups { get; set; }

    /// <summary>
    /// Dependency rule groups for a particular serviceCode.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCodeDependencyRuleGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ServiceCodeDependencyRuleGroups2> ServiceCodeDependencyRuleGroups { get; set; }

    [Newtonsoft.Json.JsonProperty("pickupCapabilities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PickupCapabilities2 PickupCapabilities { get; set; }

    [Newtonsoft.Json.JsonProperty("deliveryCapabilities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DeliveryCapabilities2 DeliveryCapabilities { get; set; }

    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Items2> Items { get; set; }

    /// <summary>
    /// The date when the rates for DHL products and services is provided
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pricingDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PricingDate { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ExchangeRates
{
    /// <summary>
    /// Rate of the currency exchange
    /// </summary>
    [Newtonsoft.Json.JsonProperty("currentExchangeRate", Required = Newtonsoft.Json.Required.Always)]
    public double CurrentExchangeRate { get; set; }

    /// <summary>
    /// The currency code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Currency { get; set; }

    /// <summary>
    /// The currency code of the base currency is either USD or EUR
    /// </summary>
    [Newtonsoft.Json.JsonProperty("baseCurrency", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string BaseCurrency { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressReferenceTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"AAO")]
    AAO = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"CU")]
    CU = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"FF")]
    FF = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"FN")]
    FN = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"IBC")]
    IBC = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"LLR")]
    LLR = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"OBC")]
    OBC = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"PRN")]
    PRN = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"ACP")]
    ACP = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"ACS")]
    ACS = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"ACR")]
    ACR = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"CDN")]
    CDN = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"STD")]
    STD = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CO")]
    CO = 13,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressRegistrationNumbersTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"VAT")]
    VAT = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"EIN")]
    EIN = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"GST")]
    GST = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"SSN")]
    SSN = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"EOR")]
    EOR = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"DUN")]
    DUN = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"FED")]
    FED = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"STA")]
    STA = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"CNP")]
    CNP = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"IE")]
    IE = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"INN")]
    INN = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"KPP")]
    KPP = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"OGR")]
    OGR = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"OKP")]
    OKP = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"MRN")]
    MRN = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"SDT")]
    SDT = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"FTZ")]
    FTZ = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"DAN")]
    DAN = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"TAN")]
    TAN = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"DTF")]
    DTF = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"RGP")]
    RGP = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"DLI")]
    DLI = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"NID")]
    NID = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"PAS")]
    PAS = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"MID")]
    MID = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"IMS")]
    IMS = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"EIC")]
    EIC = 26,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Shipments
{
    [Newtonsoft.Json.JsonProperty("shipmentTrackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShipmentTrackingNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Status { get; set; }

    [Newtonsoft.Json.JsonProperty("shipmentTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShipmentTimestamp { get; set; }

    /// <summary>
    /// DHL product code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength = 1)]
    public string ProductCode { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("shipperDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ShipperDetails3 ShipperDetails { get; set; }

    [Newtonsoft.Json.JsonProperty("receiverDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ReceiverDetails3 ReceiverDetails { get; set; }

    [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double TotalWeight { get; set; }

    [Newtonsoft.Json.JsonProperty("unitOfMeasurements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UnitOfMeasurements { get; set; }

    [Newtonsoft.Json.JsonProperty("shipperReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressReference> ShipperReferences { get; set; }

    [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<Events> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events>();

    [Newtonsoft.Json.JsonProperty("numberOfPieces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double NumberOfPieces { get; set; }

    [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Pieces> Pieces { get; set; }

    [Newtonsoft.Json.JsonProperty("estimatedDeliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EstimatedDeliveryDate { get; set; }

    [Newtonsoft.Json.JsonProperty("childrenShipmentIdentificationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> ChildrenShipmentIdentificationNumbers { get; set; }

    /// <summary>
    /// controlled access data codes such as 'SHPR_CTY' for shipper's city, 'CNSGN_CTY' for consignee's city, 'SVP_URL' for service point URL, 'SVP_FAC' for service point facility code and 'SIGN_NM' for signatory name.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("controlledAccessDataCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> ControlledAccessDataCodes { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressUpdatePickupRequestLocationType
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"residence")]
    Residence = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SpecialInstructions2
{
    /// <summary>
    /// Any special instructions user wish to send to the courier for the order pick-up.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(80)]
    public string Value { get; set; }

    /// <summary>
    /// for future use
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 2)]
    public string TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomerDetails5
{
    [Newtonsoft.Json.JsonProperty("shipperDetails", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ShipperDetails4 ShipperDetails { get; set; } = new ShipperDetails4();

    [Newtonsoft.Json.JsonProperty("receiverDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ReceiverDetails4 ReceiverDetails { get; set; }

    [Newtonsoft.Json.JsonProperty("bookingRequestorDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BookingRequestorDetails2 BookingRequestorDetails { get; set; }

    [Newtonsoft.Json.JsonProperty("pickupDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PickupDetails4 PickupDetails { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ShipmentDetails3
{
    /// <summary>
    /// Please provide DHL Express Global product code of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 1)]
    public string ProductCode { get; set; }

    /// <summary>
    /// Please provide DHL Express Local product code of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localProductCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
    public string LocalProductCode { get; set; }

    [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(5)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressAccount> Accounts { get; set; }

    [Newtonsoft.Json.JsonProperty("valueAddedServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(99)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressValueAddedServicesRates> ValueAddedServices { get; set; }

    /// <summary>
    /// For customs purposes please advise if your shipment is dutiable (true) or non dutiable (false)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isCustomsDeclarable", Required = Newtonsoft.Json.Required.Always)]
    public bool IsCustomsDeclarable { get; set; }

    /// <summary>
    /// For customs purposes please advise on declared value of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("declaredValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double DeclaredValue { get; set; }

    /// <summary>
    /// For customs purposes please advise on declared value currency code of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("declaredValueCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string DeclaredValueCurrency { get; set; }

    /// <summary>
    /// Please enter Unit of measurement - metric,imperial
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unitOfMeasurement", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ShipmentDetails3UnitOfMeasurement UnitOfMeasurement { get; set; }

    /// <summary>
    /// Please provide Shipment Identification number (AWB number)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentTrackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShipmentTrackingNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressPackageRR> Packages { get; set; } = new System.Collections.ObjectModel.Collection<SupermodelIoLogisticsExpressPackageRR>();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Content3
{
    /// <summary>
    /// Here you can find all details related to export declaration
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exportDeclaration", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(20)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressExportDeclaration> ExportDeclaration { get; set; } = new System.Collections.ObjectModel.Collection<SupermodelIoLogisticsExpressExportDeclaration>();

    /// <summary>
    /// For customs purposes please advise on currency code of the indicated amount in invoice.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string Currency { get; set; }

    /// <summary>
    /// Please enter Unit of measurement - metric,imperial
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unitOfMeasurement", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Content3UnitOfMeasurement UnitOfMeasurement { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class OutputImageProperties2
{
    /// <summary>
    /// Here the image options are defined for label, waybillDoc, invoice, receipt and QRcode
    /// </summary>
    [Newtonsoft.Json.JsonProperty("imageOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public System.Collections.Generic.ICollection<ImageOptions2> ImageOptions { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomerDetails6
{
    /// <summary>
    /// Please enter address and contact details related to seller
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sellerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SellerDetails2 SellerDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to buyer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("buyerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BuyerDetails2 BuyerDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to importer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("importerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ImporterDetails2 ImporterDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to exporter
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exporterDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ExporterDetails2 ExporterDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to manufacturer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("manufacturerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ManufacturerDetails2 ManufacturerDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to ultimate consignee
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ultimateConsigneeDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public UltimateConsigneeDetails2 UltimateConsigneeDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to broker
    /// </summary>
    [Newtonsoft.Json.JsonProperty("brokerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BrokerDetails2 BrokerDetails { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Content4
{
    /// <summary>
    /// Here you can find all details related to export declaration
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exportDeclaration", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(20)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressExportDeclaration> ExportDeclaration { get; set; } = new System.Collections.ObjectModel.Collection<SupermodelIoLogisticsExpressExportDeclaration>();

    /// <summary>
    /// For customs purposes please advise on currency code of the indicated amount in invoice.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string Currency { get; set; }

    /// <summary>
    /// Please enter Unit of measurement - metric,imperial
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unitOfMeasurement", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Content4UnitOfMeasurement UnitOfMeasurement { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class OutputImageProperties3
{
    /// <summary>
    /// Here the image options are defined for label, waybillDoc, invoice, receipt and QRcode
    /// </summary>
    [Newtonsoft.Json.JsonProperty("imageOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public System.Collections.Generic.ICollection<ImageOptions3> ImageOptions { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomerDetails7
{
    /// <summary>
    /// Please enter address and contact details related to seller
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sellerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SellerDetails3 SellerDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to buyer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("buyerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BuyerDetails3 BuyerDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to importer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("importerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ImporterDetails3 ImporterDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to exporter
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exporterDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ExporterDetails3 ExporterDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to manufacturer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("manufacturerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ManufacturerDetails3 ManufacturerDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to ultimate consignee
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ultimateConsigneeDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public UltimateConsigneeDetails3 UltimateConsigneeDetails { get; set; }

    /// <summary>
    /// Please enter address and contact details related to broker
    /// </summary>
    [Newtonsoft.Json.JsonProperty("brokerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public BrokerDetails3 BrokerDetails { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DangerousGoods
{
    /// <summary>
    /// Please enter valid DHL Express Dangerous good content id (please contact your DHL Express IT representative for the relevant content ID code if you are shipping Dan
    /// </summary>
    [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 1)]
    public string ContentId { get; set; }

    /// <summary>
    /// Please enter dry ice total net weight when shipping dry ice
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dryIceTotalNetWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double DryIceTotalNetWeight { get; set; }

    /// <summary>
    /// The customDescription node contains the customized Dangerous Goods statement to declare contents accurately. The customDescription node value will be displayed in the Transport Label and Waybill Document, replacing the default IATA Dangerous Goods statement constructed based on contentId node.&lt;BR&gt;            Multiple customDescription nodes from multiple dangerousGoods nodes will be concatenated using comma separator with combined maximum limit of 200 characters.&lt;BR&gt;            &lt;BR&gt;            It is recommended to use customDescription for entire shipment for each dangerousGoods to fully utilize customDescription printout in Transport Label and Waybill Document.&lt;BR&gt;            &lt;BR&gt;            Note: For 'customDescription' usage, ensure all 'dangerousGoods' segments are including the 'customDescription' field value. Any of the dangerousGoods does not provide with customDescription field value will be ignored from printing in Transport Label and Waybill Document.
    /// <br/>
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(200)]
    public string CustomDescription { get; set; }

    /// <summary>
    /// Please enter UN code(s)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<string> UnCodes { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SupermodelIoLogisticsExpressValueAddedServicesRatesMethod
{

    [System.Runtime.Serialization.EnumMember(Value = @"cash")]
    Cash = 0,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Documents3
{
    [Newtonsoft.Json.JsonProperty("encodingFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EncodingFormat { get; set; }

    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Anonymous14
{
    [Newtonsoft.Json.JsonProperty("attribute", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Attribute { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum OpeningTimeDayOfWeek
{

    [System.Runtime.Serialization.EnumMember(Value = @"MONDAY")]
    MONDAY = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"TUESDAY")]
    TUESDAY = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"WEDNESDAY")]
    WEDNESDAY = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"THURSDAY")]
    THURSDAY = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"FRIDAY")]
    FRIDAY = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"SATURDAY")]
    SATURDAY = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"SUNDAY")]
    SUNDAY = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"HOLIDAY")]
    HOLIDAY = 7,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ServicePointType
{

    [System.Runtime.Serialization.EnumMember(Value = @"CITY")]
    CITY = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"STATION")]
    STATION = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"PARTNER")]
    PARTNER = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"TWENTYFOURSEVEN")]
    TWENTYFOURSEVEN = 3,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DeliveryOptions
{
    /// <summary>
    /// The name of delivery option"
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DeliveryOptionsType Type { get; set; }

    [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<Parameters> Parameters { get; set; } = new System.Collections.ObjectModel.Collection<Parameters>();

    /// <summary>
    /// Returned only for type=servicePoint
    /// </summary>
    [Newtonsoft.Json.JsonProperty("servicePointURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServicePointURL { get; set; }

    /// <summary>
    /// Returned only for type=scheduleDelivery and vacationHold. Important: the start and end datetime field values must be among the options provided in GET delivery-option response.
    /// <br/>
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deliveryWindows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DeliveryWindows> DeliveryWindows { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServiceArea
{
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("GMTOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string GMTOffset { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SpecialInstructions3
{
    /// <summary>
    /// Any special instructions user wish to send to the courier for the order pick-up.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(75)]
    public string Value { get; set; }

    /// <summary>
    /// for future use
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 2)]
    public string TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PickupDetails
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressCreateShipmentRequest PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddressCreateShipmentRequest();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    [Newtonsoft.Json.JsonProperty("bankDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public SupermodelIoLogisticsExpressBankDetails BankDetails { get; set; }

    /// <summary>
    /// Please enter the business party type related to the pickup.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PickupDetailsTypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PickupRequestorDetails
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressCreateShipmentRequest PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddressCreateShipmentRequest();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    [Newtonsoft.Json.JsonProperty("bankDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public SupermodelIoLogisticsExpressBankDetails BankDetails { get; set; }

    /// <summary>
    /// Please enter the business party type of the pickup requestor.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PickupRequestorDetailsTypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomerBarcodes
{
    /// <summary>
    /// Please enter barcode content
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength = 1)]
    public string Content { get; set; }

    /// <summary>
    /// Please tner text below customer barcode
    /// </summary>
    [Newtonsoft.Json.JsonProperty("textBelowBarcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TextBelowBarcode { get; set; }

    /// <summary>
    /// Please enter valid Symbology code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("symbologyCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CustomerBarcodesSymbologyCode SymbologyCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomerLogos
{
    /// <summary>
    /// Please specify image file format
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fileFormat", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CustomerLogosFileFormat FileFormat { get; set; }

    /// <summary>
    /// Please provide base64 encoded logo image
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(1048576)]
    public string Content { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum OutputImagePropertiesEncodingFormat
{

    [System.Runtime.Serialization.EnumMember(Value = @"pdf")]
    Pdf = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"zpl")]
    Zpl = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"lp2")]
    Lp2 = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"epl")]
    Epl = 3,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ImageOptions : object
{
    /// <summary>
    /// Please enter the document type you want to wish set properties for
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ImageOptionsTypeCode TypeCode { get; set; }

    /// <summary>
    /// Please enter DHL Express document template name. &lt;BR&gt;                Sample Transport label templates:&lt;BR&gt;                ECOM26_84_A4_001 &lt;BR&gt;                ECOM26_84_001 - default&lt;BR&gt;                ECOM_TC_A4&lt;BR&gt;                ECOM26_A6_002&lt;BR&gt;                ECOM26_84CI_001&lt;BR&gt;                ECOM26_84CI_002 - supported single customer barcode&lt;BR&gt;                ECOM26_84CI_003 - to be used if customer barcodes are used&lt;BR&gt;                ECOM_A4_RU_002&lt;BR&gt; ECOM26_84_LBBX_001 - supported for loose BBX shipment&lt;BR&gt; ECOM26_64_LBBX_001 - supported for loose BBX shipment&lt;BR&gt;Sample WaybillDoc templates&lt;BR&gt;                ARCH_8X4_A4_002&lt;BR&gt;                ARCH_8X4 - default&lt;BR&gt;                ARCH_6X4&lt;BR&gt;                ARCH_A4_RU_002&lt;BR&gt;                &lt;BR&gt;                Sample Commercial invoice templates:&lt;BR&gt;                COMMERCIAL_INVOICE_04 - This template can print the Shipper, Recipient, and Buyer and Importer address details and is on portrait orientation, exclusive use for preparing Loose BBX shipment.&lt;BR&gt;                COMMERCIAL_INVOICE_P_10 - (default) This template can print the Shipper, Recipient and upto two more additional address details in portrait orientation. Note: If customer provided more than four address roles in the request message and this template is selected, the rendered invoice will only contain four address roles based on order of priority: Shipper, Recipient, Seller, Importer, Exporter, Buyer. &lt;BR&gt;                COMMERCIAL_INVOICE_L_10 - This template can print the Shipper,Recipient, Buyer, and Importer and Exporter address details and is on landscape orientation..&lt;BR&gt;                RET_COM_INVOICE_A4_01 - This template can print the Shipper, Recipient and Importer of record address details and is on landscape orientation. This template is for exclusive use for certain shipment where the goods are actual 'returns'. The Shipper is the party that earlier has received the goods, but now wishes to return the goods to its originating party. The Recipient in this shipment scenario will receive the 'returned goods'. Therefore such request of shipment with an invoice rendering may utilize the specific invoice template for 'Returns Invoice'.&lt;BR&gt;                &lt;BR&gt;                Sample Shipment Receipt template&lt;BR&gt;                SHIP_RECPT_A4_RU_002&lt;BR&gt; SHIPRCPT_EN_001 - default &lt;BR&gt; &lt;BR&gt; Sample QR Code template template&lt;BR&gt;  QR_1_00_LL_PNG_001 - default
    /// </summary>
    [Newtonsoft.Json.JsonProperty("templateName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(25)]
    public string TemplateName { get; set; }

    /// <summary>
    /// To be used for waybillDoc, invoice, shipment receipt and QRcode. If set to true then the document is provided otherwise not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isRequested", Required = Newtonsoft.Json.Required.AllowNull, DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsRequested { get; set; }

    /// <summary>
    /// To be used for waybillDoc. If set to true then account information will not be printed on the waybillDoc
    /// </summary>
    [Newtonsoft.Json.JsonProperty("hideAccountNumber", Required = Newtonsoft.Json.Required.AllowNull, DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? HideAccountNumber { get; set; }

    /// <summary>
    /// You can ask up to 2 waybillDoc copies to be provided
    /// </summary>
    [Newtonsoft.Json.JsonProperty("numberOfCopies", Required = Newtonsoft.Json.Required.AllowNull, DefaultValueHandling =Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, 2D)]
    public double? NumberOfCopies { get; set; }

    /// <summary>
    /// Please advise what type of customs documentation is required
    /// </summary>
    [Newtonsoft.Json.JsonProperty("invoiceType", Required = Newtonsoft.Json.Required.AllowNull, DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ImageOptionsInvoiceType? InvoiceType { get; set; }

    /// <summary>
    /// Please enter ISO 3 letters language code for invoice or shipment receipt
    /// </summary>
    [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
    public string? LanguageCode { get; set; }

    /// <summary>
    /// Please enter ISO 2 letters language country code for invoice or shipment receipt
    /// </summary>
    [Newtonsoft.Json.JsonProperty("languageCountryCode", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
    public string? LanguageCountryCode { get; set; }

    /// <summary>
    /// Please enter ISO 4 letters language script code for shipment receipt
    /// </summary>
    [Newtonsoft.Json.JsonProperty("languageScriptCode", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
    public string? LanguageScriptCode { get; set; }

    /// <summary>
    /// Please provide the format of the QR Code output format.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("encodingFormat", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ImageOptionsEncodingFormat? EncodingFormat { get; set; }

    /// <summary>
    /// DHL Logo to be printed in Transport Label or Waybill Document
    /// </summary>
    [Newtonsoft.Json.JsonProperty("renderDHLLogo", Required = Newtonsoft.Json.Required.AllowNull, DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? RenderDHLLogo { get; set; }

    /// <summary>
    /// To print respective Transport Label and Waybill document into A4 margin PDF.&lt;BR&gt;                Note: ECOM26_A6_002,ECOM26_84CI_001,ECOM26_84CI_002,ARCH_6X4,ARCH_8X4 template. &lt;BR&gt;                This option is applicable only for PDF encodingFormat selection.&lt;BR&gt;                false: Transport Label and Waybill document will use default margin settings (default behavior) &lt;BR&gt;                true: Transport Label and Waybill document will print into A4 margin PDF
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fitLabelsToA4", Required = Newtonsoft.Json.Required.AllowNull, DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? FitLabelsToA4 { get; set; }

    /// <summary>
    /// Additional customer label free text that can be printed in certain label.Note: Applicable only to ECOM26_A6_002, ECOM_TC_A4 and ECOM26_84CI_001.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("labelFreeText", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(150)]
    public string? LabelFreeText { get; set; }

    /// <summary>
    /// Additional customer label text that can be printed in certain label.Note: Applicable only to ECOM26_84_A4_001, ECOM_TC_A4 and ECOM26_84CI_001
    /// </summary>
    [Newtonsoft.Json.JsonProperty("labelCustomerDataText", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength = 1)]
    public string? LabelCustomerDataText { get; set; }

    /// <summary>
    /// Declaration text that can be printed in certain shipment receipt template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentReceiptCustomerDataText", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(700, MinimumLength = 1)]
    public string? ShipmentReceiptCustomerDataText { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ShipperDetails
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressCreateShipmentRequest PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddressCreateShipmentRequest();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    [Newtonsoft.Json.JsonProperty("bankDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public SupermodelIoLogisticsExpressBankDetails BankDetails { get; set; }

    /// <summary>
    /// Please enter the business party role type of the shipper
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ShipperDetailsTypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ReceiverDetails
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressCreateShipmentRequest PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddressCreateShipmentRequest();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    [Newtonsoft.Json.JsonProperty("bankDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public SupermodelIoLogisticsExpressBankDetails BankDetails { get; set; }

    /// <summary>
    /// Please enter the business party type of the receiver
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ReceiverDetailsTypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class BuyerDetails
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressCreateShipmentRequest PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddressCreateShipmentRequest();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContactBuyer ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContactBuyer();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    [Newtonsoft.Json.JsonProperty("bankDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public SupermodelIoLogisticsExpressBankDetails BankDetails { get; set; }

    /// <summary>
    /// Please enter the business party type of the buyer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public BuyerDetailsTypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ImporterDetails
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressCreateShipmentRequest PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddressCreateShipmentRequest();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    [Newtonsoft.Json.JsonProperty("bankDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public SupermodelIoLogisticsExpressBankDetails BankDetails { get; set; }

    /// <summary>
    /// Please enter the business party type of the importer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ImporterDetailsTypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ExporterDetails
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressCreateShipmentRequest PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddressCreateShipmentRequest();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    [Newtonsoft.Json.JsonProperty("bankDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public SupermodelIoLogisticsExpressBankDetails BankDetails { get; set; }

    /// <summary>
    /// Please enter the business party type of the exporter
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ExporterDetailsTypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SellerDetails
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressCreateShipmentRequest PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddressCreateShipmentRequest();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    [Newtonsoft.Json.JsonProperty("bankDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public SupermodelIoLogisticsExpressBankDetails BankDetails { get; set; }

    /// <summary>
    /// Please enter the business party role type of the seller
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SellerDetailsTypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PayerDetails
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressCreateShipmentRequest PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddressCreateShipmentRequest();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    [Newtonsoft.Json.JsonProperty("bankDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public SupermodelIoLogisticsExpressBankDetails BankDetails { get; set; }

    /// <summary>
    /// Please enter the business party role type of the payer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PayerDetailsTypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ManufacturerDetails
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressCreateShipmentRequest PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddressCreateShipmentRequest();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    [Newtonsoft.Json.JsonProperty("bankDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SupermodelIoLogisticsExpressRegistrationNumbers BankDetails { get; set; }

    /// <summary>
    /// Please enter the business party role type of the manufacturer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class UltimateConsigneeDetails
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressCreateShipmentRequest PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddressCreateShipmentRequest();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    [Newtonsoft.Json.JsonProperty("bankDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SupermodelIoLogisticsExpressRegistrationNumbers BankDetails { get; set; }

    /// <summary>
    /// Please enter the business party role type of the ultimate consignee
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class BrokerDetails
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddressCreateShipmentRequest PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddressCreateShipmentRequest();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    [Newtonsoft.Json.JsonProperty("bankDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SupermodelIoLogisticsExpressRegistrationNumbers BankDetails { get; set; }

    /// <summary>
    /// Please enter the business party role type of the broker
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ExportDeclaration
{
    /// <summary>
    /// Please enter details for each export line item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lineItems", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<LineItems2> LineItems { get; set; } = new System.Collections.ObjectModel.Collection<LineItems2>();

    /// <summary>
    /// Please provide invoice related information
    /// </summary>
    [Newtonsoft.Json.JsonProperty("invoice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Invoice2 Invoice { get; set; }

    /// <summary>
    /// Please enter up to three remarks. &lt;BR&gt;              If using Customs Invoice template COMMERCIAL_INVOICE_04, the invoice can only print the first remarks field. The recommended max length is 20 characters. &lt;BR&gt;              If using Customs Invoice template COMMERCIAL_INVOICE_L_10 or COMMERCIAL_INVOICE_P_10, the invoice can print all three remraks fields.  The recommended max length is 45 characters.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("remarks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(3)]
    public System.Collections.Generic.ICollection<Remarks2> Remarks { get; set; }

    /// <summary>
    /// Please enter additional charge to appear on the invoice&lt;BR&gt;              admin, Administration Charge&lt;BR&gt;              delivery, Delivery Charge&lt;BR&gt;              documentation, Documentation Charge&lt;BR&gt;              expedite, Expedite Charge&lt;BR&gt;              export, Export Charge&lt;BR&gt;              freight, Freight Charge&lt;BR&gt;              fuel_surcharge, Fuel Surcharge&lt;BR&gt;              logistic, Logistic Charge&lt;BR&gt;              other, Other Charge&lt;BR&gt;              packaging, Packaging Charge&lt;BR&gt;              pickup, Pickup Charge&lt;BR&gt;              handling, Handling Charge&lt;BR&gt;              vat, VAT Charge&lt;BR&gt;              insurance, Insurance Cost&lt;BR&gt;              reverse_charge, Reverse Charge
    /// </summary>
    [Newtonsoft.Json.JsonProperty("additionalCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(5)]
    public System.Collections.Generic.ICollection<AdditionalCharges2> AdditionalCharges { get; set; }

    /// <summary>
    /// Please provide destination port details
    /// </summary>
    [Newtonsoft.Json.JsonProperty("destinationPortName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DestinationPortName { get; set; }

    /// <summary>
    /// Name of port of departure, shipment or destination as required under the applicable delivery term.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("placeOfIncoterm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
    public string PlaceOfIncoterm { get; set; }

    /// <summary>
    /// Please provide Payer VAT number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("payerVATNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PayerVATNumber { get; set; }

    /// <summary>
    /// Please enter recipient reference
    /// </summary>
    [Newtonsoft.Json.JsonProperty("recipientReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string RecipientReference { get; set; }

    /// <summary>
    /// Exporter related details
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exporter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Exporter2 Exporter { get; set; }

    /// <summary>
    /// Please enter package marks
    /// </summary>
    [Newtonsoft.Json.JsonProperty("packageMarks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PackageMarks { get; set; }

    /// <summary>
    /// Please provide up to three declaration notes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("declarationNotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(3)]
    public System.Collections.Generic.ICollection<DeclarationNotes> DeclarationNotes { get; set; }

    /// <summary>
    /// Please enter export reference
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exportReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(40)]
    public string ExportReference { get; set; }

    /// <summary>
    /// Please enter export reason
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exportReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
    public string ExportReason { get; set; }

    /// <summary>
    /// Please provide the reason for export
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exportReasonType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ExportDeclarationExportReasonType ExportReasonType { get; set; }

    /// <summary>
    /// Please provide details about export and import licenses
    /// </summary>
    [Newtonsoft.Json.JsonProperty("licenses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(2)]
    public System.Collections.Generic.ICollection<Licenses> Licenses { get; set; }

    /// <summary>
    /// Please provide the shipment was sent for Personal (Gift) or Commercial (Sale) reasons
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shipmentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ExportDeclarationShipmentType ShipmentType { get; set; }

    /// <summary>
    /// Please provide the Customs Documents at invoice level
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customsDocuments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<CustomsDocuments3> CustomsDocuments { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Content2Incoterm
{

    [System.Runtime.Serialization.EnumMember(Value = @"EXW")]
    EXW = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"FCA")]
    FCA = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CPT")]
    CPT = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"CIP")]
    CIP = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"DPU")]
    DPU = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"DAP")]
    DAP = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"DDP")]
    DDP = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"FAS")]
    FAS = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"FOB")]
    FOB = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"CFR")]
    CFR = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"CIF")]
    CIF = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"DAF")]
    DAF = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"DAT")]
    DAT = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"DDU")]
    DDU = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"DEQ")]
    DEQ = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"DES")]
    DES = 15,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Content2UnitOfMeasurement
{

    [System.Runtime.Serialization.EnumMember(Value = @"metric")]
    Metric = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"imperial")]
    Imperial = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum OnDemandDeliveryDeliveryOption
{

    [System.Runtime.Serialization.EnumMember(Value = @"servicepoint")]
    Servicepoint = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"neighbour")]
    Neighbour = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"signatureRelease")]
    SignatureRelease = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum OnDemandDeliveryWhereToLeave
{

    [System.Runtime.Serialization.EnumMember(Value = @"concierge")]
    Concierge = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"neighbour")]
    Neighbour = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ShipmentNotificationTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"email")]
    Email = 0,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum PrepaidChargesTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"freight")]
    Freight = 0,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum PrepaidChargesMethod
{

    [System.Runtime.Serialization.EnumMember(Value = @"cash")]
    Cash = 0,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum EstimatedDeliveryDateTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"QDDC")]
    QDDC = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"QDDF")]
    QDDF = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum GetAdditionalInformationTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"pickupDetails")]
    PickupDetails = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"optionalShipmentData")]
    OptionalShipmentData = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"barcodeInformation")]
    BarcodeInformation = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"linkLabelsByPieces")]
    LinkLabelsByPieces = 3,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Documents4
{
    /// <summary>
    /// Identifies image format the document is created in, like PNG etc.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("imageFormat", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ImageFormat { get; set; }

    /// <summary>
    /// Contains base64 encoded document image
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Content { get; set; }

    /// <summary>
    /// Identifie type of the QR code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomerDetails8
{
    [Newtonsoft.Json.JsonProperty("shipperDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ShipperDetails5 ShipperDetails { get; set; }

    [Newtonsoft.Json.JsonProperty("receiverDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ReceiverDetails5 ReceiverDetails { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class OriginServiceArea
{
    [Newtonsoft.Json.JsonProperty("facilityCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FacilityCode { get; set; }

    [Newtonsoft.Json.JsonProperty("serviceAreaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceAreaCode { get; set; }

    [Newtonsoft.Json.JsonProperty("outboundSortCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OutboundSortCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DestinationServiceArea
{
    [Newtonsoft.Json.JsonProperty("facilityCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FacilityCode { get; set; }

    [Newtonsoft.Json.JsonProperty("serviceAreaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceAreaCode { get; set; }

    [Newtonsoft.Json.JsonProperty("inboundSortCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string InboundSortCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ValueAddedServices
{
    [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ServiceCode { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PickupDetails2
{
    /// <summary>
    /// Pickup booking cutoff time
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localCutoffDateAndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LocalCutoffDateAndTime { get; set; }

    /// <summary>
    /// Pickup booking cutoff time in GMT offset
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cutoffTimeOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CutoffTimeOffset { get; set; }

    /// <summary>
    /// The DHL earliest time possible for pickup
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupEarliest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PickupEarliest { get; set; }

    /// <summary>
    /// The DHL latest time possible for pickup
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupLatest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PickupLatest { get; set; }

    /// <summary>
    /// Local pickup cut off time which allows forwarding the shipment on the requested day. Any Pickup requested after this pickup cutoff time may have an impact on transit time.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupCutoffSameDayOutboundProcessing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PickupCutoffSameDayOutboundProcessing { get; set; }

    /// <summary>
    /// The number of transit days
    /// </summary>
    [Newtonsoft.Json.JsonProperty("totalTransitDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TotalTransitDays { get; set; }

    /// <summary>
    /// This is additional transit delays (in days) for shipment picked up from the mentioned city or postal area to arrival at the service area
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupAdditionalDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PickupAdditionalDays { get; set; }

    /// <summary>
    /// This is additional transit delays (in days) for shipment delivered to the mentioned city or postal area following arrival at the service area
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deliveryAdditionalDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DeliveryAdditionalDays { get; set; }

    /// <summary>
    /// Pickup day of the week number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupDayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PickupDayOfWeek { get; set; }

    /// <summary>
    /// Destination day of the week number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deliveryDayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DeliveryDayOfWeek { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServiceBreakdown
{
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// The amount price of DHL product and services
    /// </summary>
    [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
    public double Price { get; set; }

    /// <summary>
    /// Special service charge code type for service.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class TrackingNumberBarcodes
{
    /// <summary>
    /// Piece serial number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, 999D)]
    public double ReferenceNumber { get; set; }

    /// <summary>
    /// Barcode base4 image of each piece of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("trackingNumberBarcodeContent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TrackingNumberBarcodeContent { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Documents2Function
{

    [System.Runtime.Serialization.EnumMember(Value = @"import")]
    Import = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"export")]
    Export = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"both")]
    Both = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum TypeCode2
{

    [System.Runtime.Serialization.EnumMember(Value = @"INV")]
    INV = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"PNV")]
    PNV = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"COO")]
    COO = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"CIN")]
    CIN = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"DCL")]
    DCL = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"AWB")]
    AWB = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"NAF")]
    NAF = 6,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ImageFormat
{

    [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
    PDF = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"PNG")]
    PNG = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"GIF")]
    GIF = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"TIFF")]
    TIFF = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"JPEG")]
    JPEG = 4,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Quantity
{
    /// <summary>
    /// Please enter number of pieces in the line item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1, 1000000000)]
    public int Value { get; set; }

    /// <summary>
    /// Please provide correct unit of
    /// <br/>        measurement&lt;BR&gt;                       
    /// <br/>        &lt;BR&gt;Possible values:&lt;BR&gt;
    /// <br/>          BOX Boxes&lt;BR&gt;
    /// <br/>          2GM Centigram&lt;BR&gt;
    /// <br/>          M3 Cubic Meters&lt;BR&gt;
    /// <br/>          DPR Dozen Pairs&lt;BR&gt;
    /// <br/>          DOZ Dozen&lt;BR&gt;
    /// <br/>          PCS Pieces&lt;BR&gt;
    /// <br/>          GM Grams&lt;BR&gt;
    /// <br/>          GRS Gross&lt;BR&gt;
    /// <br/>          KG Kilograms&lt;BR&gt;
    /// <br/>          M Meters&lt;BR&gt;
    /// <br/>          3GM Milligrams&lt;BR&gt;
    /// <br/>          X No Unit Required&lt;BR&gt;
    /// <br/>          NO Number&lt;BR&gt;
    /// <br/>          PRS Pairs&lt;BR&gt;
    /// <br/>          CM2 Square Centimeters&lt;BR&gt;
    /// <br/>          2M2 Square Feet&lt;BR&gt;
    /// <br/>          3M2 Square Inches&lt;BR&gt;
    /// <br/>          M2 Square Meters&lt;BR&gt;
    /// <br/>          4M2 Square Yards&lt;BR&gt;
    /// <br/>          CM Centimeters&lt;BR&gt;
    /// <br/>          CONE Cone&lt;BR&gt;
    /// <br/>          CT Carat&lt;BR&gt;
    /// <br/>          EA Each&lt;BR&gt;
    /// <br/>          LBS Pounds&lt;BR&gt;
    /// <br/>          RILL Rill&lt;BR&gt;
    /// <br/>          ROLL Roll&lt;BR&gt;
    /// <br/>          SET Set&lt;BR&gt;
    /// <br/>          TU Time Unit&lt;BR&gt;
    /// <br/>          KM kilometre&lt;BR&gt;
    /// <br/>          IN inch&lt;BR&gt;
    /// <br/>          FT foot&lt;BR&gt;
    /// <br/>          YD yard&lt;BR&gt;
    /// <br/>          MI mile (statute mile)&lt;BR&gt;
    /// <br/>          LTR litre&lt;BR&gt;
    /// <br/>          MMQ cubic millimetre&lt;BR&gt;
    /// <br/>          CM3 cubic centimetre&lt;BR&gt;
    /// <br/>          DMQ cubic decimetre&lt;BR&gt;
    /// <br/>          MLT millilitre&lt;BR&gt;
    /// <br/>          CLT centilitre&lt;BR&gt;
    /// <br/>          DLT decilitre&lt;BR&gt;
    /// <br/>          INQ cubic inch&lt;BR&gt;
    /// <br/>          FT3 cubic foot&lt;BR&gt;
    /// <br/>          YD3 cubic yard&lt;BR&gt;
    /// <br/>          GLI gallon (UK)&lt;BR&gt;
    /// <br/>          GLL gallon (US)&lt;BR&gt;
    /// <br/>          PT pint (US)&lt;BR&gt;
    /// <br/>          PTI pint (UK)&lt;BR&gt;
    /// <br/>          QTI quart (UK)&lt;BR&gt;
    /// <br/>          PTL liquid pint (US)&lt;BR&gt;
    /// <br/>          QTL liquid quart (US)&lt;BR&gt;
    /// <br/>          PTD dry pint (US)&lt;BR&gt;
    /// <br/>          OZI fluid ounce (UK)&lt;BR&gt;
    /// <br/>          J57 barrel (UK petroleum)&lt;BR&gt;
    /// <br/>          NM3 Normalised cubic metre&lt;BR&gt;
    /// <br/>          SM3 Standard cubic metre&lt;BR&gt;
    /// <br/>          TNE tonne (metric ton)&lt;BR&gt;
    /// <br/>          LB pound&lt;BR&gt;
    /// <br/>          ONZ ounce (avoirdupois)&lt;BR&gt;
    /// <br/>          CEL degree Celsius                              
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unitOfMeasurement", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(3)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public QuantityUnitOfMeasurement UnitOfMeasurement { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CommodityCodes
{
    /// <summary>
    /// Please provide type of the commodity code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CommodityCodesTypeCode TypeCode { get; set; }

    /// <summary>
    /// Please provide the commodity code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(18, MinimumLength = 2)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum LineItemsExportReasonType
{

    [System.Runtime.Serialization.EnumMember(Value = @"permanent")]
    Permanent = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"temporary")]
    Temporary = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"return")]
    Return = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"used_exhibition_goods_to_origin")]
    Used_exhibition_goods_to_origin = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"intercompany_use")]
    Intercompany_use = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"commercial_purpose_or_sale")]
    Commercial_purpose_or_sale = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"personal_belongings_or_personal_use")]
    Personal_belongings_or_personal_use = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"sample")]
    Sample = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"gift")]
    Gift = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"return_to_origin")]
    Return_to_origin = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"warranty_replacement")]
    Warranty_replacement = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"diplomatic_goods")]
    Diplomatic_goods = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"defence_material")]
    Defence_material = 12,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Weight
{
    /// <summary>
    /// Please enter the net weight value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("netValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999D)]
    public double NetValue { get; set; }

    /// <summary>
    /// Please enter the gross weight value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("grossValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999D)]
    public double GrossValue { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomerReferences
{
    /// <summary>
    /// Please provide the line item reference type code. Please refer to the YAML Reference Data Guide PDF file for valid enumeration values.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CustomerReferencesTypeCode TypeCode { get; set; }

    /// <summary>
    /// Please provide the line item reference
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomsDocuments2
{
    /// <summary>
    /// Please provide the line item customs document type code. Please refer to the YAML Reference Data Guide PDF file for valid enumeration values.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CustomsDocuments2TypeCode TypeCode { get; set; }

    /// <summary>
    /// Please provide the line item customs document ID
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum InvoiceFunction
{

    [System.Runtime.Serialization.EnumMember(Value = @"import")]
    Import = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"export")]
    Export = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"both")]
    Both = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomerReferences2
{
    /// <summary>
    /// Please provide the invoice reference type code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 2)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CustomerReferences2TypeCode TypeCode { get; set; }

    /// <summary>
    /// Please provide the invoice reference
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class IndicativeCustomsValues
{
    /// <summary>
    /// Please provide the pre-calculated import customs duties value for the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("importCustomsDutyValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double ImportCustomsDutyValue { get; set; }

    /// <summary>
    /// Please provide the pre-calculated import taxes (VAT/GST) value for the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("importTaxesValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double ImportTaxesValue { get; set; }

    /// <summary>
    /// Please provide pre-calculated total of all line items plus additional charges plus indicativeCustomsValues
    /// </summary>
    [Newtonsoft.Json.JsonProperty("totalWithImportDutiesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double TotalWithImportDutiesAndTaxes { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PreCalculatedTotalValues
{
    /// <summary>
    /// Please provide the pre-calculated total value of all line items. preCalculatedTotalGoodsValue indicates pre-calculated sum of all Export Line Items’ Subtotal in Export Declaration. This field value will be rendered in Commercial Invoice output and manifest message.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("preCalculatedTotalGoodsValue", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double PreCalculatedTotalGoodsValue { get; set; }

    /// <summary>
    /// Please provide the total value of all line items plus additional charges if any. preCalculatedTotalInvoiceValue indicates pre-calculated sum of all Export Line Items’ Subtotal  amount plus all Other Charges amount.  This field value will be used in rendered Commercial Invoice output, Waybill document and manifest message.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("preCalculatedTotalInvoiceValue", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double PreCalculatedTotalInvoiceValue { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum AdditionalChargesTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"admin")]
    Admin = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"delivery")]
    Delivery = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"documentation")]
    Documentation = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"expedite")]
    Expedite = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"export")]
    Export = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"freight")]
    Freight = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"fuel_surcharge")]
    Fuel_surcharge = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"logistic")]
    Logistic = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"packaging")]
    Packaging = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"pickup")]
    Pickup = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"handling")]
    Handling = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"vat")]
    Vat = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"insurance")]
    Insurance = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"reverse_charge")]
    Reverse_charge = 14,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum CustomsDocumentsTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"972")]
    _972 = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"AHC")]
    AHC = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ALC")]
    ALC = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"ATA")]
    ATA = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ATR")]
    ATR = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"BEX")]
    BEX = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"CHA")]
    CHA = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CHD")]
    CHD = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"CHP")]
    CHP = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"CIT")]
    CIT = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"CIV")]
    CIV = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"CI2")]
    CI2 = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"COO")]
    COO = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CPA")]
    CPA = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"CRL")]
    CRL = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"CSD")]
    CSD = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"DEX")]
    DEX = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"DGD")]
    DGD = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"DLI")]
    DLI = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"DOV")]
    DOV = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"ELP")]
    ELP = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"EU1")]
    EU1 = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"EU2")]
    EU2 = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"EUS")]
    EUS = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"EXL")]
    EXL = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"FMA")]
    FMA = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"HLC")]
    HLC = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"HWB")]
    HWB = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"INV")]
    INV = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"IPA")]
    IPA = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"JLC")]
    JLC = 30,

    [System.Runtime.Serialization.EnumMember(Value = @"LIC")]
    LIC = 31,

    [System.Runtime.Serialization.EnumMember(Value = @"LNP")]
    LNP = 32,

    [System.Runtime.Serialization.EnumMember(Value = @"NID")]
    NID = 33,

    [System.Runtime.Serialization.EnumMember(Value = @"PAS")]
    PAS = 34,

    [System.Runtime.Serialization.EnumMember(Value = @"PFI")]
    PFI = 35,

    [System.Runtime.Serialization.EnumMember(Value = @"PHY")]
    PHY = 36,

    [System.Runtime.Serialization.EnumMember(Value = @"PLI")]
    PLI = 37,

    [System.Runtime.Serialization.EnumMember(Value = @"POA")]
    POA = 38,

    [System.Runtime.Serialization.EnumMember(Value = @"PCH")]
    PCH = 39,

    [System.Runtime.Serialization.EnumMember(Value = @"ROD")]
    ROD = 40,

    [System.Runtime.Serialization.EnumMember(Value = @"T2M")]
    T2M = 41,

    [System.Runtime.Serialization.EnumMember(Value = @"TAD")]
    TAD = 42,

    [System.Runtime.Serialization.EnumMember(Value = @"TCS")]
    TCS = 43,

    [System.Runtime.Serialization.EnumMember(Value = @"VET")]
    VET = 44,

    [System.Runtime.Serialization.EnumMember(Value = @"VEX")]
    VEX = 45,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ChargesTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"freight")]
    Freight = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"additional")]
    Additional = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"insurance")]
    Insurance = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ItemsQuantityType
{

    [System.Runtime.Serialization.EnumMember(Value = @"prt")]
    Prt = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"box")]
    Box = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ItemsWeightUnitOfMeasurement
{

    [System.Runtime.Serialization.EnumMember(Value = @"metric")]
    Metric = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"imperial")]
    Imperial = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class GoodsCharacteristics
{
    /// <summary>
    /// Please contact Express country representative to provide all applicable codes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(35)]
    public string TypeCode { get; set; }

    /// <summary>
    /// Value related to the code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(50)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class AdditionalQuantityDefinitions
{
    /// <summary>
    /// Item additional quantity value UOM:&lt;BR&gt;                  example PFL=percent of alcohol
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 2)]
    public string TypeCode { get; set; }

    /// <summary>
    /// An Item's additional quantity value:&lt;BR&gt;                  example is percent of alcohol
    /// </summary>
    [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(double.MinValue, 999999999999D)]
    public double Amount { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ItemsEstimatedTariffRateType
{

    [System.Runtime.Serialization.EnumMember(Value = @"default_rate")]
    Default_rate = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"derived_rate")]
    Derived_rate = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"highest_rate")]
    Highest_rate = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"center_rate")]
    Center_rate = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"lowest_rate")]
    Lowest_rate = 4,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum LabelBarcodesPosition
{

    [System.Runtime.Serialization.EnumMember(Value = @"left")]
    Left = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"right")]
    Right = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum LabelBarcodesSymbologyCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"93")]
    _93 = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"39")]
    _39 = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"128")]
    _128 = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum LabelTextPosition
{

    [System.Runtime.Serialization.EnumMember(Value = @"left1")]
    Left1 = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"left2")]
    Left2 = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"left3")]
    Left3 = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"right1")]
    Right1 = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"right2")]
    Right2 = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"right3")]
    Right3 = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ShipperDetails2
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ReceiverDetails2
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class BookingRequestorDetails
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; }

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PickupDetails3
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ShipmentDetails2UnitOfMeasurement
{

    [System.Runtime.Serialization.EnumMember(Value = @"metric")]
    Metric = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"imperial")]
    Imperial = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Weight2
{
    /// <summary>
    /// The dimensional weight of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("volumetric", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Volumetric { get; set; }

    /// <summary>
    /// The quoted weight of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("provided", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Provided { get; set; }

    /// <summary>
    /// The unit of measurement for the dimensions of the package.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unitOfMeasurement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UnitOfMeasurement { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Breakdown
{
    /// <summary>
    /// Breakdown Name. &lt;BR&gt; name within the first occurrence of breakdown will be the Global Product Name.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Special service or extra charge code.  This is the code you would have to use in the /shipment service if you wish to add an optional Service such as Saturday delivery
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceCode { get; set; }

    /// <summary>
    /// Local service code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localServiceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LocalServiceCode { get; set; }

    /// <summary>
    /// Breakdown type code. &lt;BR&gt; typeCode within the first occurrence of breakdown will be the Local Product Name.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TypeCode { get; set; }

    /// <summary>
    /// Special service charge code type for service.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceTypeCode { get; set; }

    /// <summary>
    /// Customer agreement indicator for product and services, if service is offered with prior customer agreement
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isCustomerAgreement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsCustomerAgreement { get; set; }

    /// <summary>
    /// Indicator if the special service is marketed service
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isMarketedService", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsMarketedService { get; set; }

    /// <summary>
    /// Indicator if there is any discount allowed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isBillingServiceIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsBillingServiceIndicator { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServiceCodeMutuallyExclusiveGroups
{
    /// <summary>
    /// Mutually exclusive serviceCode group name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCodeRuleName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceCodeRuleName { get; set; }

    /// <summary>
    /// Mutually exclusive serviceCode group description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("serviceCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ServiceCodes> ServiceCodes { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServiceCodeDependencyRuleGroups
{
    /// <summary>
    /// Dependent special service charge code where the rule groups are applied
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dependentServiceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DependentServiceCode { get; set; }

    [Newtonsoft.Json.JsonProperty("dependencyRuleGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DependencyRuleGroup> DependencyRuleGroup { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PickupCapabilities
{
    /// <summary>
    /// This indicator has values of Y or N, and tells the consumer if the service in the response has a pickup date on the same day as the requested shipment date (per the request).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nextBusinessDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool NextBusinessDay { get; set; }

    /// <summary>
    /// This is the cutoff time for the service&lt;BR&gt;                offered in the response. This represents the latest time (local to origin) which the shipment can be tendered to the courier for that service on that day.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localCutoffDateAndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LocalCutoffDateAndTime { get; set; }

    /// <summary>
    /// The DHL earliest time possible for pickup
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupEarliest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PickupEarliest { get; set; }

    /// <summary>
    /// The DHL latest time possible for pickup
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupLatest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PickupLatest { get; set; }

    /// <summary>
    /// Local pickup cut off time which allows forwarding the shipment on the requested day. Any Pickup requested after this pickup cutoff time may have an impact on transit time.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupCutoffSameDayOutboundProcessing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PickupCutoffSameDayOutboundProcessing { get; set; }

    /// <summary>
    /// The DHL Service Area Code for the origin of the Shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("originServiceAreaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OriginServiceAreaCode { get; set; }

    /// <summary>
    /// The DHL Facility Code for the Origin
    /// </summary>
    [Newtonsoft.Json.JsonProperty("originFacilityAreaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OriginFacilityAreaCode { get; set; }

    /// <summary>
    /// This is additional transit delays (in days) for shipment picked up from the mentioned city or postal area to arrival at the service area.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupAdditionalDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double PickupAdditionalDays { get; set; }

    /// <summary>
    /// Pickup day of the week number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupDayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double PickupDayOfWeek { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DeliveryCapabilities
{
    /// <summary>
    /// Delivery Date capabilities considering customs clearance days. Estimated Delivery Date Type. QDDF: is the fastest transit time as quoted to the customer at booking or shipment creation. When clearance or any other non-transport operational component is expected to impact transit time, QDDF does not constitute DHL's service commitment. QDDC: cconstitutes DHL's service commitment as quoted at booking or shipment creation. QDDC builds in clearance time, and potentially other special operational non-transport component(s), when relevant. 
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deliveryTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DeliveryTypeCode { get; set; }

    /// <summary>
    /// This is the estimated date/time the shipment will be delivered by for the rated shipment and product listed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("estimatedDeliveryDateAndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EstimatedDeliveryDateAndTime { get; set; }

    /// <summary>
    /// The DHL Service Area Code for the destination of the Shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("destinationServiceAreaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DestinationServiceAreaCode { get; set; }

    /// <summary>
    /// The DHL Facility Code for the Destination
    /// </summary>
    [Newtonsoft.Json.JsonProperty("destinationFacilityAreaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DestinationFacilityAreaCode { get; set; }

    /// <summary>
    /// This is additional transit delays (in days) for shipment delivered to the&lt;BR&gt;                mentioned city or postal area following arrival at the service area.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deliveryAdditionalDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double DeliveryAdditionalDays { get; set; }

    /// <summary>
    /// Destination day of the week number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deliveryDayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double DeliveryDayOfWeek { get; set; }

    /// <summary>
    /// The number of transit days
    /// </summary>
    [Newtonsoft.Json.JsonProperty("totalTransitDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double TotalTransitDays { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum MonetaryAmountTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"declaredValue")]
    DeclaredValue = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"insuredValue")]
    InsuredValue = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum EstimatedDeliveryDate3TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"QDDC")]
    QDDC = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"QDDF")]
    QDDF = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum GetAdditionalInformation2TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"allValueAddedServices")]
    AllValueAddedServices = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"allValueAddedServicesAndRuleGroups")]
    AllValueAddedServicesAndRuleGroups = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Weight3
{
    /// <summary>
    /// The dimensional weight of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("volumetric", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Volumetric { get; set; }

    /// <summary>
    /// The quoted weight of the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("provided", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Provided { get; set; }

    /// <summary>
    /// The unit of measurement for the dimensions of the package.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unitOfMeasurement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UnitOfMeasurement { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class TotalPrice
{
    /// <summary>
    /// Possible Values :&lt;BR&gt;                  'BILLC', billing currency&lt;BR&gt;                  'PULCL', country public rates currency&lt;BR&gt;                  'BASEC', base currency
    /// </summary>
    [Newtonsoft.Json.JsonProperty("currencyType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CurrencyType { get; set; }

    /// <summary>
    /// This the currency of the rated shipment for the prices listed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("priceCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PriceCurrency { get; set; }

    /// <summary>
    /// This is the total price of the rated shipment for the product listed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
    public double Price { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class TotalPriceBreakdown
{
    /// <summary>
    /// Possible Values :&lt;BR&gt;                  'BILLC', billing currency&lt;BR&gt;                  'PULCL', country public rates currency&lt;BR&gt;                  'BASEC', base currency
    /// </summary>
    [Newtonsoft.Json.JsonProperty("currencyType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CurrencyType { get; set; }

    /// <summary>
    /// This the currency of the rated shipment for the prices listed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("priceCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PriceCurrency { get; set; }

    [Newtonsoft.Json.JsonProperty("priceBreakdown", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PriceBreakdown> PriceBreakdown { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DetailedPriceBreakdown
{
    /// <summary>
    /// Possible Values :&lt;BR&gt;                  'BILLC', billing currency&lt;BR&gt;                  'PULCL', country public rates currency&lt;BR&gt;                  'BASEC', base currency
    /// </summary>
    [Newtonsoft.Json.JsonProperty("currencyType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CurrencyType { get; set; }

    /// <summary>
    /// This the currency of the rated shipment for the prices listed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("priceCurrency", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string PriceCurrency { get; set; }

    [Newtonsoft.Json.JsonProperty("breakdown", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Breakdown2> Breakdown { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServiceCodeMutuallyExclusiveGroups2
{
    /// <summary>
    /// Mutually exclusive serviceCode group name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCodeRuleName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceCodeRuleName { get; set; }

    /// <summary>
    /// Mutually exclusive serviceCode group description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("serviceCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ServiceCodes2> ServiceCodes { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServiceCodeDependencyRuleGroups2
{
    /// <summary>
    /// Dependent special service charge code where the rule groups are applied
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dependentServiceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DependentServiceCode { get; set; }

    [Newtonsoft.Json.JsonProperty("dependencyRuleGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<DependencyRuleGroup2> DependencyRuleGroup { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PickupCapabilities2
{
    /// <summary>
    /// This indicator has values of Y or N, and tells the consumer if the service in the response has a pickup date on the same day as the requested shipment date (per the request).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("nextBusinessDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool NextBusinessDay { get; set; }

    /// <summary>
    /// This is the cutoff time for the service&lt;BR&gt;                offered in the response. This represents the latest time (local to origin) which the shipment can be tendered to the courier for that service on that day.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localCutoffDateAndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LocalCutoffDateAndTime { get; set; }

    /// <summary>
    /// The DHL earliest time possible for pickup
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupEarliest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PickupEarliest { get; set; }

    /// <summary>
    /// The DHL latest time possible for pickup
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupLatest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PickupLatest { get; set; }

    /// <summary>
    /// Local pickup cut off time which allows forwarding the shipment on the requested day. Any Pickup requested after this pickup cutoff time may have an impact on transit time.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupCutoffSameDayOutboundProcessing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PickupCutoffSameDayOutboundProcessing { get; set; }

    /// <summary>
    /// The DHL Service Area Code for the origin of the Shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("originServiceAreaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OriginServiceAreaCode { get; set; }

    /// <summary>
    /// The DHL Facility Code for the Origin
    /// </summary>
    [Newtonsoft.Json.JsonProperty("originFacilityAreaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OriginFacilityAreaCode { get; set; }

    /// <summary>
    /// This is additional transit delays (in days) for shipment picked up from the mentioned city or postal area to arrival at the service area.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupAdditionalDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double PickupAdditionalDays { get; set; }

    /// <summary>
    /// Pickup day of the week number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("pickupDayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double PickupDayOfWeek { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DeliveryCapabilities2
{
    /// <summary>
    /// Delivery Date capabilities considering customs clearance days.Estimated Delivery Date Type. QDDF: is the fastest transit time as quoted to the customer at booking or shipment creation. When clearance or any other non-transport operational component is expected to impact transit time, QDDF does not constitute DHL's service commitment. QDDC: cconstitutes DHL's service commitment as quoted at booking or shipment creation. QDDC builds in clearance time, and potentially other special operational non-transport component(s), when relevant.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deliveryTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DeliveryTypeCode { get; set; }

    /// <summary>
    /// This is the estimated date/time the shipment will be delivered by for the rated shipment and product listed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("estimatedDeliveryDateAndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EstimatedDeliveryDateAndTime { get; set; }

    /// <summary>
    /// The DHL Service Area Code for the destination of the Shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("destinationServiceAreaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DestinationServiceAreaCode { get; set; }

    /// <summary>
    /// The DHL Facility Code for the Destination
    /// </summary>
    [Newtonsoft.Json.JsonProperty("destinationFacilityAreaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DestinationFacilityAreaCode { get; set; }

    /// <summary>
    /// This is additional transit delays (in days) for shipment delivered to the&lt;BR&gt;                mentioned city or postal area following arrival at the service area.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deliveryAdditionalDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double DeliveryAdditionalDays { get; set; }

    /// <summary>
    /// Destination day of the week number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deliveryDayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double DeliveryDayOfWeek { get; set; }

    /// <summary>
    /// The number of transit days
    /// </summary>
    [Newtonsoft.Json.JsonProperty("totalTransitDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double TotalTransitDays { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Items2
{
    /// <summary>
    /// Item line number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
    public double Number { get; set; }

    [Newtonsoft.Json.JsonProperty("breakdown", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<Breakdown3> Breakdown { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ShipperDetails3
{
    /// <summary>
    /// Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.                  
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PostalAddress PostalAddress { get; set; }

    [Newtonsoft.Json.JsonProperty("serviceArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ServiceArea2> ServiceArea { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ReceiverDetails3
{
    /// <summary>
    /// Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PostalAddress2 PostalAddress { get; set; }

    [Newtonsoft.Json.JsonProperty("serviceArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ServiceArea3> ServiceArea { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Events
{
    [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Date { get; set; }

    [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Time { get; set; }

    [Newtonsoft.Json.JsonProperty("GMTOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string GMTOffset { get; set; }

    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("serviceArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ServiceArea4> ServiceArea { get; set; }

    /// <summary>
    /// Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.    
    /// </summary>
    [Newtonsoft.Json.JsonProperty("signedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SignedBy { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Pieces
{
    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Number { get; set; }

    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("shipmentTrackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShipmentTrackingNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TrackingNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// The weight of the package.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0.001D, 999999999999D)]
    public double Weight { get; set; }

    /// <summary>
    /// The weight of the package.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dimensionalWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0.001D, 999999999999D)]
    public double DimensionalWeight { get; set; }

    /// <summary>
    /// The weight of the package.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("actualWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0.001D, 999999999999D)]
    public double ActualWeight { get; set; }

    /// <summary>
    /// Dimensions of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Dimensions4 Dimensions { get; set; }

    /// <summary>
    /// Dimensions of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("actualDimensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ActualDimensions ActualDimensions { get; set; }

    [Newtonsoft.Json.JsonProperty("unitOfMeasurements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UnitOfMeasurements { get; set; }

    [Newtonsoft.Json.JsonProperty("shipperReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(999)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressReference> ShipperReferences { get; set; }

    [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<Events2> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events2>();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ShipperDetails4
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ReceiverDetails4
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class BookingRequestorDetails2
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; }

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PickupDetails4
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ShipmentDetails3UnitOfMeasurement
{

    [System.Runtime.Serialization.EnumMember(Value = @"metric")]
    Metric = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"imperial")]
    Imperial = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Content3UnitOfMeasurement
{

    [System.Runtime.Serialization.EnumMember(Value = @"metric")]
    Metric = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"imperial")]
    Imperial = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ImageOptions2
{
    /// <summary>
    /// Please enter the document type you want to wish set properties for
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ImageOptions2TypeCode TypeCode { get; set; }

    /// <summary>
    /// Please enter DHL Express document template name.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("templateName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(25)]
    public string TemplateName { get; set; }

    /// <summary>
    /// If set to true then the document is rendered otherwise not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsRequested { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SellerDetails2
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    /// <summary>
    /// Please enter the business party type of the buyer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SellerDetails2TypeCode TypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class BuyerDetails2
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    /// <summary>
    /// Please enter the business party type of the buyer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public BuyerDetails2TypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ImporterDetails2
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    /// <summary>
    /// Please enter the business party type of the importer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ImporterDetails2TypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ExporterDetails2
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    /// <summary>
    /// Please enter the business party type of the exporter
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ExporterDetails2TypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ManufacturerDetails2
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    /// <summary>
    /// Please enter the business party type of the manufacturer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ManufacturerDetails2TypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class UltimateConsigneeDetails2
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    /// <summary>
    /// Please enter the business party type of the ultimate consignee
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UltimateConsigneeDetails2TypeCode TypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class BrokerDetails2
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    /// <summary>
    /// Please enter the business party type of the broker
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public BrokerDetails2TypeCode TypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Content4UnitOfMeasurement
{

    [System.Runtime.Serialization.EnumMember(Value = @"metric")]
    Metric = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"imperial")]
    Imperial = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ImageOptions3
{
    /// <summary>
    /// Please enter the document type you want to wish set properties for
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ImageOptions3TypeCode TypeCode { get; set; }

    /// <summary>
    /// Please enter DHL Express document template name.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("templateName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(25)]
    public string TemplateName { get; set; }

    /// <summary>
    /// If set to true then the document is rendered otherwise not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsRequested { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class SellerDetails3
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    /// <summary>
    /// Please enter the business party type of the buyer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SellerDetails3TypeCode TypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class BuyerDetails3
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    /// <summary>
    /// Please enter the business party type of the buyer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public BuyerDetails3TypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ImporterDetails3
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    /// <summary>
    /// Please enter the business party type of the importer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ImporterDetails3TypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ExporterDetails3
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    /// <summary>
    /// Please enter the business party type of the exporter
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ExporterDetails3TypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ManufacturerDetails3
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

    /// <summary>
    /// Please enter the business party type of the manufacturer
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ManufacturerDetails3TypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class UltimateConsigneeDetails3
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    /// <summary>
    /// Please enter the business party type of the ultimate consignee
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UltimateConsigneeDetails3TypeCode TypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class BrokerDetails3
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressAddress PostalAddress { get; set; } = new SupermodelIoLogisticsExpressAddress();

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public SupermodelIoLogisticsExpressContact ContactInformation { get; set; } = new SupermodelIoLogisticsExpressContact();

    /// <summary>
    /// Please enter the business party type of the broker
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public BrokerDetails3TypeCode TypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("registrationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(10)]
    public System.Collections.Generic.ICollection<SupermodelIoLogisticsExpressRegistrationNumbers> RegistrationNumbers { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum DeliveryOptionsType
{

    [System.Runtime.Serialization.EnumMember(Value = @"signatureRelease")]
    SignatureRelease = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"servicePoint")]
    ServicePoint = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"scheduleDelivery")]
    ScheduleDelivery = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"vacationHold")]
    VacationHold = 3,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Parameters
{
    /// <summary>
    /// delivery option parameter name"
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("isRequired", Required = Newtonsoft.Json.Required.Always)]
    public bool IsRequired { get; set; }

    /// <summary>
    /// Returned only for type=signatureRelease
    /// </summary>
    [Newtonsoft.Json.JsonProperty("acceptedValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> AcceptedValues { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DeliveryWindows
{
    /// <summary>
    /// Format e.g 2016-12-31T00:00:00 GMT+08:00
    /// </summary>
    [Newtonsoft.Json.JsonProperty("startDateTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string StartDateTime { get; set; }

    /// <summary>
    /// Format e.g 2016-12-31T23:59:00 GMT+08:00
    /// </summary>
    [Newtonsoft.Json.JsonProperty("endDateTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string EndDateTime { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum PickupDetailsTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum PickupRequestorDetailsTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum CustomerBarcodesSymbologyCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"93")]
    _93 = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"39")]
    _39 = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"128")]
    _128 = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum CustomerLogosFileFormat
{

    [System.Runtime.Serialization.EnumMember(Value = @"PNG")]
    PNG = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"GIF")]
    GIF = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"JPEG")]
    JPEG = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"JPG")]
    JPG = 3,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ImageOptionsTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"label")]
    Label = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"waybillDoc")]
    WaybillDoc = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"invoice")]
    Invoice = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"qr-code")]
    QrCode = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"shipmentReceipt")]
    ShipmentReceipt = 4,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ImageOptionsInvoiceType
{

    [System.Runtime.Serialization.EnumMember(Value = @"commercial")]
    Commercial = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"proforma")]
    Proforma = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"returns")]
    Returns = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ImageOptionsEncodingFormat
{

    [System.Runtime.Serialization.EnumMember(Value = @"png")]
    Png = 0,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ShipperDetailsTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ReceiverDetailsTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum BuyerDetailsTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ImporterDetailsTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ExporterDetailsTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SellerDetailsTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum PayerDetailsTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class LineItems2
{
    /// <summary>
    /// Please provide line item number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1, 999)]
    public int Number { get; set; }

    /// <summary>
    /// Please provide description of the line item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
    public string Description { get; set; }

    /// <summary>
    /// Please provide unit or article price line item value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double Price { get; set; }

    /// <summary>
    /// Please enter information about quantity for this line item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Quantity2 Quantity { get; set; } = new Quantity2();

    /// <summary>
    /// Please provide Commodity codes for the shipment at item line level
    /// </summary>
    [Newtonsoft.Json.JsonProperty("commodityCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(2)]
    public System.Collections.Generic.ICollection<CommodityCodes2> CommodityCodes { get; set; }

    /// <summary>
    /// Please provide the reason for export
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exportReasonType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public LineItems2ExportReasonType ExportReasonType { get; set; }

    /// <summary>
    /// Please enter two letter ISO manufacturer country code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("manufacturerCountry", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
    public string ManufacturerCountry { get; set; }

    /// <summary>
    /// Please enter the total weight value for line item for gross weight or net weight. There is no auto calculation for number multiply with weight.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Weight4 Weight { get; set; } = new Weight4();

    /// <summary>
    /// Please provide if the Taxes is paid for the line item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isTaxesPaid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsTaxesPaid { get; set; }

    /// <summary>
    /// Please provide the additional information
    /// </summary>
    [Newtonsoft.Json.JsonProperty("additionalInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(8)]
    public System.Collections.Generic.ICollection<string> AdditionalInformation { get; set; }

    /// <summary>
    /// Please provide the Customer References for the line item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customerReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(100)]
    public System.Collections.Generic.ICollection<CustomerReferences3> CustomerReferences { get; set; }

    /// <summary>
    /// Please provide the customs documents details
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customsDocuments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(50)]
    public System.Collections.Generic.ICollection<CustomsDocuments4> CustomsDocuments { get; set; }

    /// <summary>
    /// Please provide monetary value of the line item x quantity
    /// </summary>
    [Newtonsoft.Json.JsonProperty("preCalculatedLineItemTotalValue", Required = Newtonsoft.Json.Required.DisallowNull, DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double PreCalculatedLineItemTotalValue { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Invoice2
{
    /// <summary>
    /// Please enter commercial invoice number
    /// </summary>
    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string Number { get; set; }

    /// <summary>
    /// Please enter accurate date when the invoice was issued at as that is what drives the exchange rate calculation during customs clearance process (where applicable).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset Date { get; set; }

    /// <summary>
    /// Please enter who has signed the invoce
    /// </summary>
    [Newtonsoft.Json.JsonProperty("signatureName", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(35)]
    public string? SignatureName { get; set; }

    /// <summary>
    /// Please provide title of person who has signed the invoice
    /// </summary>
    [Newtonsoft.Json.JsonProperty("signatureTitle", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(35)]
    public string? SignatureTitle { get; set; }

    /// <summary>
    /// Please provide the signature image
    /// </summary>
    [Newtonsoft.Json.JsonProperty("signatureImage", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(1048576)]
    public string? SignatureImage { get; set; }

    /// <summary>
    /// Shipment instructions for customs invoice printing purposes. Printed only when using Customs Invoice template COMMERCIAL_INVOICE_04. If using Customs Invoice template 			COMMERCIAL_INVOICE_04, recommended max length is 120 characters.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("instructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(1)]
    public System.Collections.Generic.ICollection<string> Instructions { get; set; }

    /// <summary>
    /// Customer data text to be printed in&lt;BR&gt;                  customs invoice.&lt;BR&gt;                  Printed only when using Customs&lt;BR&gt;                  Invoice template&lt;BR&gt;                  COMMERCIAL_INVOICE_04.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customerDataTextEntries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(6)]
    public System.Collections.Generic.ICollection<string> CustomerDataTextEntries { get; set; }

    /// <summary>
    /// Please provide the total net weight
    /// </summary>
    [Newtonsoft.Json.JsonProperty("totalNetWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999D)]
    public double TotalNetWeight { get; set; }

    /// <summary>
    /// Please provide the total gross weight
    /// </summary>
    [Newtonsoft.Json.JsonProperty("totalGrossWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999D)]
    public double TotalGrossWeight { get; set; }

    /// <summary>
    /// Please provide the customer references at invoice level. It is recommended to provide less than 20 customer references of 'MRN' type code.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customerReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MaxLength(100)]
    public System.Collections.Generic.ICollection<CustomerReferences4> CustomerReferences { get; set; }

    /// <summary>
    /// Please provide the terms of payment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("termsOfPayment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TermsOfPayment { get; set; }

    /// <summary>
    /// indicativeCustomsValues contains child nodes importCustomsDutyValue and importTaxesValue.&lt;BR&gt;                  &lt;BR&gt;                  These 2 child elements are only applicable for Commercial Invoice printing purpose in Customs Invoice template*: COMMERCIAL_INVOICE_P_10 and COMMERCIAL_INVOICE_L_10.&lt;BR&gt;                  If any of this child nodes are present, it will only be able to display up to three OtherCharges. &lt;BR&gt;                  &lt;BR&gt;                  Nonetheless, the ShipmentRequest can still contain up to five additionalCharges.&lt;BR&gt;                  If there are more than three additionalCharges, the third additionalCharges onwards will be combined and displayed under one single caption of 'Other Charges'.&lt;BR&gt;                  &lt;BR&gt;                  Note: If either first or second additionalCharges has typeCode of 'other', and there are more than three additionalCharges provided in the request, the additionalCharges with typeCode of 'other' will be consolidated under the combined 'Other Charges' caption as well.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("indicativeCustomsValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public IndicativeCustomsValues2 IndicativeCustomsValues { get; set; }

    /// <summary>
    /// Please provide pre-calculated total values for total goods value and total invoice value.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("preCalculatedTotalValues", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PreCalculatedTotalValues2? PreCalculatedTotalValues { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Remarks2
{
    /// <summary>
    /// Please enter remark text
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class AdditionalCharges2
{
    /// <summary>
    /// Please provide the charge value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0.001D, 999999999999999D)]
    public double Value { get; set; }

    /// <summary>
    /// Please enter charge caption
    /// </summary>
    [Newtonsoft.Json.JsonProperty("caption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Caption { get; set; }

    /// <summary>
    /// Please enter charge type
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AdditionalCharges2TypeCode TypeCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Exporter2
{
    /// <summary>
    /// Please provide exporter Id
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

    /// <summary>
    /// Please provide exporter code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DeclarationNotes
{
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(700)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ExportDeclarationExportReasonType
{

    [System.Runtime.Serialization.EnumMember(Value = @"permanent")]
    Permanent = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"temporary")]
    Temporary = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"return")]
    Return = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"used_exhibition_goods_to_origin")]
    Used_exhibition_goods_to_origin = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"intercompany_use")]
    Intercompany_use = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"commercial_purpose_or_sale")]
    Commercial_purpose_or_sale = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"personal_belongings_or_personal_use")]
    Personal_belongings_or_personal_use = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"sample")]
    Sample = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"gift")]
    Gift = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"return_to_origin")]
    Return_to_origin = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"warranty_replacement")]
    Warranty_replacement = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"diplomatic_goods")]
    Diplomatic_goods = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"defence_material")]
    Defence_material = 12,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Licenses
{
    /// <summary>
    /// Please provide type of the license
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public LicensesTypeCode TypeCode { get; set; }

    /// <summary>
    /// Please provide the license
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(16)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ExportDeclarationShipmentType
{

    [System.Runtime.Serialization.EnumMember(Value = @"personal")]
    Personal = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"commercial")]
    Commercial = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomsDocuments3
{
    /// <summary>
    /// Please provide the Customs Document type code at invoice level
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CustomsDocuments3TypeCode TypeCode { get; set; }

    /// <summary>
    /// Please provide the Customs Document ID at invoice level
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ShipperDetails5
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SupermodelIoLogisticsExpressAddressCreateShipmentResponse PostalAddress { get; set; }

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SupermodelIoLogisticsExpressContactCreateShipmentResponse ContactInformation { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ReceiverDetails5
{
    [Newtonsoft.Json.JsonProperty("postalAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SupermodelIoLogisticsExpressAddressCreateShipmentResponse PostalAddress { get; set; }

    [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SupermodelIoLogisticsExpressContactCreateShipmentResponse ContactInformation { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum QuantityUnitOfMeasurement
{

    [System.Runtime.Serialization.EnumMember(Value = @"BOX")]
    BOX = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"2GM")]
    _2GM = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"M3")]
    M3 = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"DPR")]
    DPR = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"DOZ")]
    DOZ = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"PCS")]
    PCS = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"GM")]
    GM = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"GRS")]
    GRS = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"KG")]
    KG = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"M")]
    M = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"3GM")]
    _3GM = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"X")]
    X = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"NO")]
    NO = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"PRS")]
    PRS = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"CM2")]
    CM2 = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"2M2")]
    _2M2 = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"3M2")]
    _3M2 = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"M2")]
    M2 = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"4M2")]
    _4M2 = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"CM")]
    CM = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"CONE")]
    CONE = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"CT")]
    CT = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"EA")]
    EA = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"LBS")]
    LBS = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"RILL")]
    RILL = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"ROLL")]
    ROLL = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"SET")]
    SET = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"TU")]
    TU = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"KM")]
    KM = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"IN")]
    IN = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"FT")]
    FT = 30,

    [System.Runtime.Serialization.EnumMember(Value = @"YD")]
    YD = 31,

    [System.Runtime.Serialization.EnumMember(Value = @"MI")]
    MI = 32,

    [System.Runtime.Serialization.EnumMember(Value = @"LTR")]
    LTR = 33,

    [System.Runtime.Serialization.EnumMember(Value = @"MMQ")]
    MMQ = 34,

    [System.Runtime.Serialization.EnumMember(Value = @"CM3")]
    CM3 = 35,

    [System.Runtime.Serialization.EnumMember(Value = @"DMQ")]
    DMQ = 36,

    [System.Runtime.Serialization.EnumMember(Value = @"MLT")]
    MLT = 37,

    [System.Runtime.Serialization.EnumMember(Value = @"CLT")]
    CLT = 38,

    [System.Runtime.Serialization.EnumMember(Value = @"DLT")]
    DLT = 39,

    [System.Runtime.Serialization.EnumMember(Value = @"INQ")]
    INQ = 40,

    [System.Runtime.Serialization.EnumMember(Value = @"FT3")]
    FT3 = 41,

    [System.Runtime.Serialization.EnumMember(Value = @"YD3")]
    YD3 = 42,

    [System.Runtime.Serialization.EnumMember(Value = @"GLI")]
    GLI = 43,

    [System.Runtime.Serialization.EnumMember(Value = @"GLL")]
    GLL = 44,

    [System.Runtime.Serialization.EnumMember(Value = @"PT")]
    PT = 45,

    [System.Runtime.Serialization.EnumMember(Value = @"PTI")]
    PTI = 46,

    [System.Runtime.Serialization.EnumMember(Value = @"QTI")]
    QTI = 47,

    [System.Runtime.Serialization.EnumMember(Value = @"PTL")]
    PTL = 48,

    [System.Runtime.Serialization.EnumMember(Value = @"QTL")]
    QTL = 49,

    [System.Runtime.Serialization.EnumMember(Value = @"PTD")]
    PTD = 50,

    [System.Runtime.Serialization.EnumMember(Value = @"OZI")]
    OZI = 51,

    [System.Runtime.Serialization.EnumMember(Value = @"J57")]
    J57 = 52,

    [System.Runtime.Serialization.EnumMember(Value = @"NM3")]
    NM3 = 53,

    [System.Runtime.Serialization.EnumMember(Value = @"SM3")]
    SM3 = 54,

    [System.Runtime.Serialization.EnumMember(Value = @"TNE")]
    TNE = 55,

    [System.Runtime.Serialization.EnumMember(Value = @"LB")]
    LB = 56,

    [System.Runtime.Serialization.EnumMember(Value = @"ONZ")]
    ONZ = 57,

    [System.Runtime.Serialization.EnumMember(Value = @"CEL")]
    CEL = 58,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum CommodityCodesTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"outbound")]
    Outbound = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"inbound")]
    Inbound = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum CustomerReferencesTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"AFE")]
    AFE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"BRD")]
    BRD = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"DGC")]
    DGC = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"AAJ")]
    AAJ = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"INB")]
    INB = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"MAK")]
    MAK = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"ALX")]
    ALX = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"PAN")]
    PAN = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"PON")]
    PON = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"ABW")]
    ABW = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"SE")]
    SE = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"SON")]
    SON = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"OID")]
    OID = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"DTC")]
    DTC = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"DTM")]
    DTM = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"DTQ")]
    DTQ = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"DTR")]
    DTR = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"ITR")]
    ITR = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"MID")]
    MID = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"OED")]
    OED = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"OET")]
    OET = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"OOR")]
    OOR = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"SME")]
    SME = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"USM")]
    USM = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"AAM")]
    AAM = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"CFR")]
    CFR = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"DOM")]
    DOM = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"FOR")]
    FOR = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"USG")]
    USG = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"MAT")]
    MAT = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"NLR")]
    NLR = 30,

    [System.Runtime.Serialization.EnumMember(Value = @"DDS")]
    DDS = 31,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum CustomsDocuments2TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"972")]
    _972 = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"AHC")]
    AHC = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ALC")]
    ALC = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"ATA")]
    ATA = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ATR")]
    ATR = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"BEX")]
    BEX = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"CHA")]
    CHA = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CHD")]
    CHD = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"CHP")]
    CHP = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"CIT")]
    CIT = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"CIV")]
    CIV = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"CI2")]
    CI2 = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"COO")]
    COO = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CPA")]
    CPA = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"CRL")]
    CRL = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"CSD")]
    CSD = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"DEX")]
    DEX = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"DGD")]
    DGD = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"DLI")]
    DLI = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"DOV")]
    DOV = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"ELP")]
    ELP = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"EU1")]
    EU1 = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"EU2")]
    EU2 = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"EUS")]
    EUS = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"EXL")]
    EXL = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"FMA")]
    FMA = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"HLC")]
    HLC = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"HWB")]
    HWB = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"INV")]
    INV = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"IPA")]
    IPA = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"JLC")]
    JLC = 30,

    [System.Runtime.Serialization.EnumMember(Value = @"LIC")]
    LIC = 31,

    [System.Runtime.Serialization.EnumMember(Value = @"LNP")]
    LNP = 32,

    [System.Runtime.Serialization.EnumMember(Value = @"NID")]
    NID = 33,

    [System.Runtime.Serialization.EnumMember(Value = @"PAS")]
    PAS = 34,

    [System.Runtime.Serialization.EnumMember(Value = @"PFI")]
    PFI = 35,

    [System.Runtime.Serialization.EnumMember(Value = @"PHY")]
    PHY = 36,

    [System.Runtime.Serialization.EnumMember(Value = @"PLI")]
    PLI = 37,

    [System.Runtime.Serialization.EnumMember(Value = @"POA")]
    POA = 38,

    [System.Runtime.Serialization.EnumMember(Value = @"PCH")]
    PCH = 39,

    [System.Runtime.Serialization.EnumMember(Value = @"ROD")]
    ROD = 40,

    [System.Runtime.Serialization.EnumMember(Value = @"T2M")]
    T2M = 41,

    [System.Runtime.Serialization.EnumMember(Value = @"TAD")]
    TAD = 42,

    [System.Runtime.Serialization.EnumMember(Value = @"TCS")]
    TCS = 43,

    [System.Runtime.Serialization.EnumMember(Value = @"VET")]
    VET = 44,

    [System.Runtime.Serialization.EnumMember(Value = @"VEX")]
    VEX = 45,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum CustomerReferences2TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"ACL")]
    ACL = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"CID")]
    CID = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CN")]
    CN = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"CU")]
    CU = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ITN")]
    ITN = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"MRN")]
    MRN = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"OID")]
    OID = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"PON")]
    PON = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"RMA")]
    RMA = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"UCN")]
    UCN = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"AAM")]
    AAM = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"ABT")]
    ABT = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"ADA")]
    ADA = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"AES")]
    AES = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"AFD")]
    AFD = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"ANT")]
    ANT = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"BKN")]
    BKN = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"BOL")]
    BOL = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"CDN")]
    CDN = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"COD")]
    COD = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"DSC")]
    DSC = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"FF")]
    FF = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"FN")]
    FN = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"FTR")]
    FTR = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"HWB")]
    HWB = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"IBC")]
    IBC = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"IPP")]
    IPP = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"LLR")]
    LLR = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"MAB")]
    MAB = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"MWB")]
    MWB = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"OBC")]
    OBC = 30,

    [System.Runtime.Serialization.EnumMember(Value = @"PD")]
    PD = 31,

    [System.Runtime.Serialization.EnumMember(Value = @"PRN")]
    PRN = 32,

    [System.Runtime.Serialization.EnumMember(Value = @"RTL")]
    RTL = 33,

    [System.Runtime.Serialization.EnumMember(Value = @"SID")]
    SID = 34,

    [System.Runtime.Serialization.EnumMember(Value = @"SS")]
    SS = 35,

    [System.Runtime.Serialization.EnumMember(Value = @"SWN")]
    SWN = 36,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServiceCodes
{
    /// <summary>
    /// The special service charge code 
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DependencyRuleGroup
{
    /// <summary>
    /// Dependency rule group name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dependencyRuleName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DependencyRuleName { get; set; }

    /// <summary>
    /// Dependency rule group description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dependencyDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DependencyDescription { get; set; }

    /// <summary>
    /// Dependency rule group condition statement
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dependencyCondition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DependencyCondition { get; set; }

    [Newtonsoft.Json.JsonProperty("requiredServiceCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<RequiredServiceCodes> RequiredServiceCodes { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PriceBreakdown
{
    /// <summary>
    /// Expected values in Breakdown/Type are below:&lt;BR&gt;                        STTXA:  Total tax for the shipment&lt;BR&gt;                        STDIS: Total discount for the shipment&lt;BR&gt;                        SPRQT: Net shipment / weight charge
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string TypeCode { get; set; }

    /// <summary>
    /// The amount price of DHL product and services
    /// </summary>
    [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
    public double Price { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Breakdown2
{
    /// <summary>
    /// For /rates:&lt;BR&gt;  name within the first occurrence of breakdown will be the Global Product Name.&lt;BR&gt;&lt;BR&gt;
    /// <br/>For /landed-cost:&lt;BR&gt; When landed-cost is requested then following items name (Charge Types) might be returned: &lt;BR&gt;                        Charge Type : Description &lt;BR&gt;                        STDIS : Quoted shipment total discount &lt;BR&gt;                        SCUSV : Shipment Customs value &lt;BR&gt;                        SINSV : Insured value &lt;BR&gt;                        SPRQD : Shipment product quote discount&lt;BR&gt;                        SPRQN : The price quoted to the Customer by DHL at the time of the booking. This quote covers the weight price including discounts and without taxes. &lt;BR&gt;                        STSCH : The total of service charges quoted to customer for DHL Express value added services, the amount is after discounts and doesn't include tax amounts. &lt;BR&gt;                        MACHG : The total of service charges as provided by Merchant for the purpose of landed cost calculation. &lt;BR&gt;                        MFCHG : The freight charge as provided by Merchant for the purpose of landed cost calculation.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Special service or extra charge code. This is the code you would have to use in the /shipment service if you wish to add an optional Service such as Saturday delivery
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceCode { get; set; }

    /// <summary>
    /// Local service code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localServiceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LocalServiceCode { get; set; }

    /// <summary>
    /// Price breakdown type code. &lt;BR&gt;typeCode within the first occurrence of breakdown will be the Local Product Name.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TypeCode { get; set; }

    /// <summary>
    /// Special service charge code type for service.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceTypeCode { get; set; }

    /// <summary>
    /// Price breakdown value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Price { get; set; }

    /// <summary>
    /// This the currency of the rated shipment for the prices listed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("priceCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PriceCurrency { get; set; }

    /// <summary>
    /// Customer agreement indicator for product and services, if service is offered with prior customer agreement
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isCustomerAgreement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsCustomerAgreement { get; set; }

    /// <summary>
    /// Indicator if the special service is marketed service
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isMarketedService", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsMarketedService { get; set; }

    /// <summary>
    /// Indicator if there is any discount allowed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isBillingServiceIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsBillingServiceIndicator { get; set; }

    [Newtonsoft.Json.JsonProperty("priceBreakdown", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PriceBreakdown2> PriceBreakdown { get; set; }

    /// <summary>
    /// Tariff Rate Formula on Shipment Level
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tariffRateFormula", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TariffRateFormula { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServiceCodes2
{
    /// <summary>
    /// The special service charge code 
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class DependencyRuleGroup2
{
    /// <summary>
    /// Dependency rule group name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dependencyRuleName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DependencyRuleName { get; set; }

    /// <summary>
    /// Dependency rule group description
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dependencyDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DependencyDescription { get; set; }

    /// <summary>
    /// Dependency rule group condition statement
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dependencyCondition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DependencyCondition { get; set; }

    [Newtonsoft.Json.JsonProperty("requiredServiceCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<RequiredServiceCodes2> RequiredServiceCodes { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Breakdown3
{
    /// <summary>
    /// Name of the charge
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Special service or extra charge code. This is the code you would have to use in the /shipment service if you wish to add an optional Service such as Saturday delivery
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceCode { get; set; }

    /// <summary>
    /// Local service code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("localServiceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LocalServiceCode { get; set; }

    /// <summary>
    /// Charge type or category.&lt;BR&gt;                        Possible values;&lt;BR&gt;                        - DUTY&lt;BR&gt;                        - TAX&lt;BR&gt;                        - FEE
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string TypeCode { get; set; }

    /// <summary>
    /// Special service charge code type for service. XCH type charge codes are Optional Services and should be displayed to users for selection.&lt;BR&gt;                        The possible values are;&lt;BR&gt;                        - XCH = Extra charge&lt;BR&gt;                        - FEE = Fee&lt;BR&gt;                        - SCH = Surcharge&lt;BR&gt;                        - NRI = Non Revenue Item&lt;BR&gt;                        Other charges may be automatically returned when applicable.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceTypeCode { get; set; }

    /// <summary>
    /// The charge amount of the line item charge.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
    public double Price { get; set; }

    /// <summary>
    /// This the currency of the rated shipment for the prices listed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("priceCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PriceCurrency { get; set; }

    /// <summary>
    /// Customer agreement indicator for product and services, if service is offered with prior customer agreement
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isCustomerAgreement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsCustomerAgreement { get; set; }

    /// <summary>
    /// Indicator if the special service is marketed service
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isMarketedService", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsMarketedService { get; set; }

    /// <summary>
    /// Indicator if there is any discount allowed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isBillingServiceIndicator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsBillingServiceIndicator { get; set; }

    [Newtonsoft.Json.JsonProperty("priceBreakdown", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<PriceBreakdown3> PriceBreakdown { get; set; }

    /// <summary>
    /// Tariff Rate Formula on Line Item Level
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tariffRateFormula", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TariffRateFormula { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PostalAddress
{
    /// <summary>
    /// Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CityName { get; set; }

    /// <summary>
    /// Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountyName { get; set; }

    /// <summary>
    /// Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PostalCode { get; set; }

    /// <summary>
    /// Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("provinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProvinceCode { get; set; }

    [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountryCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServiceArea2
{
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("outboundSortCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OutboundSortCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PostalAddress2
{
    /// <summary>
    /// Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CityName { get; set; }

    /// <summary>
    /// Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("countyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountyName { get; set; }

    /// <summary>
    /// Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PostalCode { get; set; }

    /// <summary>
    /// Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.        
    /// </summary>
    [Newtonsoft.Json.JsonProperty("provinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProvinceCode { get; set; }

    [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountryCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServiceArea3
{
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("facilityCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FacilityCode { get; set; }

    [Newtonsoft.Json.JsonProperty("inboundSortCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string InboundSortCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServiceArea4
{
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Dimensions4
{
    /// <summary>
    /// Length of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, 9999999D)]
    public double Length { get; set; }

    /// <summary>
    /// Width of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, 9999999D)]
    public double Width { get; set; }

    /// <summary>
    /// Height of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, 9999999D)]
    public double Height { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ActualDimensions
{
    /// <summary>
    /// Length of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1D, 9999999D)]
    public double Length { get; set; }

    /// <summary>
    /// Width of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1D, 9999999D)]
    public double Width { get; set; }

    /// <summary>
    /// Height of the package
    /// </summary>
    [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1D, 9999999D)]
    public double Height { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Events2
{
    [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Date { get; set; }

    [Newtonsoft.Json.JsonProperty("GMTOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string GMTOffset { get; set; }

    [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Time { get; set; }

    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TypeCode { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("serviceArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ServiceArea5> ServiceArea { get; set; }

    /// <summary>
    /// Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.            
    /// </summary>
    [Newtonsoft.Json.JsonProperty("signedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SignedBy { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ImageOptions2TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"invoice")]
    Invoice = 0,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SellerDetails2TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum BuyerDetails2TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ImporterDetails2TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ExporterDetails2TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ManufacturerDetails2TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum UltimateConsigneeDetails2TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum BrokerDetails2TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ImageOptions3TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"invoice")]
    Invoice = 0,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum SellerDetails3TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum BuyerDetails3TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ImporterDetails3TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ExporterDetails3TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum ManufacturerDetails3TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum UltimateConsigneeDetails3TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum BrokerDetails3TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"business")]
    Business = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"direct_consumer")]
    Direct_consumer = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"government")]
    Government = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"private")]
    Private = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Quantity2
{
    /// <summary>
    /// Please enter number of pieces in the line item
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(1, 1000000000)]
    public int Value { get; set; }

    /// <summary>
    /// Please provide correct unit of measurement&lt;BR&gt;                        &lt;BR&gt;Possible values:&lt;BR&gt;
    /// <br/>  BOX Boxes&lt;BR&gt;
    /// <br/>  2GM Centigram&lt;BR&gt;
    /// <br/>  M3 Cubic Meters&lt;BR&gt;
    /// <br/>  DPR Dozen Pairs&lt;BR&gt;
    /// <br/>  DOZ Dozen&lt;BR&gt;
    /// <br/>  PCS Pieces&lt;BR&gt;
    /// <br/>  GM Grams&lt;BR&gt;
    /// <br/>  GRS Gross&lt;BR&gt;
    /// <br/>  KG Kilograms&lt;BR&gt;
    /// <br/>  M Meters&lt;BR&gt;
    /// <br/>  3GM Milligrams&lt;BR&gt;
    /// <br/>  X No Unit Required&lt;BR&gt;
    /// <br/>  NO Number&lt;BR&gt;
    /// <br/>  PRS Pairs&lt;BR&gt;
    /// <br/>  CM2 Square Centimeters&lt;BR&gt;
    /// <br/>  2M2 Square Feet&lt;BR&gt;
    /// <br/>  3M2 Square Inches&lt;BR&gt;
    /// <br/>  M2 Square Meters&lt;BR&gt;
    /// <br/>  4M2 Square Yards&lt;BR&gt;
    /// <br/>  CM Centimeters&lt;BR&gt;
    /// <br/>  CONE Cone&lt;BR&gt;
    /// <br/>  CT Carat&lt;BR&gt;
    /// <br/>  EA Each&lt;BR&gt;
    /// <br/>  LBS Pounds&lt;BR&gt;
    /// <br/>  RILL Rill&lt;BR&gt;
    /// <br/>  ROLL Roll&lt;BR&gt;
    /// <br/>  SET Set&lt;BR&gt;
    /// <br/>  TU Time Unit&lt;BR&gt;
    /// <br/>  KM kilometre&lt;BR&gt;
    /// <br/>  IN inch&lt;BR&gt;
    /// <br/>  FT foot&lt;BR&gt;
    /// <br/>  YD yard&lt;BR&gt;
    /// <br/>  MI mile (statute mile)&lt;BR&gt;
    /// <br/>  LTR litre&lt;BR&gt;
    /// <br/>  MMQ cubic millimetre&lt;BR&gt;
    /// <br/>  CM3 cubic centimetre&lt;BR&gt;
    /// <br/>  DMQ cubic decimetre&lt;BR&gt;
    /// <br/>  MLT millilitre&lt;BR&gt;
    /// <br/>  CLT centilitre&lt;BR&gt;
    /// <br/>  DLT decilitre&lt;BR&gt;
    /// <br/>  INQ cubic inch&lt;BR&gt;
    /// <br/>  FT3 cubic foot&lt;BR&gt;
    /// <br/>  YD3 cubic yard&lt;BR&gt;
    /// <br/>  GLI gallon (UK)&lt;BR&gt;
    /// <br/>  GLL gallon (US)&lt;BR&gt;
    /// <br/>  PT pint (US)&lt;BR&gt;
    /// <br/>  PTI pint (UK)&lt;BR&gt;
    /// <br/>  QTI quart (UK)&lt;BR&gt;
    /// <br/>  PTL liquid pint (US)&lt;BR&gt;
    /// <br/>  QTL liquid quart (US)&lt;BR&gt;
    /// <br/>  PTD dry pint (US)&lt;BR&gt;
    /// <br/>  OZI fluid ounce (UK)&lt;BR&gt;
    /// <br/>  J57 barrel (UK petroleum)&lt;BR&gt;
    /// <br/>  NM3 Normalised cubic metre&lt;BR&gt;
    /// <br/>  SM3 Standard cubic metre&lt;BR&gt;
    /// <br/>  TNE tonne (metric ton)&lt;BR&gt;
    /// <br/>  LB pound&lt;BR&gt;
    /// <br/>  ONZ ounce (avoirdupois)&lt;BR&gt;
    /// <br/>  CEL degree Celsius                              
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unitOfMeasurement", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(8)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Quantity2UnitOfMeasurement UnitOfMeasurement { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CommodityCodes2
{
    /// <summary>
    /// Please provide type of the commodity code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CommodityCodes2TypeCode TypeCode { get; set; }

    /// <summary>
    /// Please provide the commodity code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(18, MinimumLength = 2)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum LineItems2ExportReasonType
{

    [System.Runtime.Serialization.EnumMember(Value = @"permanent")]
    Permanent = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"temporary")]
    Temporary = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"return")]
    Return = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"used_exhibition_goods_to_origin")]
    Used_exhibition_goods_to_origin = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"intercompany_use")]
    Intercompany_use = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"commercial_purpose_or_sale")]
    Commercial_purpose_or_sale = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"personal_belongings_or_personal_use")]
    Personal_belongings_or_personal_use = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"sample")]
    Sample = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"gift")]
    Gift = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"return_to_origin")]
    Return_to_origin = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"warranty_replacement")]
    Warranty_replacement = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"diplomatic_goods")]
    Diplomatic_goods = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"defence_material")]
    Defence_material = 12,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class Weight4
{
    /// <summary>
    /// Please enter the total net weight value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("netValue", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999D)]
    public double NetValue { get; set; }

    /// <summary>
    /// Please enter the total gross weight value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("grossValue", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999D)]
    public double GrossValue { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomerReferences3
{
    /// <summary>
    /// Please provide the line item reference type code. Please refer to the YAML Reference Data Guide PDF file for valid enumeration values.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CustomerReferences3TypeCode TypeCode { get; set; }

    /// <summary>
    /// Please provide the line item reference
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomsDocuments4
{
    /// <summary>
    /// Please provide the line item customs document type code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 1)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CustomsDocuments4TypeCode TypeCode { get; set; }

    /// <summary>
    /// Please provide the line item customs document ID
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class CustomerReferences4
{
    /// <summary>
    /// Please provide the invoice reference type code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 2)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CustomerReferences4TypeCode TypeCode { get; set; }

    /// <summary>
    /// Please provide the invoice reference
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
    public string Value { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class IndicativeCustomsValues2
{
    /// <summary>
    /// Please provide the pre-calculated import customs duties value for the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("importCustomsDutyValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double ImportCustomsDutyValue { get; set; }

    /// <summary>
    /// Please provide the pre-calculated import taxes (VAT/GST) value for the shipment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("importTaxesValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double ImportTaxesValue { get; set; }

    /// <summary>
    /// Please provide pre-calculated total of all line items plus additional charges plus indicativeCustomsValues
    /// </summary>
    [Newtonsoft.Json.JsonProperty("totalWithImportDutiesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, DefaultValueHandling = Newtonsoft.Json.DefaultValueHandling.Ignore, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double TotalWithImportDutiesAndTaxes { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
        set { _additionalProperties = value; }
    }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PreCalculatedTotalValues2
{
    /// <summary>
    /// Please provide the pre-calculated total value of all line items. preCalculatedTotalGoodsValue indicates pre-calculated sum of all Export Line Items’ Subtotal in Export Declaration. This field value will be rendered in Commercial Invoice output and manifest message.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("preCalculatedTotalGoodsValue", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double PreCalculatedTotalGoodsValue { get; set; }

    /// <summary>
    /// Please provide the total value of all line items plus additional charges if any. preCalculatedTotalInvoiceValue indicates pre-calculated sum of all Export Line Items’ Subtotal  amount plus all Other Charges amount.  This field value will be used in rendered Commercial Invoice output, Waybill document and manifest message.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("preCalculatedTotalInvoiceValue", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Range(0D, 999999999999999D)]
    public double PreCalculatedTotalInvoiceValue { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum AdditionalCharges2TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"admin")]
    Admin = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"delivery")]
    Delivery = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"documentation")]
    Documentation = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"expedite")]
    Expedite = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"export")]
    Export = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"freight")]
    Freight = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"fuel_surcharge")]
    Fuel_surcharge = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"logistic")]
    Logistic = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"other")]
    Other = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"packaging")]
    Packaging = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"pickup")]
    Pickup = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"handling")]
    Handling = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"vat")]
    Vat = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"insurance")]
    Insurance = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"reverse_charge")]
    Reverse_charge = 14,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum LicensesTypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"export")]
    Export = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"import")]
    Import = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum CustomsDocuments3TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"972")]
    _972 = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"AHC")]
    AHC = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ALC")]
    ALC = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"ATA")]
    ATA = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ATR")]
    ATR = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"BEX")]
    BEX = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"CHA")]
    CHA = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CHD")]
    CHD = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"CHP")]
    CHP = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"CIT")]
    CIT = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"CIV")]
    CIV = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"CI2")]
    CI2 = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"COO")]
    COO = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CPA")]
    CPA = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"CRL")]
    CRL = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"CSD")]
    CSD = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"DEX")]
    DEX = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"DGD")]
    DGD = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"DLI")]
    DLI = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"DOV")]
    DOV = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"ELP")]
    ELP = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"EU1")]
    EU1 = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"EU2")]
    EU2 = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"EUS")]
    EUS = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"EXL")]
    EXL = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"FMA")]
    FMA = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"HLC")]
    HLC = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"HWB")]
    HWB = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"INV")]
    INV = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"IPA")]
    IPA = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"JLC")]
    JLC = 30,

    [System.Runtime.Serialization.EnumMember(Value = @"LIC")]
    LIC = 31,

    [System.Runtime.Serialization.EnumMember(Value = @"LNP")]
    LNP = 32,

    [System.Runtime.Serialization.EnumMember(Value = @"NID")]
    NID = 33,

    [System.Runtime.Serialization.EnumMember(Value = @"PAS")]
    PAS = 34,

    [System.Runtime.Serialization.EnumMember(Value = @"PFI")]
    PFI = 35,

    [System.Runtime.Serialization.EnumMember(Value = @"PHY")]
    PHY = 36,

    [System.Runtime.Serialization.EnumMember(Value = @"PLI")]
    PLI = 37,

    [System.Runtime.Serialization.EnumMember(Value = @"POA")]
    POA = 38,

    [System.Runtime.Serialization.EnumMember(Value = @"PCH")]
    PCH = 39,

    [System.Runtime.Serialization.EnumMember(Value = @"ROD")]
    ROD = 40,

    [System.Runtime.Serialization.EnumMember(Value = @"T2M")]
    T2M = 41,

    [System.Runtime.Serialization.EnumMember(Value = @"TAD")]
    TAD = 42,

    [System.Runtime.Serialization.EnumMember(Value = @"TCS")]
    TCS = 43,

    [System.Runtime.Serialization.EnumMember(Value = @"VET")]
    VET = 44,

    [System.Runtime.Serialization.EnumMember(Value = @"VEX")]
    VEX = 45,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class RequiredServiceCodes
{
    /// <summary>
    /// required special service code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PriceBreakdown2
{
    /// <summary>
    /// If a breakdown is provided, details can either be; 'TAX',&lt;BR&gt;                              'DISCOUNT'
    /// </summary>
    [Newtonsoft.Json.JsonProperty("priceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PriceType { get; set; }

    /// <summary>
    /// Discount or tax type codes as provided by DHL Express. Example values:&lt;BR&gt;                              For discount;&lt;BR&gt;                              P: promotional&lt;BR&gt;                              S: special
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TypeCode { get; set; }

    /// <summary>
    /// The actual amount of the discount/tax
    /// </summary>
    [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Price { get; set; }

    /// <summary>
    /// Percentage of the discount/tax
    /// </summary>
    [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Rate { get; set; }

    /// <summary>
    /// The base amount of the service charge
    /// </summary>
    [Newtonsoft.Json.JsonProperty("basePrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double BasePrice { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class RequiredServiceCodes2
{
    /// <summary>
    /// required special service code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ServiceCode { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class PriceBreakdown3
{
    /// <summary>
    /// Discount or tax type codes as provided by DHL.&lt;BR&gt;                              Example values;&lt;BR&gt;                              For discount;&lt;BR&gt;                              P: promotional&lt;BR&gt;                              S: special
    /// </summary>
    [Newtonsoft.Json.JsonProperty("priceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PriceType { get; set; }

    /// <summary>
    /// If a breakdown is provided, details can either be; - "TAX",&lt;BR&gt;                              - "DISCOUNT"
    /// </summary>
    [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TypeCode { get; set; }

    /// <summary>
    /// The actual amount of the discount/tax
    /// </summary>
    [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Price { get; set; }

    /// <summary>
    /// Percentage of the discount/tax
    /// </summary>
    [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Rate { get; set; }

    /// <summary>
    /// The base amount of the service charge
    /// </summary>
    [Newtonsoft.Json.JsonProperty("basePrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double BasePrice { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ServiceArea5
{
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code { get; set; }

    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum Quantity2UnitOfMeasurement
{

    [System.Runtime.Serialization.EnumMember(Value = @"BOX")]
    BOX = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"2GM")]
    _2GM = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"M3")]
    M3 = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"DPR")]
    DPR = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"DOZ")]
    DOZ = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"PCS")]
    PCS = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"GM")]
    GM = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"GRS")]
    GRS = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"KG")]
    KG = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"M")]
    M = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"3GM")]
    _3GM = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"X")]
    X = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"NO")]
    NO = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"PRS")]
    PRS = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"CM2")]
    CM2 = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"2M2")]
    _2M2 = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"3M2")]
    _3M2 = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"M2")]
    M2 = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"4M2")]
    _4M2 = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"CM")]
    CM = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"CONE")]
    CONE = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"CT")]
    CT = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"EA")]
    EA = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"LBS")]
    LBS = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"RILL")]
    RILL = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"ROLL")]
    ROLL = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"SET")]
    SET = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"TU")]
    TU = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"KM")]
    KM = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"IN")]
    IN = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"FT")]
    FT = 30,

    [System.Runtime.Serialization.EnumMember(Value = @"YD")]
    YD = 31,

    [System.Runtime.Serialization.EnumMember(Value = @"MI")]
    MI = 32,

    [System.Runtime.Serialization.EnumMember(Value = @"LTR")]
    LTR = 33,

    [System.Runtime.Serialization.EnumMember(Value = @"MMQ")]
    MMQ = 34,

    [System.Runtime.Serialization.EnumMember(Value = @"CM3")]
    CM3 = 35,

    [System.Runtime.Serialization.EnumMember(Value = @"DMQ")]
    DMQ = 36,

    [System.Runtime.Serialization.EnumMember(Value = @"MLT")]
    MLT = 37,

    [System.Runtime.Serialization.EnumMember(Value = @"CLT")]
    CLT = 38,

    [System.Runtime.Serialization.EnumMember(Value = @"DLT")]
    DLT = 39,

    [System.Runtime.Serialization.EnumMember(Value = @"INQ")]
    INQ = 40,

    [System.Runtime.Serialization.EnumMember(Value = @"FT3")]
    FT3 = 41,

    [System.Runtime.Serialization.EnumMember(Value = @"YD3")]
    YD3 = 42,

    [System.Runtime.Serialization.EnumMember(Value = @"GLI")]
    GLI = 43,

    [System.Runtime.Serialization.EnumMember(Value = @"GLL")]
    GLL = 44,

    [System.Runtime.Serialization.EnumMember(Value = @"PT")]
    PT = 45,

    [System.Runtime.Serialization.EnumMember(Value = @"PTI")]
    PTI = 46,

    [System.Runtime.Serialization.EnumMember(Value = @"QTI")]
    QTI = 47,

    [System.Runtime.Serialization.EnumMember(Value = @"PTL")]
    PTL = 48,

    [System.Runtime.Serialization.EnumMember(Value = @"QTL")]
    QTL = 49,

    [System.Runtime.Serialization.EnumMember(Value = @"PTD")]
    PTD = 50,

    [System.Runtime.Serialization.EnumMember(Value = @"OZI")]
    OZI = 51,

    [System.Runtime.Serialization.EnumMember(Value = @"J57")]
    J57 = 52,

    [System.Runtime.Serialization.EnumMember(Value = @"NM3")]
    NM3 = 53,

    [System.Runtime.Serialization.EnumMember(Value = @"SM3")]
    SM3 = 54,

    [System.Runtime.Serialization.EnumMember(Value = @"TNE")]
    TNE = 55,

    [System.Runtime.Serialization.EnumMember(Value = @"LB")]
    LB = 56,

    [System.Runtime.Serialization.EnumMember(Value = @"ONZ")]
    ONZ = 57,

    [System.Runtime.Serialization.EnumMember(Value = @"CEL")]
    CEL = 58,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum CommodityCodes2TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"outbound")]
    Outbound = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"inbound")]
    Inbound = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum CustomerReferences3TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"AFE")]
    AFE = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"BRD")]
    BRD = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"DGC")]
    DGC = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"AAJ")]
    AAJ = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"INB")]
    INB = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"MAK")]
    MAK = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"ALX")]
    ALX = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"PAN")]
    PAN = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"PON")]
    PON = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"ABW")]
    ABW = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"SE")]
    SE = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"SON")]
    SON = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"OID")]
    OID = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"DTC")]
    DTC = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"DTM")]
    DTM = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"DTQ")]
    DTQ = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"DTR")]
    DTR = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"ITR")]
    ITR = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"MID")]
    MID = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"OED")]
    OED = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"OET")]
    OET = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"OOR")]
    OOR = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"SME")]
    SME = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"USM")]
    USM = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"AAM")]
    AAM = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"CFR")]
    CFR = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"DOM")]
    DOM = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"FOR")]
    FOR = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"USG")]
    USG = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"MAT")]
    MAT = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"NLR")]
    NLR = 30,

    [System.Runtime.Serialization.EnumMember(Value = @"DDS")]
    DDS = 31,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum CustomsDocuments4TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"972")]
    _972 = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"AHC")]
    AHC = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"ALC")]
    ALC = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"ATA")]
    ATA = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ATR")]
    ATR = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"BEX")]
    BEX = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"CHA")]
    CHA = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"CHD")]
    CHD = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"CHP")]
    CHP = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"CIT")]
    CIT = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"CIV")]
    CIV = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"CI2")]
    CI2 = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"COO")]
    COO = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"CPA")]
    CPA = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"CRL")]
    CRL = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"CSD")]
    CSD = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"DEX")]
    DEX = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"DGD")]
    DGD = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"DLI")]
    DLI = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"DOV")]
    DOV = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"ELP")]
    ELP = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"EU1")]
    EU1 = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"EU2")]
    EU2 = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"EUS")]
    EUS = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"EXL")]
    EXL = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"FMA")]
    FMA = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"HLC")]
    HLC = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"HWB")]
    HWB = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"INV")]
    INV = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"IPA")]
    IPA = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"JLC")]
    JLC = 30,

    [System.Runtime.Serialization.EnumMember(Value = @"LIC")]
    LIC = 31,

    [System.Runtime.Serialization.EnumMember(Value = @"LNP")]
    LNP = 32,

    [System.Runtime.Serialization.EnumMember(Value = @"NID")]
    NID = 33,

    [System.Runtime.Serialization.EnumMember(Value = @"PAS")]
    PAS = 34,

    [System.Runtime.Serialization.EnumMember(Value = @"PFI")]
    PFI = 35,

    [System.Runtime.Serialization.EnumMember(Value = @"PHY")]
    PHY = 36,

    [System.Runtime.Serialization.EnumMember(Value = @"PLI")]
    PLI = 37,

    [System.Runtime.Serialization.EnumMember(Value = @"POA")]
    POA = 38,

    [System.Runtime.Serialization.EnumMember(Value = @"PCH")]
    PCH = 39,

    [System.Runtime.Serialization.EnumMember(Value = @"ROD")]
    ROD = 40,

    [System.Runtime.Serialization.EnumMember(Value = @"T2M")]
    T2M = 41,

    [System.Runtime.Serialization.EnumMember(Value = @"TAD")]
    TAD = 42,

    [System.Runtime.Serialization.EnumMember(Value = @"TCS")]
    TCS = 43,

    [System.Runtime.Serialization.EnumMember(Value = @"VET")]
    VET = 44,

    [System.Runtime.Serialization.EnumMember(Value = @"VEX")]
    VEX = 45,

}
public enum PrinterDPI
{
    DPI200 = 200,
    DPI300 = 300
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public enum CustomerReferences4TypeCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"ACL")]
    ACL = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"CID")]
    CID = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"CN")]
    CN = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"CU")]
    CU = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"ITN")]
    ITN = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"UCN")]
    UCN = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"MRN")]
    MRN = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"OID")]
    OID = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"PON")]
    PON = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"RMA")]
    RMA = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"AAM")]
    AAM = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"ABT")]
    ABT = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"ADA")]
    ADA = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"AES")]
    AES = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"AFD")]
    AFD = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"ANT")]
    ANT = 15,

    [System.Runtime.Serialization.EnumMember(Value = @"BKN")]
    BKN = 16,

    [System.Runtime.Serialization.EnumMember(Value = @"BOL")]
    BOL = 17,

    [System.Runtime.Serialization.EnumMember(Value = @"CDN")]
    CDN = 18,

    [System.Runtime.Serialization.EnumMember(Value = @"COD")]
    COD = 19,

    [System.Runtime.Serialization.EnumMember(Value = @"DSC")]
    DSC = 20,

    [System.Runtime.Serialization.EnumMember(Value = @"FF")]
    FF = 21,

    [System.Runtime.Serialization.EnumMember(Value = @"FN")]
    FN = 22,

    [System.Runtime.Serialization.EnumMember(Value = @"FTR")]
    FTR = 23,

    [System.Runtime.Serialization.EnumMember(Value = @"HWB")]
    HWB = 24,

    [System.Runtime.Serialization.EnumMember(Value = @"IBC")]
    IBC = 25,

    [System.Runtime.Serialization.EnumMember(Value = @"IPP")]
    IPP = 26,

    [System.Runtime.Serialization.EnumMember(Value = @"LLR")]
    LLR = 27,

    [System.Runtime.Serialization.EnumMember(Value = @"MAB")]
    MAB = 28,

    [System.Runtime.Serialization.EnumMember(Value = @"MWB")]
    MWB = 29,

    [System.Runtime.Serialization.EnumMember(Value = @"OBC")]
    OBC = 30,

    [System.Runtime.Serialization.EnumMember(Value = @"PD")]
    PD = 31,

    [System.Runtime.Serialization.EnumMember(Value = @"PRN")]
    PRN = 32,

    [System.Runtime.Serialization.EnumMember(Value = @"RTL")]
    RTL = 33,

    [System.Runtime.Serialization.EnumMember(Value = @"SID")]
    SID = 34,

    [System.Runtime.Serialization.EnumMember(Value = @"SS")]
    SS = 35,

    [System.Runtime.Serialization.EnumMember(Value = @"SWN")]
    SWN = 36,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
{
    public DateFormatConverter()
    {
        DateTimeFormat = "yyyy-MM-dd";
    }
}



[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ApiException : System.Exception
{
    public int StatusCode { get; private set; }

    public string Response { get; private set; }

    public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

    public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
        : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
    {
        StatusCode = statusCode;
        Response = response;
        Headers = headers;
    }

    public override string ToString()
    {
        return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
    }
}

[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
public partial class ApiException<TResult> : ApiException
{
    public TResult Result { get; private set; }

    public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
        : base(message, statusCode, response, headers, innerException)
    {
        Result = result;
    }
}
#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603
