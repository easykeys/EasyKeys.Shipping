using System.IO.Compression;

using EasyKeys.Shipping.FedEx.Abstractions.Options;

using Microsoft.Extensions.Options;

using Newtonsoft.Json;

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace EasyKeys.Shipping.FedEx.Abstractions.OpenApis.V1.AddressValidation
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressValidationApi
    {
        private string _baseUrl = "https://apis-sandbox.fedex.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AddressValidationApi(System.Net.Http.HttpClient httpClient, IOptionsMonitor<FedExApiOptions> options)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
            _baseUrl = options.CurrentValue.Url;
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Validate Address
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get address resolution details. These details are the outcome of validation andddd resolution of the input address. An address is stated assss resolved when the input address matches the known reference data...&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AdvcResponseVO> Validate_AddressAsync(Full_Schema_Validate_Address body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return Validate_AddressAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Validate Address
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get address resolution details. These details are the outcome of validation andddd resolution of the input address. An address is stated assss resolved when the input address matches the known reference data...&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AdvcResponseVO> Validate_AddressAsync(Full_Schema_Validate_Address body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/address/v1/addresses/resolve");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AdvcResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                            }
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO401>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                            }
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                            throw new ApiException<ErrorResponseVO401>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO403>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                            }
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                            throw new ApiException<ErrorResponseVO403>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO404>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                            }
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                            throw new ApiException<ErrorResponseVO404>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO500>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                            }
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                            throw new ApiException<ErrorResponseVO500>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO503>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null!);
                            }
                            throw new ApiException<ErrorResponseVO503>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null!);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_!, headers_, null!);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            if (response.Content.Headers.ContentEncoding.Contains("gzip"))
            {
                try
                {
                    using var responseStream = await response.Content.ReadAsStreamAsync();
                    using var decompressionStream = new GZipStream(responseStream, CompressionMode.Decompress);
                    using var decompressedStream = new StreamReader(decompressionStream);
                    var jsonString = await decompressedStream.ReadToEndAsync();

                    var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                    var jsonObject = serializer.Deserialize<T>(new JsonTextReader(new StringReader(jsonString)));

                    return new ObjectResponseResult<T>(jsonObject, jsonString);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }

            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
#pragma warning disable CS8604 // Possible null reference argument.
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
#pragma warning restore CS8604 // Possible null reference argument.
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Wrapper class for AddressResolutionOutputVO. It holds transactionId and output.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdvcResponseVO
    {
        /// <summary>
        /// Unique identifier returned in the reply and helps you match the request to the reply.&lt;br&gt;Example: XXX_ORDERXXXX789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt;&lt;br&gt; Example: XXX_ORDERXXXX789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseProcessOutputVO? Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the resolved address parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProcessOutputVO
    {
        /// <summary>
        /// Indicates the list of resolved addresses. The detailed resolved address includes city, state, postal information, and resolution method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolvedAddresses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResolvedAddress>? ResolvedAddresses { get; set; }

        /// <summary>
        /// Indicates API Alerts includes alert type, alert code, and alert message that is received when the address is resolved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert>? Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResolvedAddress
    {
        /// <summary>
        /// Indicates the resolved street address lines.&lt;br&gt;Example: [\"7372 PARKRIDGE BLVD\", \"APT 286, 2903 sprank\"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLinesToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StreetLinesToken { get; set; }

        /// <summary>
        /// This is resolved city name.&lt;br&gt; Example: IRVING
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; }

        /// <summary>
        /// This is resolved state or province code.&lt;br&gt;Example: TX&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;Click here to see State Or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StateOrProvinceCode { get; set; }

        /// <summary>
        /// This is resolved ISO alpha 2 country code.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Returns messages pertaining to the resolved address indicating if any additional information is required.&lt;br&gt;&lt;br&gt;Following are informational code and messages with respect to the results:&lt;ul&gt;&lt;li&gt;&lt;i&gt;INVALID.SUITE.NUMBER&lt;/i&gt; &amp;ndash; Invalid or missing Apartment/Suite&lt;/li&gt;&lt;li&gt;&lt;i&gt;SUITE.NUMBER.REQUIRED&lt;/i&gt; &amp;ndash; Invalid or missing Apartment/Suite&lt;/li&gt;&lt;li&gt;&lt;i&gt;PARTIAL.STREET.MATCH&lt;/i&gt; &amp;ndash; A street address is required for delivery. The entered address is a street number range.&lt;/li&gt;&lt;li&gt;&lt;i&gt;MISSING.OR.AMBIGUOUS.DIRECTIONAL&lt;/i&gt; &amp;ndash; Invalid or missing address directional.&lt;/li&gt;&lt;li&gt;&lt;i&gt;INTERPOLATED.STREET.ADDRESS&lt;/i&gt; &amp;ndash; Unable to confirm exact street number for the entered street name. The address falls within a valid range for the street name.&lt;/li&gt;&lt;li&gt;&lt;i&gt;RRHC.CONVERSION&lt;/i&gt; &amp;ndash; A street address is required for delivery. The address has been converted from a rural route.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerMessage>? CustomerMessage { get; set; }

        /// <summary>
        /// This is the resolved city name with a token. The token is an indication to the changes made.&lt;br&gt; Examples: [TOK-1X3256]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResolutionToken>? CityToken { get; set; }

        /// <summary>
        /// This is the resolved postal code with a token. The token is an indication to the changes made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCodeToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResolutionToken? PostalCodeToken { get; set; }

        [Newtonsoft.Json.JsonProperty("parsedPostalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParsedPostalCode? ParsedPostalCode { get; set; }

        /// <summary>
        /// This is the classification type of a FedEx address.&lt;br&gt;Valid values:&lt;ul&gt;&lt;li&gt;BUSINESS&lt;/li&gt;&lt;li&gt;RESIDENTIAL&lt;/li&gt;&lt;li&gt;MIXED (If it is a multi-tenant based address and contains both business and residential units.)&lt;/li&gt;&lt;li&gt;UNKNOWN (If just a zip code is provided, Address Validation Service returns 'unknown' for the business/residential classification.)&lt;/li&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResolvedAddressClassification Classification { get; set; }

        /// <summary>
        /// Indicates if the resolved address is a P.O. Box.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postOfficeBox", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PostOfficeBox { get; set; }

        /// <summary>
        /// Indicates the presence of a delivery point such as a mailbox. Provided only for US addresses that are standardized against Postal Data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("normalizedStatusNameDPV", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool NormalizedStatusNameDPV { get; set; }

        /// <summary>
        /// Indicates the source from which the standardized address is matched. &lt;br&gt; Example: Postal or Map.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("standardizedStatusNameMatchSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StandardizedStatusNameMatchSource { get; set; }

        /// <summary>
        /// Indicates the resolution method used to resolve the address. &lt;br&gt;Valid values: &lt;ul&gt;&lt;li&gt;USPS_VALIDATE&lt;/li&gt;&lt;li&gt;CA_VALIDATE&lt;/li&gt;&lt;li&gt;GENERIC_VALIDATE&lt;/li&gt;&lt;li&gt;NAVTEQ_GEO_VALIDATE&lt;/li&gt;&lt;li&gt;TELEATLAS_GEO_VALIDATE&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolutionMethodName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ResolutionMethodName { get; set; }

        /// <summary>
        /// Indicates if the resolved address is a Rural Route or Highway Contract (US only). It returns true if it is rural route. 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruralRouteHighwayContract", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RuralRouteHighwayContract { get; set; }

        /// <summary>
        /// Indicates the mail service is for those without permanent address. The mails for this address are held at a post office. Only applies to addresses that can be standardized against Postal Data. Not provided for US Geo Validated addresses. &lt;br&gt;Note: Only returned when the address cannot be resolved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generalDelivery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GeneralDelivery { get; set; }

        /// <summary>
        /// These are the  key-value pair as additional information returned along with the address processed by the system. These attribute will list what is working and what is not on the input address. For More information, look in to Chapter Address Attributes in the Overview.&lt;br&gt;&lt;a onclick='loadDocReference("addressattributes")'&gt;Click here to see Address Attributes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Attributes? Attributes { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParsedPersonName
    {
        /// <summary>
        /// First Name &lt;br&gt;Example: Edwin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? FirstName { get; set; }

        /// <summary>
        /// Middle Name &lt;br&gt;Example: Thomas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MiddleName { get; set; }

        /// <summary>
        /// Last Name &lt;br&gt;Example: Luies
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? LastName { get; set; }

        /// <summary>
        /// Suffix &lt;br&gt;Example: Jr
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Suffix { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// EMailDetail Model
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EMailDetail
    {
        /// <summary>
        /// Format Type of email notification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailNotificationFormatType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EMailDetailEmailNotificationFormatType EmailNotificationFormatType { get; set; }

        /// <summary>
        /// Email address of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Address { get; set; }

        /// <summary>
        /// Email Permission Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EMailDetailPermissions Permissions { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// SocialMediaDetail Model
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SocialMediaDetail
    {
        /// <summary>
        /// Specifies additional attributes about this contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Attributes { get; set; }

        /// <summary>
        /// Specifies Platform Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("platformId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PlatformId { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// PhoneNumberDetail Model
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PhoneNumberDetail
    {
        /// <summary>
        /// Phone Number details of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PhoneNumber Number { get; set; } = new PhoneNumber();

        /// <summary>
        /// Shows the Phone Permission Status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhoneNumberDetailPermissions Permissions { get; set; }

        /// <summary>
        /// Specifies the Phone Usage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhoneNumberDetailUsage Usage { get; set; }

        /// <summary>
        /// Phone Number Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhoneNumberDetailType Type { get; set; }

        /// <summary>
        /// Phone Notification Format Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNotificationFormatType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhoneNumberDetailPhoneNotificationFormatType PhoneNotificationFormatType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// PhoneNumber Model
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PhoneNumber
    {
        /// <summary>
        /// Area-Code of given area
        /// </summary>
        [Newtonsoft.Json.JsonProperty("areaCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? AreaCode { get; set; }

        /// <summary>
        /// Extension of the phone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Extension { get; set; }

        /// <summary>
        /// The two-letter code used to identify a country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Personal Identification Number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalIdentificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonalIdentificationNumber { get; set; }

        /// <summary>
        /// Local Number of the person
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? LocalNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// CompanyName Model
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyName
    {
        /// <summary>
        /// Division of the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("division", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Division { get; set; }

        /// <summary>
        /// Unique company code for the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyCd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CompanyCd { get; set; }

        /// <summary>
        /// Name of the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? Name { get; set; }

        /// <summary>
        /// Departments of the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Department { get; set; }

        /// <summary>
        /// storeId for the company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StoreId { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Returns messages pertaining to the resolved address indicating if any additional information is required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerMessage
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the resolved attribute with a token indicating if it was changed or not.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResolutionToken
    {
        /// <summary>
        /// Indicates if it has changed from the input address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Changed { get; set; }

        /// <summary>
        /// Indicates the changed value.&lt;br&gt; Example: SAN JUAN
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The postal code specified in a form that is supported by USPS as base, secondary and tertiary.&lt;ul&gt;&lt;li&gt;Base&lt;/li&gt;&lt;li&gt;AddOn&lt;/li&gt;&lt;li&gt;DeliveryPoint&lt;/li&gt;&lt;/ul&gt;Example: 75063-8659
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParsedPostalCode
    {
        /// <summary>
        /// Indicates the base.&lt;br&gt; Example: 00926
        /// </summary>
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Base { get; set; }

        /// <summary>
        /// Indicates the secondary value in Postal Code.&lt;br&gt; Example: 2716
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddOn { get; set; }

        /// <summary>
        /// Indicates the tertiary value in Postal Code.&lt;br&gt; Example: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryPoint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeliveryPoint { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the API alerts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Alert
    {
        /// <summary>
        /// Indicates the API alert code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Indicates the API alert message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }

        /// <summary>
        /// Indicates the API alert type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alertType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertType AlertType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO
    {
        /// <summary>
        /// Unique identifier returned in the reply and helps you match the request to the reply.&lt;br&gt;Example: XXX_ORDERXXXX789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        /// <summary>
        /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files, directories and user accounts. This includes code, message and parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: STANDARDIZED.ADDRESS.NOTFOUND
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: Standardized address is not found.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of parameters which indicates the properties of the alert message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parameter
    {
        /// <summary>
        /// Identifies the error option to be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        /// <summary>
        /// Indicates the value associated with the key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Key { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO401
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files, directories and user accounts. This includes code, message and parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError401>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError401
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: NOT.AUTHORIZED.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies list of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: Access token expired. Please modify your request and try again.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO403
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files, directories and user accounts. This includes code, message and parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError403>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError403
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: FORBIDDEN.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies list of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: We could not authorize your credentials. Please check your permissions and try again
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO404
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files, directories and user accounts. This includes code, message and parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError404>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError404
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: NOT.FOUND.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies list of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: The resource you requested is no longer available. Please modify your request and try again.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO500
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        /// <summary>
        /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files, directories and user accounts. This includes code, message and parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError500>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError500
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: INTERNAL.SERVER.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies list of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: We encountered an unexpected error and are working to resolve the issue. We apologize for any inconvenience. Please check back at a later time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO503
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError503>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError503
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: SERVICE.UNAVAILABLE.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Indicates error parameters includes parameter key/value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: The service is currently unavailable and we are working to resolve the issue. We apologize for any inconvenience. Please check back at a later time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request elements for address resolution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Full_Schema_Validate_Address
    {
        /// <summary>
        /// This can be used to request the characteristics of an address had at a particular time in history. This defaults to current date time (of the Address Validation System). This is useful because the AddressValidation database is dynamic and stores historical data. Characteristics such as Business/Residential indicator may change over time.&lt;br&gt; Example: 2019-09-06
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inEffectAsOfTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InEffectAsOfTimestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("validateAddressControlParameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressResolutionControlParameters? ValidateAddressControlParameters { get; set; }

        /// <summary>
        /// Indicate the address to be validated and resolved. This includes the address details, such as streetline, state or province code, country code and postal code. &lt;br&gt;&lt;br&gt;&lt;i&gt;Note: Up to 100 of these can be submitted in a single request.&lt;/i&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressesToValidate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ResolveContactAndAddress> AddressesToValidate { get; set; } = new System.Collections.ObjectModel.Collection<ResolveContactAndAddress>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the parameters applied to validate the address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressResolutionControlParameters
    {
        /// <summary>
        /// Use this to request detailed information of the address components once the validation is complete. The details specify the changes made to each address component to resolve the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeResolutionTokens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeResolutionTokens { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the address details of a location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResolveContactAndAddress
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        public Address? Address { get; set; }

        /// <summary>
        /// Client Reference Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientReferenceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ClientReferenceId { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is the Address in detail to be resolved.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// Indicate the combination of number, street name. etc. &lt;br&gt;Example: ["7372 PARKRIDGE BLVD", "APT 286, 2903 sprank"].&lt;br&gt;&lt;br&gt;Note:&lt;ul&gt;&lt;li&gt;At least one line is required for a valid physical address; empty lines should not be included.&lt;/li&gt;&lt;li&gt;Maximum up to three lines &amp; no error check if entered more than this limit.&lt;/li&gt;&lt;li&gt;Recommended limit per line is 35 characters.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> StreetLines { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Indicate the name of city, town, etc.&lt;br&gt;&lt;br&gt;Note: City is mandatory, When postalcode is not provided and includeResolutionTokens value is true in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? City { get; set; }

        /// <summary>
        /// Indicate the State or Province codes. The Format and presence of this field may vary depending on the country.&lt;br&gt;Example: TX&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt; Click here to see State Or Province Code&lt;/a&gt;. Maximum length is 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? StateOrProvinceCode { get; set; }

        /// <summary>
        /// Indicate the Postal Code which is an identification code of a region (usually small) for easier and accurate mail/package delivery. The format and presence of this field may vary depending on the country.&lt;br&gt; Example: 75063-8659&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;Click here to see Postal Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object? PostalCode { get; set; }

        /// <summary>
        /// Specify the ISO Alpha2 code of the country.&lt;br&gt;Example: US &lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address_Validation_Canada
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address_Validation_US
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address_Validation_for_Germany
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address_Validation_for_Italy
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address_Validation_for_UK
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResolvedAddressClassification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MIXED")]
        MIXED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RESIDENTIAL")]
        RESIDENTIAL = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attributes
    {
        /// <summary>
        /// true indicates the input address is a POBox.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("POBox", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool POBox { get; set; }

        /// <summary>
        /// True indicates a POBox only postal code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("POBoxOnlyZIP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool POBoxOnlyZIP { get; set; }

        /// <summary>
        /// True indicates when the address comes under a new ZIP code that did not exists previously.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SplitZip", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SplitZip { get; set; }

        /// <summary>
        /// True indicates the resolved address includes a suite number, but it was missing in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SuiteRequiredButMissing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SuiteRequiredButMissing { get; set; }

        /// <summary>
        /// True indicates an invalid suite number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InvalidSuiteNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool InvalidSuiteNumber { get; set; }

        /// <summary>
        /// Type of input information (Currently only option is RAW_ADDRESS).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ResolutionInput", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ResolutionInput { get; set; }

        /// <summary>
        /// True indicates the postal delivery address is valid delivery point.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DPV", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DPV { get; set; }

        /// <summary>
        /// Indicates the type of resolution method utilized to resolve the address.  Valid Values:  USPS_VALIDATE (US postal), NAVTEQ_GEO_VALIDATE or RELEATLAS_GEO_VALIDATED (US geo/map validated), CA_VALIDATE (Canada postal), GENERIC_VALIADTE (other validation).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ResolutionMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ResolutionMethod { get; set; }

        /// <summary>
        /// Month and year of the reference data that was used to identify the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DataVintage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DataVintage { get; set; }

        /// <summary>
        /// Indicates 'Postal' or 'Map' date was used to match the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MatchSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MatchSource { get; set; }

        /// <summary>
        /// True indicates the country is supported by the Address Validation service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CountrySupported", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CountrySupported { get; set; }

        /// <summary>
        /// True indicates the address is in a valid format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ValidlyFormed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ValidlyFormed { get; set; }

        /// <summary>
        /// True indicates the address matches to a record in the address validation repository.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Matched", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Matched { get; set; }

        /// <summary>
        /// True indicates the address was successfully resolved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Resolved", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Resolved { get; set; }

        /// <summary>
        /// True indicates the address was inserted into the Address data repository.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Inserted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Inserted { get; set; }

        /// <summary>
        /// True indicates that an input address was resolved to a standardized address for the base address of a multi-unit building. False indicates that the address was not resolved to a standardized address for the base address of a multi-unit building.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MultiUnitBase", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool MultiUnitBase { get; set; }

        /// <summary>
        /// True indicates the input address was resolved to a standardized address based upon a Zip-11 postal code match. This is the highest level of postal code validation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ZIP11Match", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ZIP11Match { get; set; }

        /// <summary>
        /// True indicates that the input address was resolved to a standardized address based upon at least a ZIP+4 match, for example 80003-5581.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ZIP4Match", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ZIP4Match { get; set; }

        /// <summary>
        /// True indicates that the postal code of the address is unique for a specific postal customer address. The ZIP may apply to a single unit or floor within a building, to an entire building, or to an institution or corporate campus.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UniqueZIP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UniqueZIP { get; set; }

        /// <summary>
        /// True indicates that the house number and street name were validated against reference data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StreetAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool StreetAddress { get; set; }

        /// <summary>
        /// True indicates a Rural Route conversion was applied to the address in order to process it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RRConversion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RRConversion { get; set; }

        /// <summary>
        /// True indicates address contains multiple units.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ValidMultiUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ValidMultiUnit { get; set; }

        /// <summary>
        /// valid values:&lt;br&gt;RAW - address country not supported.&lt;br&gt;NORMALIZED - address country supported, but unable to match the address against reference data.&lt;br&gt;STANDARDIZED - address service was able to successfully match the address against reference data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AddressType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressType { get; set; }

        /// <summary>
        /// Indicates the depth/precision of the address.  MULTI_TENANT_UNIT indicates that the address has valid secondary information.&lt;br&gt;MULTI_TENANT_BASE indicates that the address is a valid multi tentant location but secondary information either was not provided or could not be validated.&lt;br&gt;PO_BOX indicates that the local postal authority services the address through a PO Box.&lt;br&gt;UNIQUE_ZIP indicates that the address could be validated to the postal code level and that postal code is a unique zip for the USPS.&lt;br&gt;STREET_ADDRESS / Street indicates that the location is not a valid multi tenant location.&lt;br&gt;StreetBuilding indicates that the address was validated to a building name that is in the reference data.&lt;br&gt;StreetOrganization indicates that the address was validated to an organization name that is in the reference data.&lt;br&gt;StreetName indicates that the address was validated to the street name level in reference data and the house number (if provided) could not be validated.valid values:&lt;br&gt;MULTI_TENANT_UNIT- address consists of multiple units, some could be BUSINESS, some could be MIXED.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AddressPrecision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressPrecision { get; set; }

        /// <summary>
        /// True indicates the address requested has multiple matches available, usually due to a simPle difference such as a leading directional.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MultipleMatches", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool MultipleMatches { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EMailDetailEmailNotificationFormatType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SMS_TEXT_MESSAGE")]
        SMS_TEXT_MESSAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HTML")]
        HTML = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EMailDetailPermissions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GRANT")]
        GRANT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DENY")]
        DENY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PhoneNumberDetailPermissions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GRANT")]
        GRANT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DENY")]
        DENY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PhoneNumberDetailUsage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PRIMARY")]
        PRIMARY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SECONDARY")]
        SECONDARY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PhoneNumberDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAX")]
        FAX = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME")]
        HOME = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MOBILE")]
        MOBILE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PAGER")]
        PAGER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"WORK")]
        WORK = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PhoneNumberDetailPhoneNotificationFormatType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SMS_TEXT_MESSAGE")]
        SMS_TEXT_MESSAGE = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlertType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOTE")]
        NOTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 1,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response ?? string.Empty;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }
}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603
