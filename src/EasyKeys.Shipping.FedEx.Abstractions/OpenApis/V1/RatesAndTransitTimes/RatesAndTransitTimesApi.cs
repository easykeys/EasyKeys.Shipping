using System.IO;
using System.IO.Compression;

using EasyKeys.Shipping.FedEx.Abstractions.Options;

using Microsoft.Extensions.Options;

using Newtonsoft.Json;

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace EasyKeys.Shipping.FedEx.Abstractions.OpenApis.V1.RatesAndTransitTimes
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RatesAndTransientTimesApi
    {
        private string _baseUrl = "https://apis-sandbox.fedex.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public RatesAndTransientTimesApi(System.Net.Http.HttpClient httpClient, IOptionsMonitor<FedExApiOptions> options)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
            _baseUrl = options.CurrentValue.Url;
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Rate and Transit times V1
        /// </summary>
        /// <remarks>
        /// This endpoint provides the ability to retrieve rate quotes and optionalll transit information. The rate is calculated based on the origin and destination of the shipment. Additional information such as carrier code, service type, or service option can be used to filter the results. If carrier code is provided, the response includes the rate quotes for the specific transportation carrier. This endpoint provides the rates for FedEx Ground and FedEx Express and does not offer rates for FedEx Freight.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RatcResponseVO> Rate_and_Transit_timesAsync(Full_Schema_Quote_Rate body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return Rate_and_Transit_timesAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Rate and Transit times V1
        /// </summary>
        /// <remarks>
        /// This endpoint provides the ability to retrieve rate quotes and optionalll transit information. The rate is calculated based on the origin and destination of the shipment. Additional information such as carrier code, service type, or service option can be used to filter the results. If carrier code is provided, the response includes the rate quotes for the specific transportation carrier. This endpoint provides the rates for FedEx Ground and FedEx Express and does not offer rates for FedEx Freight.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RatcResponseVO> Rate_and_Transit_timesAsync(Full_Schema_Quote_Rate body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rate/v1/rates/quotes");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RatcResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                            }
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO401>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                            }
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                            throw new ApiException<ErrorResponseVO401>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO403>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                            }
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                            throw new ApiException<ErrorResponseVO403>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO404>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                            }
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                            throw new ApiException<ErrorResponseVO404>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO500>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                            }
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                            throw new ApiException<ErrorResponseVO500>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO503>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                            }
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                            throw new ApiException<ErrorResponseVO503>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
#pragma warning disable CS8604 // Possible null reference argument.
#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
#pragma warning restore CS8604 // Possible null reference argument.
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
#pragma warning disable CS8604 // Possible null reference argument.
                return new ObjectResponseResult<T>(default(T), string.Empty);
#pragma warning restore CS8604 // Possible null reference argument.
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
#pragma warning disable CS8604 // Possible null reference argument.
                    return new ObjectResponseResult<T>(typedBody, responseText);
#pragma warning restore CS8604 // Possible null reference argument.
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            if (response.Content.Headers.ContentEncoding.Contains("gzip"))
            {
                try
                {
                    using var responseStream = await response.Content.ReadAsStreamAsync();
                    using var decompressionStream = new GZipStream(responseStream, CompressionMode.Decompress);
                    using var decompressedStream = new StreamReader(decompressionStream);
                    var jsonString = await decompressedStream.ReadToEndAsync();
                    var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                    using var jsonReader = new JsonTextReader(decompressedStream);
                    var errorResponse = serializer.Deserialize<T>(jsonReader);
#pragma warning disable CS8604 // Possible null reference argument.
                    return new ObjectResponseResult<T>(errorResponse, jsonString);
#pragma warning restore CS8604 // Possible null reference argument.
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
#pragma warning disable CS8604 // Possible null reference argument.
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
#pragma warning restore CS8604 // Possible null reference argument.
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// This is a wrapper class for outputVO.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RatcResponseVO
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element has a unique identifier added in your request, helps you match the request to the reply.&lt;br&gt;Example: XXXX_XXX123XXXXX
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseProcessOutputVO? Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is the response object for a rate quote request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProcessOutputVO
    {
        /// <summary>
        /// This object will hold the rate and shipment data returned for a request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateReplyDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RateReplyDetail>? RateReplyDetails { get; set; }

        /// <summary>
        /// The date on which the rate is quoted.&lt;br&gt; Example: 2019-09-18
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quoteDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? QuoteDate { get; set; }

        /// <summary>
        /// Specifies the encoded form of the rate. &lt;br&gt; Example: false
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encoded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Encoded { get; set; }

        /// <summary>
        /// The alert code, alert type, and alert message obtained when a rate quote is requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert>? Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This objcet lists the rate data by service. If a service was specified in the request, there will be a single entry; if service was omitted in the request, there will be a separate entry in this for each service being compared.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateReplyDetail
    {
        /// <summary>
        /// This is the service type associated with this rate (i.e. Priority Overnight, Home Delivery, etc.)&lt;br&gt;For Ground/SmartPost this will be a direct copy of the service specified in the request. For domestic Express, the service may have been bumped, so it may not match the value specified on the request. For International Express the service may be bumped and not mapped.&lt;br&gt;Example: FEDEX_GROUND&lt;br&gt;&lt;a onclick='loadDocReference("servicetypes")'&gt;Click here to see Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceType { get; set; }

        /// <summary>
        /// This is the service name associated with this rate. &lt;br&gt; Example: FedEx Ground
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceName { get; set; }

        /// <summary>
        /// This is the Packaging type. For Ground/SmartPost,it  will always be YOUR_PACKAGING. For domestic Express, the packaging may have been bumped so it may not match the value specified on the request. For International Express the packaging may be bumped and not mapped.&lt;br&gt;&lt;a onclick='loadDocReference("packagetypes")'&gt;Click here to see Package Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packagingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PackagingType { get; set; }

        /// <summary>
        /// These are messages concerning the ability to provide an accurate delivery commitment on an International commit quote. These could be providing information about why a commitment could not be returned or a successful message&lt;br&gt;Example:&lt;br&gt;&lt;ul&gt;&lt;li&gt;REQUEST_COMPLETED&lt;br&gt;Request completed successfully&lt;/li&gt;&lt;li&gt;SERVICE.TYPE.INTERNATIONAL.MESSAGE:&lt;br&gt;Rate does not include duties &amp; taxes, clearance entry fees or other import fees. The payor of duties/taxes/fees will be responsible for any applicable Clearance Entry Fees.&lt;/li&gt;&lt;li&gt;NATIONAL.HOLIDAY.OBSERVED:&lt;br&gt;National Holiday Observed on Ship Date.&lt;/li&gt;&lt;li&gt;INCONSISTENT.COMMODITY.DESCRIPTION:&lt;br&gt;The description and harmonized code for the specified commodity are not consistent.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerMessage>? CustomerMessages { get; set; }

        /// <summary>
        /// This object provides the shipment and package rating data in a rate request reply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratedShipmentDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RatedShipmentDetail>? RatedShipmentDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("operationalDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperationalDetail? OperationalDetail { get; set; }

        /// <summary>
        /// Indicates the signature Option for this service. &lt;br&gt; Example: SERVICE_DEFAULT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signatureOptionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SignatureOptionType { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceDescription? ServiceDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("brokerDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BrokerDetail? BrokerDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("commit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Commit? Commit { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceSubOptionDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceSubOptionDetail? ServiceSubOptionDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This the Customer Message returned in the reply.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerMessage
    {
        /// <summary>
        /// This is a message code.&lt;br&gt; Example:SERVICE.TYPE.INTERNATIONAL.MESSAGE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// This is a message description.&lt;br&gt; Example: Rate does not include duties &amp; taxes, clearance entry fees or other import fees. The payor of duties/taxes/fees will be responsible for any applicable Clearance Entry Fees
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This object provides the shipment and package rating data in a rate request reply.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RatedShipmentDetail
    {
        /// <summary>
        /// Indicates the rate type used for this rate data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RatedShipmentDetailRateType RateType { get; set; }

        /// <summary>
        /// Indicates the weight type used for the rate.'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratedWeightMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RatedShipmentDetailRatedWeightMethod RatedWeightMethod { get; set; }

        /// <summary>
        /// This is the total amount of the duties and taxes plus the total ancillary fees and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDutiesTaxesAndFees", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalDutiesTaxesAndFees { get; set; }

        /// <summary>
        /// This is the total discount.&lt;br&gt;&lt;a onclick='loadDocReference("discounts")'&gt;Click here to see Discounts&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalDiscounts { get; set; }

        /// <summary>
        /// The total of shipment/package Duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDutiesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalDutiesAndTaxes { get; set; }

        [Newtonsoft.Json.JsonProperty("variableHandlingCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VariableHandlingCharges? VariableHandlingCharges { get; set; }

        /// <summary>
        /// These are the estimation and duty  charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("edtCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EdtCharge>? EdtCharges { get; set; }

        /// <summary>
        /// Indicates the shipment-level fees and taxes that are not based on transportation charges or commodity-level estimated duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAncillaryFeesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalAncillaryFeesAndTaxes { get; set; }

        /// <summary>
        /// These are the package-level data for this rate type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratedPackages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RatedPackageDetail>? RatedPackages { get; set; }

        /// <summary>
        /// This shipment's totalNetFedExChargeList, which is totalNetFreight plus totalSurcharges (not including totalTaxes).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetFedExCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetFedExCharge { get; set; }

        /// <summary>
        /// Indicates the unique identifier for a specific rate quotation.&lt;br&gt; Example: XX1123XX
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quoteNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? QuoteNumber { get; set; }

        /// <summary>
        /// This is data for a single leg of a shipment's total/summary rates, as calculated per a specific rate type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentLegRateDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentLegRateDetail_1>? ShipmentLegRateDetails { get; set; }

        /// <summary>
        /// This identifies the manner in which the chargeRate was applied, for Freight.&lt;br&gt; Valid values are: &lt;ul&gt;&lt;li&gt;CWT - Charge rate applies per weight.&lt;/li&gt;&lt;li&gt;FLAT - Charge rate is a flat-rate amount.&lt;/li&gt;&lt;li&gt;MINIMUM&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightChargeBasis", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RatedShipmentDetailFreightChargeBasis FreightChargeBasis { get; set; }

        [Newtonsoft.Json.JsonProperty("totalVariableHandlingCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VariableHandlingCharges? TotalVariableHandlingCharges { get; set; }

        /// <summary>
        /// This is total value added tax charges (VAT).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalVatCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalVatCharge { get; set; }

        /// <summary>
        /// This is the total amount of the shipment-level fees and taxes that are not based on transportation charges of commodity-level estimated duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ancillaryFeesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AncillaryFeesAndTaxes>? AncillaryFeesAndTaxes { get; set; }

        /// <summary>
        /// Specifies the Edt charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredEdtCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EdtCharge>? PreferredEdtCharges { get; set; }

        /// <summary>
        /// This is net charges for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetCharge { get; set; }

        /// <summary>
        /// This is total base charges for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBaseCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalBaseCharge { get; set; }

        /// <summary>
        /// This is total net Charges with Duties And Taxes for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetChargeWithDutiesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetChargeWithDutiesAndTaxes { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentRateDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentRateDetail? ShipmentRateDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The variable handling charge amount calculated based on the requested variable handling charge detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableHandlingCharges
    {
        /// <summary>
        /// Specifies the total customer assessed handling charges.&lt;br&gt; Example: 445.54
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCustomerCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalCustomerCharge { get; set; }

        /// <summary>
        /// The variable handling charge amount calculated based on the requested variable handling charge detail. &lt;br&gt; Example: 403.2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variableHandlingCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double VariableHandlingCharge { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// estimated duties and tax charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EdtCharge
    {
        /// <summary>
        /// Specifies the alternate harmonized codes for the commodity.&lt;br&gt; Example: alternateHarmonizedCodes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateHarmonizedCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? AlternateHarmonizedCodes { get; set; }

        [Newtonsoft.Json.JsonProperty("edtTaxDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EdtTaxDetail? EdtTaxDetail { get; set; }

        /// <summary>
        /// This is to specify the Harmonized Tariff System (HTS) code to meet U.S. and foreign governments' customs requirements. These are mainly used to estimate the duties and taxes.&lt;br&gt;Example: A six digit code for Almonds fresh or dried is 080211. The HTS code for pistachios in shell is 080251. The HTS code for fish is HS203.&lt;br&gt;To research the classification for your commodity, use the FedEx Global Trade Manager online at &lt;a href='http://www.fedex.com/gtm' target='_blank'&gt;fedex.com/gtm&lt;/a&gt;. You can find the commodities and its respective codes by logging into FedEx and selecting harmonized code option. You will find country-specific information to determine whether your commodity is considered to be a document or non-document for your destination. &lt;br&gt;For additional information about harmonized code, refer to &lt;a href='https://www.usitc.gov/documents/hts_external_guide.pdf' target='_blank'&gt;harmonized code&lt;/a&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("harmonizedCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HarmonizedCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the Estimated duties and taxes detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EdtTaxDetail
    {
        /// <summary>
        /// Specifies the Estimated duties and taxes type. &lt;br&gt; Example: TaxType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("edtTaxType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EdtTaxType { get; set; }

        /// <summary>
        /// Specifies the amount for the estimated duties and taxes type.&lt;br&gt; Example: 785.12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Specifies the Estimated duties and taxes taxable Value.&lt;br&gt; Example: 562.23
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxableValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TaxableValue { get; set; }

        /// <summary>
        /// Indicates the name for the Etd tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; }

        /// <summary>
        /// Indicates the description for the Etd tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Indicates the formula.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formula", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Formula { get; set; }

        /// <summary>
        /// Specifies the Estimated duties and taxes effective date. Format [YYYY-MM-DD].&lt;br&gt;  Example: 2019-12-06
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EffectiveDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RatedPackageDetail
    {
        /// <summary>
        /// This is the  list net charge minus actual net charge.&lt;br&gt; Example: 1.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveNetDiscount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double EffectiveNetDiscount { get; set; }

        [Newtonsoft.Json.JsonProperty("packageRateDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageRateDetail? PackageRateDetail { get; set; }

        /// <summary>
        /// This is group number, used only with package groups as a unique identifier of each group of identical packages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int GroupNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Data for a package's rates, as calculated per a specific rate type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageRateDetail
    {
        /// <summary>
        /// Indicates which weight was used for the rate, e.g. actual or dimensional. &lt;br&gt; Example: dimensional
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratedWeightMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RatedWeightMethod { get; set; }

        /// <summary>
        /// Specifies the sum of all taxes on this package.&lt;br&gt; Example: 1257.25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalTaxes { get; set; }

        /// <summary>
        /// The total discounts used in the rate calculation.&lt;br&gt; Example: 1257.2&lt;br&gt;&lt;a onclick='loadDocReference("discounts")'&gt;Click here to see Discounts&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalFreightDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalFreightDiscounts { get; set; }

        /// <summary>
        /// Identifies the manner in which the chargeRate for this line item was applied.&lt;br&gt; Example: 125
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double BaseCharge { get; set; }

        /// <summary>
        /// The total sum of all rebates applied to this package.Example: 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalRebates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalRebates { get; set; }

        /// <summary>
        /// Specifies the type used for this specific set of rate data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; }

        [Newtonsoft.Json.JsonProperty("billingWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingWeight? BillingWeight { get; set; }

        /// <summary>
        /// Specifies the sum of freight charges.&lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netFreight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetFreight { get; set; }

        /// <summary>
        /// Specifies the list of all surcharges that apply to this package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Surcharge>? Surcharges { get; set; }

        /// <summary>
        /// The sum of all surcharges on the package.&lt;br&gt; Example: 569
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSurcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalSurcharges { get; set; }

        /// <summary>
        /// Specifies the sum of packages netFreight and totalSurcharges (not including totalTaxes).&lt;br&gt; Example: 125.32
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netFedExCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetFedExCharge { get; set; }

        /// <summary>
        /// Specifies the sum of packages netFreight, totalSurcharges and totalTaxes. &lt;br&gt;Example: 563.98
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetCharge { get; set; }

        /// <summary>
        /// All rate discounts that apply to this shipment.&lt;br&gt;&lt;a onclick='loadDocReference("discounts")'&gt;Click here to see Discounts&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RateDiscount>? FreightDiscounts { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight : Weight_1
    {
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? Units { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }

    }

    /// <summary>
    /// These are the weight details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight_1
    {
        /// <summary>
        /// Specifies the package weight unit. For Dry Ice the unit of measure is KG.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Weight_1Units Units { get; set; }

        /// <summary>
        /// Specifies the package weight.&lt;br&gt; Example: 68.25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the surcharges.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Surcharge
    {
        /// <summary>
        /// Specifies the surcharge type.&lt;br&gt;Example: FUEL &lt;br&gt;&lt;a onclick='loadDocReference("surcharges")'&gt;Click here to see more on Surcharges.&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        /// <summary>
        /// Specifies the description of the surcharge. Indicates delivery and returns information for FedEx Ground Economy services.&lt;br&gt;Example: Fuel Surcharge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Specify the declared monetary value/amount of the shipment.&lt;br&gt; Example: 5.42
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Specifies the level of surcharge. &lt;br&gt; Example: level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Level { get; set; }

        /// <summary>
        /// The localized name of the surcharge. &lt;br&gt; Example: name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateDiscount
    {
        /// <summary>
        /// Indicates the details of the charges are to be added to the COD collect amount. &lt;br&gt; Example: 95
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Specifies the name of all of the discounts that apply to the package.&lt;br&gt;&lt;a onclick='loadDocReference("discounts")'&gt;Click here to see Discounts&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; }

        /// <summary>
        /// Specifies the discounts on this package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Specifies the type of discount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        /// <summary>
        /// Specifies the percentage of discount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Percent { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentLegRateDetail_1
    {
        /// <summary>
        /// Specifies the list of discounts. &lt;br&gt;&lt;a onclick='loadDocReference("discounts")'&gt;Click here to see Discounts&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RateDiscount_1>? Discounts { get; set; }

        /// <summary>
        /// Identifies the type of pricing used for this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PricingCode { get; set; }

        /// <summary>
        /// Human-readable text describing the shipment leg.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LegDescription { get; set; }

        /// <summary>
        /// Specifies the list of surcharges.&lt;br&gt;Valid value is:&lt;li&gt;PEAK&lt;/li&gt;&lt;li&gt;PEAK_ADDTIONAL_HANDLING&lt;/li&gt;&lt;li&gt;PEAK_OVERSIZE&lt;/li&gt;&lt;li&gt;PEAK_RESIDENTIAL_DELIVERY&lt;/li&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Surcharge_1>? Surcharges { get; set; }

        /// <summary>
        /// Indicates which special rating cases applied to this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialRatingApplied", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? SpecialRatingApplied { get; set; }

        /// <summary>
        /// Specifies the list of taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Tax_1>? Taxes { get; set; }

        /// <summary>
        /// Indicates the rate scale used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateScale { get; set; }

        /// <summary>
        /// This shipment's totalNetCharge and totalDutiesTaxesAndFees. Some duties and taxes are only provided if estimated duties and taxes were calculated for this shipment AND duties, taxes and transportation charges are all paid by the same sender's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetCharge { get; set; }

        /// <summary>
        /// Specifies the total base charge list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBaseCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalBaseCharge { get; set; }

        [Newtonsoft.Json.JsonProperty("currencyExchangeRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyExchangeRate? CurrencyExchangeRate { get; set; }

        /// <summary>
        /// Sum of billing weight for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBillingWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight_1? TotalBillingWeight { get; set; }

        /// <summary>
        /// Indicate the three-character ISO currency code. &lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;Click here to see Currency Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateDiscount_1
    {
        /// <summary>
        /// Indicates the amount for the rate discount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Indicate the name of the discount.&lt;br&gt;&lt;a onclick='loadDocReference("discounts")'&gt;Click here to see Discounts&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; }

        /// <summary>
        /// Indicates the description for the rate discount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Indicates the type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        /// <summary>
        /// Indicates the percentage of the rate discount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Percent { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Surcharge_1
    {
        /// <summary>
        /// Identifies the total amount of the shipment-level fees and taxes that are not based on transportation charges or commodity-level estimated duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Specifies the level of surcharge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Level { get; set; }

        /// <summary>
        /// Specifies the localized name of the surcharge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; }

        /// <summary>
        /// Specifies the description of the surcharge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Specifies the type of surcharge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the Tax surcharge details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tax_1
    {
        /// <summary>
        /// Specifies the list of tax amounts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Specifies the localized name of the tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; }

        /// <summary>
        /// Specifies the description of the Surcharge/Tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Specifies the type of Surcharge/Tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the currency exchange performed on financial amounts for this rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrencyExchangeRate
    {
        /// <summary>
        /// The currency code for the original (converted FROM) currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FromCurrency { get; set; }

        /// <summary>
        /// The currency code for the final (converted INTO) currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("intoCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IntoCurrency { get; set; }

        /// <summary>
        /// Multiplier used to convert fromCurrency units to intoCurrency units.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Rate { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AncillaryFeesAndTaxes
    {
        /// <summary>
        /// Specifies the list of ancillary fees And Taxes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Identifies the amount of the shipment-level fees and taxes that are not based on transportation charges or commodity-level estimated duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Identifies the total amount of the shipment-level fees and taxes that are not based on transportation charges or commodity-level estimated duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is shipment level rate data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentRateDetail
    {
        [Newtonsoft.Json.JsonProperty("currencyExchangeRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyExchangeRate? CurrencyExchangeRate { get; set; }

        /// <summary>
        /// Indicates the currency associated with the amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }

        /// <summary>
        /// Indicates the rate zone used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateZone { get; set; }

        /// <summary>
        /// Is a RatingBasisType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratingBasis", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentRateDetailRatingBasis RatingBasis { get; set; }

        /// <summary>
        /// Indicates the type of pricing code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PricingCode { get; set; }

        /// <summary>
        /// Indicates the total discounts used in the rate calculation. Example: 856.32
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalFreightDiscount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalFreightDiscount { get; set; }

        /// <summary>
        /// Indicates which special rating cases applied to this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialRatingApplied", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? SpecialRatingApplied { get; set; }

        /// <summary>
        /// This is sum of all surcharges on the package. Example: 586.25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSurcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalSurcharges { get; set; }

        /// <summary>
        /// This is total discount used in the rate calculation.&lt;br&gt;&lt;a onclick='loadDocReference("discounts")'&gt;Click here to see Discounts&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightDiscount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RateDiscount>? FreightDiscount { get; set; }

        /// <summary>
        /// This is fuel surcharge percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fuelSurchargePercent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FuelSurchargePercent { get; set; }

        /// <summary>
        /// This is total of billing weight for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBillingWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight_1? TotalBillingWeight { get; set; }

        /// <summary>
        /// This is total of dimensional weight for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDimWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight_1? TotalDimWeight { get; set; }

        /// <summary>
        /// Identifies the type of divisor applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimDivisor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DimDivisor { get; set; }

        /// <summary>
        /// Indicates the surcharges applied to this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surCharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Surcharge>? SurCharges { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the Operational Details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationalDetail
    {
        /// <summary>
        /// Indicate the location ID of the origin of shipment. &lt;br&gt; Example: YBZA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originLocationIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? OriginLocationIds { get; set; }

        /// <summary>
        /// Indicate the delivery commitment day.&lt;br&gt; Example: MON
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commitDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? CommitDays { get; set; }

        /// <summary>
        /// Indicate the service code. &lt;br&gt; Example: 06
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceCode { get; set; }

        /// <summary>
        /// Specify the Airport Id. &lt;br&gt; Example: MEM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("airportId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AirportId { get; set; }

        /// <summary>
        /// Indicate the Standard Carrier Alpha Code (SCAC) is a privately controlled US code used to identify vessel operating common carriers (VOCC). It is typically two to four letters long.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scac", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Scac { get; set; }

        /// <summary>
        /// Specify origin service area.&lt;br&gt; Example: AM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originServiceAreas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? OriginServiceAreas { get; set; }

        /// <summary>
        /// Specify the delivery commitment day. &lt;br&gt; Example: SAT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeliveryDay { get; set; }

        /// <summary>
        /// Specify the origin location ID.&lt;br&gt; Example: 6121
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originLocationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? OriginLocationNumbers { get; set; }

        /// <summary>
        /// Indicate the destination postal code.&lt;br&gt; Example: 38017
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationPostalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DestinationPostalCode { get; set; }

        /// <summary>
        /// Indicate the shipment Commit Date. &lt;br&gt; Example: 2019-07-22T08:30:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commitDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitDate { get; set; }

        /// <summary>
        /// Indicate the ASTRA description for the label. &lt;br&gt; Example: XXXL1ST
        /// </summary>
        [Newtonsoft.Json.JsonProperty("astraDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AstraDescription { get; set; }

        /// <summary>
        /// Indicate the delivery date. &lt;br&gt; Example: 2019-07-22T08:30:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeliveryDate { get; set; }

        /// <summary>
        /// Indicate the delivery eligibilities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryEligibilities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? DeliveryEligibilities { get; set; }

        /// <summary>
        /// indicate if ineligible For Money Back Guarantee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ineligibleForMoneyBackGuarantee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IneligibleForMoneyBackGuarantee { get; set; }

        /// <summary>
        /// Specify Maximum transit time. &lt;br&gt; Example: THREE_DAYS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumTransitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MaximumTransitTime { get; set; }

        /// <summary>
        /// Indicate Astra Planned Service Level. &lt;br&gt; Example: astraPlannedServicelevel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("astraPlannedServiceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AstraPlannedServiceLevel { get; set; }

        /// <summary>
        /// Indicate Destination Location Ids. &lt;br&gt; Example: HKAA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationLocationIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? DestinationLocationIds { get; set; }

        /// <summary>
        /// Indicate destination location State Or Province code. &lt;br&gt; Example: TN&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;Click here to see State Or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationLocationStateOrProvinceCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? DestinationLocationStateOrProvinceCodes { get; set; }

        /// <summary>
        /// Indicate the Transit Time in days. &lt;br&gt; Example: THREE_DAYS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransitTime { get; set; }

        /// <summary>
        /// Indicate the Packaging Code. &lt;br&gt; Example: M1M1M1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packagingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PackagingCode { get; set; }

        /// <summary>
        /// Indicate the Destination Location Numbers. &lt;br&gt; Example: 386
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationLocationNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int>? DestinationLocationNumbers { get; set; }

        /// <summary>
        /// Indicate the Published Delivery Time. &lt;br&gt; Example: THREE_DAYS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publishedDeliveryTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PublishedDeliveryTime { get; set; }

        /// <summary>
        /// Indicate the Country Code.&lt;br&gt;Example: [ US, IN]&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? CountryCodes { get; set; }

        /// <summary>
        /// Specifies state Or Province Code. State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2. &lt;br&gt; Example: TN
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StateOrProvinceCodes { get; set; }

        /// <summary>
        /// This is FedEx URSA Prefix Code. &lt;br&gt; Example: PrefixCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ursaPrefixCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UrsaPrefixCode { get; set; }

        /// <summary>
        /// This is URSA Suffix Code. &lt;br&gt; Example: SuffixCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ursaSuffixCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UrsaSuffixCode { get; set; }

        /// <summary>
        /// This is Destination Service Areas. &lt;br&gt; Example: A2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationServiceAreas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? DestinationServiceAreas { get; set; }

        /// <summary>
        /// This is Origin Postal Codes. &lt;br&gt; Example: M1M1M1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originPostalCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? OriginPostalCodes { get; set; }

        /// <summary>
        /// This is Custom Transit Time in days. &lt;br&gt; Example: THREE_DAYS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customTransitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomTransitTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the provides the Service Description details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceDescription
    {
        /// <summary>
        /// This is the service type.&lt;br&gt;Example: INTERNATIONAL_FIRST&lt;br&gt;&lt;a onclick='loadDocReference("servicetypes")'&gt;Click here to see Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceType { get; set; }

        /// <summary>
        /// Specifies the service code.&lt;br&gt; Example: 92
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies the service name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductName>? Names { get; set; }

        /// <summary>
        /// Specifies operating organization codes.&lt;br&gt; Example: 'FXG'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operatingOrgCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? OperatingOrgCodes { get; set; }

        /// <summary>
        /// Specifies astra description. &lt;br&gt; Example: INTL1ST
        /// </summary>
        [Newtonsoft.Json.JsonProperty("astraDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AstraDescription { get; set; }

        /// <summary>
        /// Specifies description of the service. &lt;br&gt; Example: FedEx Ground
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Specifies the service Id. &lt;br&gt; Example: EP1000000135
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceId { get; set; }

        /// <summary>
        /// Specifies service category. &lt;br&gt; Example: parcel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceCategory { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Provides the product details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductName
    {
        /// <summary>
        /// Specifies the type of the product.&lt;br&gt; Example: medium
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        /// <summary>
        /// Specifies the encoding standard. &lt;br&gt; Example: utf-8.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Encoding { get; set; }

        /// <summary>
        /// Specifies the value of the Product.&lt;br&gt; Example: FedEx International First®.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are Broker Detail for the rate quote.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrokerDetail
    {
        [Newtonsoft.Json.JsonProperty("broker", Required = Newtonsoft.Json.Required.Always)]
        public BrokerDetailBroker? Broker { get; set; }

        /// <summary>
        /// This is Broker Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokerDetailType Type { get; set; }

        /// <summary>
        /// This is the delivery commitment date/time the shipment will arrive at the border. &lt;br&gt; Example: 2019-07-22
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokerCommitTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BrokerCommitTimestamp { get; set; }

        /// <summary>
        /// This is the delivery commitment day of the week the shipment will arrive at the border. &lt;br&gt; Example: SUNDAY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokerCommitDayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BrokerCommitDayOfWeek { get; set; }

        /// <summary>
        /// This is the FedEx location identifier for the broker. &lt;br&gt; Example: HKAA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokerLocationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BrokerLocationId { get; set; }

        [Newtonsoft.Json.JsonProperty("brokerAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Brokeraddress? BrokerAddress { get; set; }

        /// <summary>
        /// These are number of days it will take for the shipment to make it from broker. &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokerToDestinationDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BrokerToDestinationDays { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrokerDetailBroker : Party
    {
        /// <summary>
        /// These are Broker address details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object? Address { get; set; }

        /// <summary>
        /// These are broker contact details such as Name, Email, PhoneNumber.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object? Contact { get; set; }

    }

    /// <summary>
    /// Indicate the party to a transaction including the physical address, contact information and account number information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Party
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address? Address { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumber? AccountNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is detailed information on physical location. May be used as an actual physical address (place to which one could go), or as a container of address parts which should be handled as a unit (such as a city-state-ZIP combination within the U.S.).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// This is a placeholder for City Name. &lt;br&gt; Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; }

        /// <summary>
        /// This is a placeholder for State or Province code.State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2. &lt;br&gt; Example: CA &lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;Click here to see State Or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StateOrProvinceCode { get; set; }

        /// <summary>
        /// Indicate the Postal code. This is optional for non postal-aware countries. Maximum length is 10.&lt;br&gt; Example: 65247&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;Click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; }

        /// <summary>
        /// This is the two-letter country code. Maximum length is 2.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is residential (as opposed to commercial). &lt;br&gt; Valid values are TRUE and FALSE.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the contact details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact
    {
        /// <summary>
        /// Specifies contact name.&lt;br&gt;Note: Recommended Length is 70. There's no specific validation for the length.&lt;br&gt; Example: John Taylor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonName { get; set; }

        /// <summary>
        /// Specifies contact email address. Maximum length is 80. &lt;br&gt; Example: sample@company.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmailAddress { get; set; }

        /// <summary>
        /// Specifies contact phone number. Maximum length is 15. &lt;br&gt; Example: 1234567890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneNumber { get; set; }

        /// <summary>
        /// Specifies contact phone extension. Maximum length is 6. &lt;br&gt; Example: 1234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneExtension { get; set; }

        /// <summary>
        /// Specifies contact fax number. Maximum length is 15. &lt;br&gt; Example: 1234567890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FaxNumber { get; set; }

        /// <summary>
        /// Specifies contact company name. Maximum length is 35.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CompanyName { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This object is used to separate the person name into first and last name.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParsedPersonName
    {
        /// <summary>
        /// Specify the First Name. Maximum Length is 35. &lt;br&gt; Example: John
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstName { get; set; }

        /// <summary>
        /// Specify the Last Name. Maximum Length is 35. &lt;br&gt; Example: Mayor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastName { get; set; }

        /// <summary>
        /// Specify the Middle Name.&lt;br&gt; Example: Redmond
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MiddleName { get; set; }

        /// <summary>
        /// Specify the Suffix.&lt;br&gt; Example: Jr
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Suffix { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is the Account number details.&lt;br&gt;&lt;i&gt;Note:&lt;ul&gt;&lt;li&gt;If the paymentType is Sender, then the account number is optional in shippingChargesPayment.&lt;/li&gt;&lt;li&gt;In case if this is shipping account number, do use the account number used for creating Auth Token.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountNumber
    {
        /// <summary>
        /// This is the account number. Maximum Length is 9. &lt;br&gt;Example: Your account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is the broker address used for this shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Brokeraddress
    {
        /// <summary>
        /// This is the combination of number, street name, etc. &lt;br&gt;Note: At least one line is required and streetlines more than 3 will be ignored. Empty lines should not be included. Maximum Length per line is 35.&lt;br&gt;Example: [10 FedEx Parkway, Suite 302, .etc.]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StreetLines { get; set; }

        /// <summary>
        /// This is city name.&lt;br&gt; Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; }

        /// <summary>
        /// This is the state Or Province Code. State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2.&lt;br&gt; Example: CA&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;Click here to see State Or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StateOrProvinceCode { get; set; }

        /// <summary>
        /// This is the postal code. &lt;br&gt; Example: 90210&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;Click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; }

        /// <summary>
        /// This is the country code.&lt;br&gt;US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is residential (as opposed to commercial). &lt;br&gt; Valid values are TRUE and FALSE.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        /// <summary>
        /// Specify the classification of the address. &lt;br&gt; Example: residential
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Classification { get; set; }

        /// <summary>
        /// Specify the geographic coordinates.&lt;br&gt; Example: geographicCoordinates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("geographicCoordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GeographicCoordinates { get; set; }

        /// <summary>
        /// Specify the urbanization code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urbanizationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UrbanizationCode { get; set; }

        /// <summary>
        /// Specify the country name.&lt;br&gt; Example: India
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryName { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The delivery commitment details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Commit
    {
        /// <summary>
        /// Code indicating the number of transit days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("daysInTransit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommitDaysInTransit DaysInTransit { get; set; }

        /// <summary>
        /// Indicates if there is a guaranteed delivery option applied to the rate.  This is for freight rates only.&lt;br&gt; Valid values&lt;br&gt;GUARANTEED_MORNING - guaranteed delivery on morning of date specified.&lt;br&gt;GUARANTEED_CLOSE_OF_BUSINESS - guaranteed delivery on date specified by close of day
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guaranteedType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommitGuaranteedType GuaranteedType { get; set; }

        /// <summary>
        /// CommitTime for SmartPost shipments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("smartPostCommitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SmartPostCommitTime { get; set; }

        [Newtonsoft.Json.JsonProperty("dateDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateDetail? DateDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("delayDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DelayDetail>? DelayDetails { get; set; }

        /// <summary>
        /// Specifies the saturdayDelivery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saturdayDelivery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SaturdayDelivery { get; set; }

        /// <summary>
        /// Specifies the alternate names of commodities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternativeCommodityNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? AlternativeCommodityNames { get; set; }

        [Newtonsoft.Json.JsonProperty("transitDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransitDays? TransitDays { get; set; }

        /// <summary>
        /// This is an informational message to inform client Deliverydate is unavailable. If commitTimestamp and transitTime are unavailable, then this is populated in the response in the client language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Label { get; set; }

        /// <summary>
        /// Messages concerning the ability to provide an accurate delivery commitment on an International commit quote. These could be messages providing information about why a commitment could not be returned or a successful message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commitMessageDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitMessageDetails { get; set; }

        /// <summary>
        /// The Commodity applicable to this commitment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commodityName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommodityName { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are date and time details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateDetail
    {
        /// <summary>
        /// The days of the week for which this capability applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DayOfWeek { get; set; }

        /// <summary>
        /// This is expected delivery date in format [YYYY-MM-DDTHH:mm:ss]&lt;br&gt;Example: 2020-07-16T10:30:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dayFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DayFormat { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about why a shipment delivery is delayed and at what level
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DelayDetail
    {
        /// <summary>
        /// delay date.  format [YYYY-MM-DD]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Date { get; set; }

        /// <summary>
        /// The delay day of the week
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DayOfWeek { get; set; }

        /// <summary>
        /// The attribute of the shipment that caused the delay(e.g. Country, City, LocationId, Zip, service area, special handling)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Level { get; set; }

        /// <summary>
        /// The point in transit where the delay is occurring (e.g. Origin, Destination, Broker location)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("point", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Point { get; set; }

        /// <summary>
        /// The reason for the delay (e.g. holiday, weekend, etc.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        /// <summary>
        /// The name of the holiday in that country that is causing the delay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are number of days the package/shipment is to be in transit. Applies to Ground and LTL Freight; indicates minimum transit time for SmartPost.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransitDays
    {
        /// <summary>
        /// Indicates the number of days the package/shipment is to be in transit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// This is the code indicating the number of transit days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumTransitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransitDaysMinimumTransitTime MinimumTransitTime { get; set; }

        [Newtonsoft.Json.JsonProperty("maximumTransitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MaximumTransitTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are supporting detail for applied options identified in a rate quote.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceSubOptionDetail
    {
        /// <summary>
        /// This identifies the indicia used during rate quote.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("smartPostIndiciaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceSubOptionDetailSmartPostIndiciaType SmartPostIndiciaType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the alerts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Alert
    {
        /// <summary>
        /// Specifies the alert code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies the alert type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alertType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertType AlertType { get; set; }

        /// <summary>
        /// Specifies the alert message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        /// <summary>
        /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example:&lt;br&gt;ACCOUNT.NUMBER.MISMATCH&lt;br&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// List of parameters which indicates the properties of the alert message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of error alert message.&lt;br&gt;Example: When payment Type is SENDER, ShippingChargesPayment Payor AccountNumber should match the shipper account number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of parameters which indicates the properties of the alert message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parameter
    {
        /// <summary>
        /// Identifies the error option to be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        /// <summary>
        /// Indicates the value associated with the key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Key { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO401
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError401>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError401
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: NOT.AUTHORIZED.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies list of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: Access token expired. Please modify your request and try again.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO403
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError403>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError403
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: FORBIDDEN.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies list of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: We could not authorize your credentials. Please check your permissions and try again
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO404
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError404>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError404
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: NOT.FOUND.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies list of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: The resource you requested is no longer available. Please modify your request and try again.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO500
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError500>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError500
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: INTERNAL.SERVER.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies list of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: We encountered an unexpected error and are working to resolve the issue. We apologize for any inconvenience. Please check back at a later time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO503
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError503>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError503
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: SERVICE.UNAVAILABLE.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies list of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: The service is currently unavailable and we are working to resolve the issue. We apologize for any inconvenience. Please check back at a later time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request elements for requesting a rate quote.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Full_Schema_Quote_Rate
    {
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AccountNumber AccountNumber { get; set; } = new AccountNumber();

        [Newtonsoft.Json.JsonProperty("rateRequestControlParameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RateRequestControlParameters? RateRequestControlParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("requestedShipment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RequestedShipment RequestedShipment { get; set; } = new RequestedShipment();

        /// <summary>
        /// Specify the four letter code of a FedEx operating company that meets your requirements.&lt;br&gt;Examples of FedEx Operating Companies are:&lt;ul&gt;&lt;li&gt;FDXE - FedEx Express&lt;/li&gt;&lt;li&gt;FDXG - FedEx Ground&lt;/li&gt;&lt;li&gt;FXSP - FedEx SmartPost&lt;/li&gt;&lt;li&gt;FXCC - FedEx Custom Critical.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? CarrierCodes { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the return transit times, services needed on rate failure, choice of variable option and order to sort rate options to filter and sort the expected response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateRequestControlParameters
    {
        /// <summary>
        /// Indicate if the transit time and commit data are to be returned in the reply. Default value is false.&lt;br&gt;Valid values are TRUE and FALSE.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnTransitTimes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReturnTransitTimes { get; set; }

        /// <summary>
        /// Specify the services to be requested if the rate data is not available.&lt;br&gt;Valid values are TRUE and FALSE.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("servicesNeededOnRateFailure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ServicesNeededOnRateFailure { get; set; }

        /// <summary>
        /// Specify service options whose combinations are to be considered when replying with available services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variableOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RateRequestControlParametersVariableOptions VariableOptions { get; set; }

        /// <summary>
        /// This is a sort order you can specify to control the order of the response data: &lt;br&gt; Example: &lt;ul&gt;&lt;li&gt;SERVICENAMETRADITIONAL - data in order of highest to lowest service (Default)&lt;/li&gt;&lt;li&gt;COMMITASCENDING - data in order of ascending delivery committment&lt;/li&gt;&lt;li&gt;COMMITDESCENDING - data in order of descending delivery committment.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateSortOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RateRequestControlParametersRateSortOrder RateSortOrder { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is shipment data for which a rate quote (or rate-shipping comparison) is requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestedShipment
    {
        /// <summary>
        /// The descriptive data for the physical shipper location from which the shipment originates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipper", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RateParty Shipper { get; set; } = new RateParty();

        /// <summary>
        /// Indicate the descriptive data for the recipient location to which the shipment is to be received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RateParty Recipient { get; set; } = new RateParty();

        /// <summary>
        /// Indicate the FedEx service type used for this shipment. The results will be filtered by the service type value indicated. If no serviceType is indicated then all the applicable services and corresponding rates will be returned.&lt;br&gt;Example: STANDARD_OVERNIGHT&lt;br&gt;&lt;a onclick='loadDocReference("servicetypes")'&gt;Click here to see Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceType { get; set; }

        [Newtonsoft.Json.JsonProperty("emailNotificationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EMailNotificationDetail? EmailNotificationDetail { get; set; }

        /// <summary>
        /// Indicate the currency the caller requests to have used in all returned monetary values (when a choice is possible). Used in conjunction with the rateRequestType data element. This element is used to pull Preferred rates.&lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt; Click here to see Currency Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PreferredCurrency { get; set; }

        /// <summary>
        /// Indicate the type of rates to be returned.&lt;br&gt;Following are values:&lt;ul&gt;&lt;li&gt;LIST - Returns FedEx published list rates in addition to account-specific rates (if applicable).&lt;/li&gt;&lt;li&gt;PREFERRED - Returns rates in the preferred currency specified in the element preferredCurrency.&lt;/li&gt;&lt;li&gt;ACCOUNT - Returns account specific rates (Default).&lt;/li&gt;&lt;li&gt;INCENTIVE - This is one-time discount for incentivising the customer. For more information, contact your FedEx representative.&lt;/li&gt;&lt;/ul&gt;Examples: ["LIST","PREFERRED"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateRequestType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<RateRequestType>? RateRequestType { get; set; }

        /// <summary>
        ///  This is shipment date. Both the date and time portions of the string are expected to be used. The date should not be a past date or a date more than 10 days in the future. The time is the local time of the shipment based on the shipper's time zone.&lt;br&gt;Required Format is YYYY-MM-DD&lt;br&gt; Example: 2019-09-05
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDateStamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShipDateStamp { get; set; }

        /// <summary>
        /// Indicate the pickup type method by which the shipment to be tendered to FedEx.&lt;br&gt;&lt;a onclick='loadDocReference("pickuptypes")'&gt;Click here for more information on Pickup Types.&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickupType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestedShipmentPickupType PickupType { get; set; }

        /// <summary>
        /// These are one or more package-attribute descriptions, each of which describes an individual package, a group of identical packages, or (for the total-piece-total-weight case) common characteristics of all packages in the shipment.&lt;ul&gt;&lt;li&gt;At least one instance containing the weight for at least one package is required for EXPRESS and GROUND shipments.&lt;/li&gt;&lt;li&gt;Not used for FREIGHT.&lt;/li&gt;&lt;li&gt;Single piece requests will have one RequestedPackageLineItem.&lt;/li&gt;&lt;li&gt;Multiple piece requests will have multiple RequestedPackageLineItems.&lt;/li&gt;&lt;li&gt;Maximum occurrences is 99.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedPackageLineItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RequestedPackageLineItem> RequestedPackageLineItems { get; set; } = new System.Collections.ObjectModel.Collection<RequestedPackageLineItem>();

        /// <summary>
        /// Indicate whether or not its a document Shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentShipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DocumentShipment { get; set; }

        /// <summary>
        /// contains the detail used to calculate a variable handling charge, a potentially non-fixed handling surcharge. Based on if there is a percent value, or a fixed amount, the charge can either be fixed or percents based.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variableHandlingChargeDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VariableHandlingChargeDetail? VariableHandlingChargeDetail { get; set; }

        /// <summary>
        /// This is the Packaging type associated with this rate. For Ground/SmartPost,it  will always be YOUR_PACKAGING. For domestic Express, the packaging may have been bumped so it may not match the value specified on the request. For International Express the packaging may be bumped and not mapped.&lt;br&gt;&lt;a onclick='loadDocReference("packagetypes")'&gt;Click here to see Package Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packagingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PackagingType { get; set; }

        /// <summary>
        /// Indicate the total number of packages in the shipment. &lt;br&gt;The Maximum number of packages in a rate request is 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPackageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalPackageCount { get; set; }

        /// <summary>
        /// Specify the total weight of the shipment. &lt;br&gt;This is only applies to International shipments and should be used on the first package of a multiple piece shipment. This value contains 1 explicit decimal position.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentSpecialServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestedShipmentSpecialServicesRequested? ShipmentSpecialServices { get; set; }

        [Newtonsoft.Json.JsonProperty("customsClearanceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestedShipmentCustomsClearanceDetail? CustomsClearanceDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("groupShipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GroupShipment { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceTypeDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceTypeDetailVO? ServiceTypeDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("smartPostInfoDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestedShipmentSmartPostInfoDetail? SmartPostInfoDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("expressFreightDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExpressFreightDetail? ExpressFreightDetail { get; set; }

        /// <summary>
        /// If set to 'true', indicates it is a Ground shipment.&lt;br&gt; Example: 'false'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groundShipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GroundShipment { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the shipper address details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateParty
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        public RateAddress? Address { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Descriptive data for a physical location. May be used as an actual physical address (place to which one could go), or as a container of address parts which should be handled as a unit (such as a city-state-ZIP combination within  the US). Country code is required.  Postal code is required for postal aware countries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateAddress : Address_2
    {
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? CountryCode { get; set; }

        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? PostalCode { get; set; }

    }

    /// <summary>
    /// This is detailed information on physical location. May be used as an actual physical address (place to which one could go), or as a container of address parts which should be handled as a unit (such as a city-state-ZIP combination within the U.S.).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address_2
    {
        /// <summary>
        /// This is a placeholder for City Name. &lt;br&gt; Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; }

        /// <summary>
        /// This is a placeholder for State or Province code. State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2 .&lt;br&gt; Example: CA &lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;Click here to see State Or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StateOrProvinceCode { get; set; }

        /// <summary>
        /// Indicate the Postal code. This is optional for non postal-aware countries. Maximum length is 10.&lt;br&gt; Example: 65247&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;Click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; }

        /// <summary>
        /// This is the two-letter country code. Maximum length is 2.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is residential (as opposed to commercial).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Object to specify email details for shipment notifications.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EMailNotificationDetail
    {
        /// <summary>
        ///  The list of recipients for shipment notifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EmailNotificationRecipient>? Recipients { get; set; }

        /// <summary>
        /// Indicates the personal message to be added with the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonalMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("PrintedReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EMailNotificationDetail_PrintedReference? PrintedReference { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Data specifying the recipient(s) of notifications related to the movement of the shipment. At a minimnum an EmailnotificationRecipientType, at least one NoficationEventType, and an EmailAddress are required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailNotificationRecipient
    {
        /// <summary>
        /// Identifies the email address associated with this contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? EmailAddress { get; set; }

        /// <summary>
        /// Specifies notification event type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationEventType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<NotificationEventType>? NotificationEventType { get; set; }

        [Newtonsoft.Json.JsonProperty("smsDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SmsDetail? SmsDetail { get; set; }

        /// <summary>
        /// Specifies Notification Format Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationFormatType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailNotificationRecipientNotificationFormatType NotificationFormatType { get; set; }

        /// <summary>
        /// Required Email Notification Recipient Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailNotificationRecipientType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailNotificationRecipientType EmailNotificationRecipientType { get; set; }

        /// <summary>
        /// Specifies the type of the notification received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailNotificationRecipientNotificationType NotificationType { get; set; }

        /// <summary>
        /// Specify the locale details.&lt;br&gt;Example: 'en_US'&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;Click here to see the list of available locales&lt;br&gt;&lt;/a&gt;&lt;br&gt;Note: If the locale is left blank or an invalid locale is entered, an error message is returned in response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Locale { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the SMS notification details.&lt;br&gt;Conditionally required for SMS notifications.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SmsDetail : Anonymous
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestedPackageLineItem
    {
        /// <summary>
        /// This is a physical packaging type used for the package. &lt;br&gt;&lt;a onclick='loadDocReference("subpackagetypes")'&gt;Click here to see sub-packaging types&lt;/a&gt;&lt;br&gt;For more information on physical packaging or packaging regulatory requirements, visit fedex.com or contact your FedEx representative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subPackagingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SubPackagingType { get; set; }

        /// <summary>
        /// Indicate the grouped package count. These are number of identical package(s) each with one or more commodities. &lt;br&gt; Example: 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupPackageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int GroupPackageCount { get; set; }

        /// <summary>
        /// Specifies the content record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentRecord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentRecord>? ContentRecord { get; set; }

        /// <summary>
        /// This is the Declared Value - represents FedEx Maximum liability in connection with a shipment of that Package, including but not limited to, any loss, damage, delay, misdelivery, any failure to provide information, or misdelivery of information relating to the Shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("declaredValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? DeclaredValue { get; set; }

        /// <summary>
        /// Indicate the total weight of the requested package line items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        public Weight_2? Weight { get; set; }

        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestePackageLineItemDimensions? Dimensions { get; set; }

        [Newtonsoft.Json.JsonProperty("variableHandlingChargeDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VariableHandlingChargeDetail? VariableHandlingChargeDetail { get; set; }

        /// <summary>
        /// These special services are available at the package level for some or all service types.  Indicated if rate data is being requested for the special services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageSpecialServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageSpecialServicesRequested? PackageSpecialServices { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the details of the content of the package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentRecord
    {
        /// <summary>
        /// Specifies Item Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ItemNumber { get; set; }

        /// <summary>
        /// Specifies Received Quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receivedQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ReceivedQuantity { get; set; }

        /// <summary>
        /// Specifies description for the content record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Specifies Part Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PartNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Money : Money_1
    {
        /// <summary>
        /// Indicates the declared amount value for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }

        /// <summary>
        /// Indicates the currency associated with the amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? Currency { get; set; }

    }

    /// <summary>
    /// Indicate the amount details. This is optional, but if indicated, amount and currency must be provided.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Money_1
    {
        /// <summary>
        /// Indicate the amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Indicate the three-character ISO currency code. &lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;Click here to see Currency Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight_2 : Weight_1_2
    {
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? Units { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }

    }

    /// <summary>
    /// These are the weight details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight_1_2
    {
        /// <summary>
        /// Specifies the package weight unit. For Dry Ice the unit of measure is KG.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Weight_1_2Units Units { get; set; }

        /// <summary>
        /// Specifies the package weight.&lt;br&gt; Example: 68.25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the dimensions of the package.&lt;br&gt; Following conditions will apply: &lt;ul&gt;&lt;li&gt;Dimensions are optional but when added, then all three dimensions must be indicated.&lt;/li&gt;&lt;li&gt;Dimensions are required with YOUR_PACKAGING package type.&lt;/li&gt;&lt;/ul&gt;Note: The Maximum/minimum dimension values varies based on the services and the packaging types. Refer &lt;a href="https://www.fedex.com/en-us/service-guide.html" target="_blank"&gt;FedEx Service Guide&lt;/a&gt; for service details related to DIM Weighting for FedEx Express and oversize conditions for FedEx Express and FedEx Ground.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestePackageLineItemDimensions : Dimensions_1
    {
        /// <summary>
        /// Indicate the length of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 20
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Always)]
        public int Length { get; set; }

        /// <summary>
        /// Indicate the width of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }

        /// <summary>
        /// Indicate the height of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }

        /// <summary>
        /// Indicate the unit of measure for the provided dimensions.&lt;br&gt;Valid Values are:&lt;ul&gt;&lt;li&gt;IN - Inches&lt;/li&gt;&lt;li&gt;CM - Centimeters&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? Units { get; set; }

    }

    /// <summary>
    /// Indicate the dimensions of the package.&lt;br&gt; Following conditions will apply: &lt;ul&gt;&lt;li&gt;Dimensions are optional but when added, then all three dimensions must be indicated.&lt;/li&gt;&lt;li&gt;Dimensions are required with YOUR_PACKAGING package type.&lt;/li&gt;&lt;/ul&gt;Note: The Maximum/minimum dimension values varies based on the services and the packaging types. Refer &lt;a href="https://www.fedex.com/en-us/service-guide.html" target="_blank"&gt;FedEx Service Guide&lt;/a&gt; for service details related to DIM Weighting for FedEx Express and oversize conditions for FedEx Express and FedEx Ground.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dimensions_1
    {
        /// <summary>
        /// Indicate the length of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 20
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Length { get; set; }

        /// <summary>
        /// Indicate the width of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        /// <summary>
        /// Indicate the height of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        /// <summary>
        /// Indicate the unit of measure for the provided dimensions.&lt;br&gt;Valid Values are:&lt;ul&gt;&lt;li&gt;IN - Inches&lt;/li&gt;&lt;li&gt;CM - Centimeters&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Dimensions_1Units Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the details on how to calculate variable handling charges at the package level. If indicated, element rateLevelType is required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableHandlingChargeDetail
    {
        /// <summary>
        /// The rate type indicates what type of rate request is being returned; account, preferred, incentive, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VariableHandlingChargeDetailRateType RateType { get; set; }

        /// <summary>
        /// Indicate the variable handling percentage. Actual percentage (10 means 10%, which is a mutiplier of 0.1).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double PercentValue { get; set; }

        /// <summary>
        /// indicates whether or not the rating is being done at the package level, or if the packages are bundled together. At the package level, charges are applied based on the details of each individual package. If they are bundled, one package is chosen as the parent and charges are applied based on that one package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateLevelType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VariableHandlingChargeDetailRateLevelType RateLevelType { get; set; }

        /// <summary>
        /// Indicate the Fixed value. &lt;br&gt;If you choose FIXED_AMOUNT as the ChargeType, this element allows you to enter the fixed value of the handling charge. The element allows entry of 7 characters before the decimal and 2 characters following the decimal. &lt;br&gt;Example - 5.00.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? FixedValue { get; set; }

        /// <summary>
        /// Indicate the rate charge on which, the variable handling amount is calculated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateElementBasis", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VariableHandlingChargeDetailRateElementBasis RateElementBasis { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These special services are available at the package level for some or all service types. Needs Indicated, if rate data is being requested for the special services. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageSpecialServicesRequested
    {
        /// <summary>
        /// Indicate the special services  requested.&lt;br&gt;&lt;a onclick='loadDocReference("packagelevelspecialservicetypes")'&gt;Click here to see Package level Special Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialServiceTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? SpecialServiceTypes { get; set; }

        /// <summary>
        /// Type of a Signature Option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signatureOptionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageSpecialServicesRequestedSignatureOptionType SignatureOptionType { get; set; }

        [Newtonsoft.Json.JsonProperty("alcoholDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlcoholDetail? AlcoholDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("dangerousGoodsDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DangerousGoodsDetail? DangerousGoodsDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("packageCODDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageSpecialServicesRequestedPackageCODDetail? PackageCODDetail { get; set; }

        /// <summary>
        /// Provide the pieceCount or VerificationBoxCount for batteries or cells that are contained within this specific package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pieceCountVerificationBoxCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PieceCountVerificationBoxCount { get; set; }

        /// <summary>
        /// Specify the details about the batteries or cells that are contained within this specific package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("batteryDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BatteryClassificationDetail>? BatteryDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("dryIceWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight_1_2? DryIceWeight { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the alcohol shipment details. This object is mandatory if alcohol special service is selected.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlcoholDetail
    {
        /// <summary>
        /// Specify the recipient type for the alcohol shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alcoholRecipientType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlcoholDetailAlcoholRecipientType AlcoholRecipientType { get; set; }

        /// <summary>
        /// Specify the shipper entity type. &lt;br&gt;Example: Fulfillment house, Retailer or a Winery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipperAgreementType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShipperAgreementType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify Dangerous Goods shipment Detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DangerousGoodsDetail
    {
        /// <summary>
        /// Indicate the Offeror's name or contract number, per DOT regulation.&lt;br&gt;Example: John Smith
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offeror", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Offeror { get; set; }

        /// <summary>
        /// Indicate the Dangerous Goods Accessibility Type.&lt;br&gt; Inaccessible means it does not have to be accessible on the aircraft.  Accessible means it must be fully accessible on the aircraft, and is more strictly controlled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DangerousGoodsDetailAccessibility Accessibility { get; set; }

        /// <summary>
        /// Indicate the emergency telephone/contact number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emergencyContactNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmergencyContactNumber { get; set; }

        /// <summary>
        /// Specify the special handling requested for the package.&lt;br&gt; Example: BATTERY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Options>? Options { get; set; }

        /// <summary>
        /// Indicate one or more containers used to pack dangerous goods commodities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("containers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DangerousGoodsContainer>? Containers { get; set; }

        /// <summary>
        /// The hazardous package shipment regulation type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regulation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DangerousGoodsDetailRegulation Regulation { get; set; }

        [Newtonsoft.Json.JsonProperty("packaging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityPackagingDetail? Packaging { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Dangerous Goods Container
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DangerousGoodsContainer
    {
        /// <summary>
        /// Specify the shipper name(offeror) or contact number. Required on all shipping papers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offeror", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Offeror { get; set; }

        /// <summary>
        /// Specify the kinds and quantities of all hazardous commodities in the current container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hazardousCommodities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HazardousCommodityContent>? HazardousCommodities { get; set; }

        /// <summary>
        /// Indicate the number of containers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfContainers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfContainers { get; set; }

        /// <summary>
        /// Indicate the type of container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("containerType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ContainerType { get; set; }

        [Newtonsoft.Json.JsonProperty("emergencyContactNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PhoneNumber? EmergencyContactNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("packaging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityPackagingDetail? Packaging { get; set; }

        /// <summary>
        /// Indicate the packing type used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DangerousGoodsContainerPackingType PackingType { get; set; }

        /// <summary>
        /// Indicate the packaging type of the container used to package the radioactive materials.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("radioactiveContainerClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DangerousGoodsContainerRadioactiveContainerClass RadioactiveContainerClass { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Documents the kind and quantity of an individual hazardous commodity in a package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityContent
    {
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityQuantityDetail? Quantity { get; set; }

        /// <summary>
        /// Specifies the inner receptacles within the container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("innerReceptacles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HazardousCommodityInnerReceptacleDetail>? InnerReceptacles { get; set; }

        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityOptionDetail? Options { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityDescription? Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies Hazardous Commodity Quantity Detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityQuantityDetail
    {
        /// <summary>
        /// Specifies type of a quantity unit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HazardousCommodityQuantityDetailQuantityType QuantityType { get; set; }

        /// <summary>
        /// Specifies amount details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Specify unit details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This describes information about the inner receptacles for the hazardous commodity in a particular dangerous goods container.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityInnerReceptacleDetail
    {
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityQuantityDetail? Quantity { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer-provided specifications for handling individual commodities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityOptionDetail
    {
        /// <summary>
        /// Specifies how the customer wishes the label text to be handled for this commodity in this package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelTextOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HazardousCommodityOptionDetailLabelTextOption LabelTextOption { get; set; }

        /// <summary>
        /// Text used in labeling the commodity under control of the labelTextOption field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerSuppliedLabelText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerSuppliedLabelText { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identifies and describes an individual hazardous commodity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityDescription
    {
        /// <summary>
        /// In conjunction with the regulatory identifier, this field uniquely identifies a specific hazardous materials commodity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// Indicates any special processing options to be applied to the description of the dangerous goods commodity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("processingOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ProcessingOptions>? ProcessingOptions { get; set; }

        /// <summary>
        /// Specifies the hazardous material subsidiary classes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subsidiaryClasses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? SubsidiaryClasses { get; set; }

        /// <summary>
        /// Specifies the DOT diamond hazard label type. This element can also include limited quantity or exemption number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LabelText { get; set; }

        /// <summary>
        /// Specify the technical name for the hazardous commodity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("technicalName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TechnicalName { get; set; }

        [Newtonsoft.Json.JsonProperty("packingDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityPackingDetail? PackingDetails { get; set; }

        /// <summary>
        /// Information related to quantity limitations and operator or state variations as may be applicable to the dangerous goods commodity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Authorization { get; set; }

        /// <summary>
        /// The element specifies the reportable quantity of the hazardous material.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportableQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReportableQuantity { get; set; }

        /// <summary>
        /// Indicates the percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Percentage { get; set; }

        /// <summary>
        /// Specifies the ID of label text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; }

        /// <summary>
        /// Identifies IATA packing group for a hazardous commodity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packingGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HazardousCommodityDescriptionPackingGroup PackingGroup { get; set; }

        /// <summary>
        /// The proper shipping name as defined by the regulation.&lt;br&gt;The name can also include qualifying words.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properShippingName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ProperShippingName { get; set; }

        /// <summary>
        /// Specify hazard class for commodity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hazardClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HazardClass { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies documentation and limits for validation of an individual packing group/category.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityPackingDetail
    {
        /// <summary>
        /// Indicates the coded specification for how commodity is to be packed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packingInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PackingInstructions { get; set; }

        /// <summary>
        /// Indicates the shipment is packaged/documented for movement ONLY on cargo aircraft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cargoAircraftOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CargoAircraftOnly { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the telephone number to use for contact in the event of an emergency.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PhoneNumber
    {
        /// <summary>
        /// Indicates the area code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("areaCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? AreaCode { get; set; }

        /// <summary>
        /// Indicates the Extension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Extension { get; set; }

        /// <summary>
        /// The two-letter code used to identify a country.&lt;br&gt;Example: US
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Indicates the Personal Identification Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalIdentificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonalIdentificationNumber { get; set; }

        /// <summary>
        /// Telephone number to use for contact in the event of an emergency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identifies number and type of packaging units for hazardous commodities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityPackagingDetail
    {
        /// <summary>
        /// Indicate the number and type of packaging units for dangerous goods.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }

        /// <summary>
        /// Specify the unit of the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates package COD Detail.  COD main information is set in shipment level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageSpecialServicesRequestedPackageCODDetail
    {
        [Newtonsoft.Json.JsonProperty("codCollectionAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money_1? CodCollectionAmount { get; set; }

        /// <summary>
        /// Indicate the type of funds FedEx should collect upon shipment delivery. &lt;br&gt; Conditionally required for Ground COD rates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codCollectionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageSpecialServicesRequestedPackageCODDetailCodCollectionType CodCollectionType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describe the attributes of a battery or cell that are used for classification purposes. Typically this structure would be used to allow customers to declare batteries or cells for which full dangerous goods documentation and procedures are not required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatteryClassificationDetail
    {
        /// <summary>
        /// Specify the material composition of the battery or cell.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("material", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BatteryClassificationDetailMaterial Material { get; set; }

        /// <summary>
        /// Specify the regulation specific classification for the battery or cell.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regulatorySubType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BatteryClassificationDetailRegulatorySubType RegulatorySubType { get; set; }

        /// <summary>
        /// Indicate the packing arrangement of the battery or cell with respect to other items within the same package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BatteryClassificationDetailPacking Packing { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the party to a transaction including the physical address, contact information and account number information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Party_2
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address_2? Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact_2? Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountNumber? AccountNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the contact details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact_2
    {
        /// <summary>
        /// Specify contact name.&lt;br&gt;Note: Recommended Length is 70. There's no specific validation for the length.&lt;br&gt; Example: John Taylor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonName { get; set; }

        /// <summary>
        /// Specify contact email address. Maximum length is 80. &lt;br&gt; Example: sample@company.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmailAddress { get; set; }

        /// <summary>
        /// Specify contact phone number. Maximum length is 15. &lt;br&gt; Example: 1234567890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneNumber { get; set; }

        /// <summary>
        /// Specify contact phone extension. Maximum length is 6. &lt;br&gt; Example: 1234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneExtension { get; set; }

        /// <summary>
        /// Specify contact fax number. Maximum length is 15. &lt;br&gt; Example: 1234567890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FaxNumber { get; set; }

        /// <summary>
        /// Specify contact company name. Maximum length is 35.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CompanyName { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate special services for which the rate data is being requested. Special Services are available at the shipment level for some or all service types.&lt;br&gt;Example: [BROKER_SELECT_OPTION]&lt;br&gt;&lt;a onclick='loadDocReference("shipmentlevelspecialservicetypes")'&gt;Click here to see Shipment level Special Service Types&lt;/a&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestedShipmentSpecialServicesRequested
    {
        [Newtonsoft.Json.JsonProperty("returnShipmentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentSpecialServicesRequested_returnShipmentDetail? ReturnShipmentDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryOnInvoiceAcceptanceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeliveryOnInvoiceAcceptanceDetail? DeliveryOnInvoiceAcceptanceDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("internationalTrafficInArmsRegulationsDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InternationalTrafficInArmsRegulationsDetail? InternationalTrafficInArmsRegulationsDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("pendingShipmentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PendingShipmentDetail? PendingShipmentDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("holdAtLocationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HoldAtLocationDetail? HoldAtLocationDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentCODDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentSpecialServicesRequestedShipmentCODDetail? ShipmentCODDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentDryIceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentDryIceDetail? ShipmentDryIceDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("internationalControlledExportDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InternationalControlledExportDetail? InternationalControlledExportDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("homeDeliveryPremiumDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomeDeliveryPremiumDetail? HomeDeliveryPremiumDetail { get; set; }

        /// <summary>
        /// Indicate special services for which the rate data is being requested. Special Services are available at the shipment level for some or all service types.&lt;br&gt;Example: BROKER_SELECT_OPTION &lt;br&gt;&lt;a onclick='loadDocReference("shipmentlevelspecialservicetypes")'&gt;Click here to see Shipment level Special Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialServiceTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? SpecialServiceTypes { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the Delivery On Invoice Acceptance detail. Recipient is required for Delivery On Invoice Special service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryOnInvoiceAcceptanceDetail
    {
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeliveryOnInvoiceAcceptanceDetailRecipient? Recipient { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryOnInvoiceAcceptanceDetailRecipient : Party_2
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        public DeliveryOnInvoiceAcceptanceDetailRecipient_address? Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Always)]
        public DeliveryOnInvoiceAcceptanceDetailRecipient_contact? Contact { get; set; }

    }

    /// <summary>
    /// These are International Traffic In Arms Regulations shipment service Details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternationalTrafficInArmsRegulationsDetail
    {
        /// <summary>
        /// The export or license number for the ITAR shipment.&lt;br&gt;Example: 9871234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("licenseOrExemptionNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LicenseOrExemptionNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This object is used to specify the Pending Shipment Type for Email label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PendingShipmentDetail
    {
        /// <summary>
        /// This is Pending Shipment Type. Must include the value EMAIL for email return shipments.&lt;br&gt;Not applicable for other types of shipments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pendingShipmentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PendingShipmentDetailPendingShipmentType PendingShipmentType { get; set; }

        [Newtonsoft.Json.JsonProperty("processingOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PendingShipmentProcessingOptionsRequested? ProcessingOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("recommendedDocumentSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecommendedDocumentSpecification? RecommendedDocumentSpecification { get; set; }

        [Newtonsoft.Json.JsonProperty("emailLabelDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailLabelDetail? EmailLabelDetail { get; set; }

        /// <summary>
        /// These are Upload document details provided by the initiator of the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UploadDocumentReferenceDetail>? DocumentReferences { get; set; }

        /// <summary>
        /// Specify the Email Return Label expiration date. The Maximum expiration date for an Email Return Label must be greater or equal to the day of the label request and not greater than 2 years in the future.&lt;br&gt;Example: 2012-12-31.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationTimeStamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExpirationTimeStamp { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentDryIceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentDryIceDetail? ShipmentDryIceDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify the processing options associated with Pending Shipment request. This is useful for the Email Label originator to specify if the completer can make modifications to editable shipment data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PendingShipmentProcessingOptionsRequested
    {
        /// <summary>
        /// These are Pending Shipment processing options.&lt;br&gt; Example: ["ALLOW_MODIFICATIONS"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Options2>? Options { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are recommended document specification which are recommended to be included with the shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecommendedDocumentSpecification
    {
        /// <summary>
        /// This is a document type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Types>? Types { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes specific information about the email label shipment.&lt;ul&gt;&lt;li&gt;Message: Content of the email message&lt;/li&gt;&lt;li&gt;Recipients: EMailRecipient&lt;/li&gt;&lt;li&gt;emailAddress - email address of the recipient&lt;/li&gt;&lt;li&gt;role - role type of the recipient&lt;/li&gt;&lt;li&gt;optionsRequested&lt;/li&gt;&lt;li&gt;localization&lt;/li&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailLabelDetail
    {
        /// <summary>
        /// Describes specific information about the list of email label shipment reipients.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EmailRecipient>? Recipients { get; set; }

        /// <summary>
        /// customer specified message to be included in the email to the end-user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify the recipient email information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailRecipient
    {
        /// <summary>
        /// This is the placeholder for Email address of the end-user to be  notified of the return label. Maximum length is 200 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? EmailAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("optionsRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailOptionsRequested? OptionsRequested { get; set; }

        /// <summary>
        /// Specifies the role of the recipient to the pending shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailRecipientRole Role { get; set; }

        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Locale? Locale { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates how the email notifications for the pending shipment need to be processed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailOptionsRequested
    {
        /// <summary>
        /// Specifies the options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Options3>? Options { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are Locale details.&lt;br&gt;Note: If the locale is left blank or an invalid locale is entered, an error message is returned in response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Locale
    {
        /// <summary>
        /// This is country code.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Country { get; set; }

        /// <summary>
        /// This is language code.&lt;br&gt;Example: en&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locale&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Language { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Upload document details provided by the initator of the shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UploadDocumentReferenceDetail
    {
        /// <summary>
        /// These are the type of document specified in the PendingShipment request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadDocumentReferenceDetailDocumentType DocumentType { get; set; }

        /// <summary>
        /// Customer Reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerReference { get; set; }

        /// <summary>
        /// Indicate description of the shipping documents produced for the shipper by FedEx (see ShippingDocumentSpecification) which should be copied back to the shipper in the shipment result data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Specify the document ID for the uploaded document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DocumentId { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to indicate package count with weight for this shipment containing dry ice. Dry ice is supported in both shipment level and package level services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentDryIceDetail
    {
        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight_1_2? TotalWeight { get; set; }

        /// <summary>
        /// This is package count.&lt;br&gt;Example: 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PackageCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify required information for a shipment to be held at destination FedEx location. &lt;br&gt;&lt;br&gt;&lt;i&gt;Note: This object HoldAtLocationDetail is &lt;b&gt;REQUIRED&lt;/b&gt;, when HOLD_AT_LOCATION is chosen in the specialServiceTypes.&lt;/i&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HoldAtLocationDetail
    {
        /// <summary>
        /// This is an alphanumeric identifier used for Location/Facility Identification.&lt;br&gt;&lt;br&gt;Example: YBZA&lt;br&gt;&lt;br&gt;Note: &lt;i&gt;&lt;ul&gt;&lt;li&gt;For HAL Shipment, Location ID is &lt;b&gt;REQUIRED&lt;/b&gt; to ensure packages are delivered to the right location.&lt;/li&gt;&lt;li&gt;Use endpoint [&lt;b&gt;Find Location&lt;/b&gt;] in [&lt;b&gt;Location Search API&lt;/b&gt;], to find the correct location ID for your shipment.&lt;/li&gt;&lt;/ul&gt;&lt;/i&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? LocationId { get; set; }

        [Newtonsoft.Json.JsonProperty("locationContactAndAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactAndAddress? LocationContactAndAddress { get; set; }

        /// <summary>
        /// Specify the Location Type.&lt;br&gt; Example: FEDEX_ONSITE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HoldAtLocationDetailLocationType LocationType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the contact and address details of a location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAndAddress
    {
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact_2? Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address_1? Address { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is detailed information on physical location. May be used as an actual physical address (place to which one could go), or as a container of address parts which should be handled as a unit (such as a city-state-ZIP combination within the US). Country code is required. Postal code is required for postal aware countries. State or province code is mandatory for Puerto Rico.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address_1
    {
        /// <summary>
        /// Specify name of city, town, etc.&lt;br&gt; Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; }

        /// <summary>
        /// Specify State or province code. Maximum length is 2.State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2.&lt;br&gt; Example: CA &lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;Click here to see State Or Province Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StateOrProvinceCode { get; set; }

        /// <summary>
        /// Specify the postal code. This is optional for non postal- aware countries. Maximum length is 10.&lt;br&gt; Example: 65247&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;Click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; }

        /// <summary>
        /// The two-letter country code. Maximum length is 2.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is residential (as opposed to commercial).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies Shipment COD Detail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentSpecialServicesRequestedShipmentCODDetail
    {
        [Newtonsoft.Json.JsonProperty("addTransportationChargesDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CODTransportationChargesDetail? AddTransportationChargesDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("codRecipient", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party_2? CodRecipient { get; set; }

        /// <summary>
        /// Specifies the name of person or company receiving the secured or unsecured payment.&lt;br&gt;Example: FedEx
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remitToName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RemitToName { get; set; }

        /// <summary>
        /// Indicate the type of funds FedEx should collect upon shipment delivery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codCollectionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentSpecialServicesRequestedShipmentCODDetailCodCollectionType CodCollectionType { get; set; }

        [Newtonsoft.Json.JsonProperty("financialInstitutionContactAndAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactAndAddress? FinancialInstitutionContactAndAddress { get; set; }

        /// <summary>
        /// Indicate the type of reference information to include on the COD return shipping label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnReferenceIndicatorType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentSpecialServicesRequestedShipmentCODDetailReturnReferenceIndicatorType ReturnReferenceIndicatorType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are COD Transportation Charges Detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CODTransportationChargesDetail
    {
        /// <summary>
        /// Specify COD Rate Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CODTransportationChargesDetailRateType RateType { get; set; }

        /// <summary>
        /// Specify whether the rate applied on bundle or indiividual package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateLevelType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CODTransportationChargesDetailRateLevelType RateLevelType { get; set; }

        /// <summary>
        /// Specify whether the charges applied on current or all packages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chargeLevelType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CODTransportationChargesDetailChargeLevelType ChargeLevelType { get; set; }

        /// <summary>
        /// Specify the Charges Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chargeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CODTransportationChargesDetailChargeType ChargeType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify International Controlled Export shipment Details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternationalControlledExportDetail
    {
        /// <summary>
        /// Indicate International Controlled Export Type.&lt;br&gt;Example: WAREHOUSE_WITHDRAWAL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InternationalControlledExportDetailType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are Special service elements for FedEx Ground Home Delivery shipments. If selected, element homedeliveryPremiumType is mandatory.
    /// <br/>
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HomeDeliveryPremiumDetail
    {
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party_PhoneNumber? PhoneNumber { get; set; }

        /// <summary>
        /// This is shipment date. Both the date and time portions of the string are expected to be used. The date should not be a past date or a date more than 10 days in the future. The time is the local time of the shipment based on the shipper's time zone.&lt;br&gt;Format: YYYY-MM-DD. &lt;br&gt;Example: 2019-06-26.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShipTimestamp { get; set; }

        /// <summary>
        /// This is Home Delivery Premium Type. It allows to specify additional premimum service options for the home delivery shipment. Can specify Evening delivery or a Date certain, or can specify appointment for the delivery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homedeliveryPremiumType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HomeDeliveryPremiumDetailHomedeliveryPremiumType HomedeliveryPremiumType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the phone number. Only numeric values allowed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Party_PhoneNumber
    {
        /// <summary>
        /// Indicate the area Code for the phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("areaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AreaCode { get; set; }

        /// <summary>
        /// Indicate the extension for the phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Extension { get; set; }

        /// <summary>
        /// Indicate the two-letter country code.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Indicate the Personal Identification Number associated with the phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalIdentificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonalIdentificationNumber { get; set; }

        /// <summary>
        /// Indicate the local phone number for contacting in the event of an emergency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is Customs clearance data, used for both international and intra-country shipping and rating. Customs commodity data is required for international and intra-country rating. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestedShipmentCustomsClearanceDetail
    {
        /// <summary>
        /// Conditional.&lt;br&gt;Required if BROKER_SELECT_OPTION is specified as a shipment special service type.  A country code must be specified in addition to one of the following address items: postal code, city, or location id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BrokerDetail>? Brokers { get; set; }

        [Newtonsoft.Json.JsonProperty("commercialInvoice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommercialInvoice? CommercialInvoice { get; set; }

        /// <summary>
        ///  Indicates Freight on value for customs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightOnValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestedShipmentCustomsClearanceDetailFreightOnValue FreightOnValue { get; set; }

        [Newtonsoft.Json.JsonProperty("dutiesPayment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Payment? DutiesPayment { get; set; }

        /// <summary>
        /// Specify the commodity details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commodities", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Commodity> Commodities { get; set; } = new System.Collections.ObjectModel.Collection<Commodity>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The Commercial Invoice element is required for electronic upload of CI data. It will serve to create/transmit an electronic Commercial Invoice through the FedEx system.&lt;br&gt;Customers are responsible for printing their own Commercial Invoice.&lt;br&gt;If you would like FedEx to generate a Commercial Invoice and transmit it to Customs for clearance purposes, you need to specify that in the 'ETDDetail/RequesteDocumentCopies' element.&lt;br&gt; Support consists of a Maximum of 99 commodity line items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommercialInvoice
    {
        /// <summary>
        /// The reason for the shipment.  Note: SOLD is not a valid purpose for a Proforma Invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentPurpose", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommercialInvoiceShipmentPurpose ShipmentPurpose { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are details about shipment payment. Value payor is optional when paymentType provided as SENDER.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payment
    {
        [Newtonsoft.Json.JsonProperty("payor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Payor? Payor { get; set; }

        /// <summary>
        /// Indicate the payment Type. Applicable for Express and Ground rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentType PaymentType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is payer Information responsible for paying for the shipment.&lt;br&gt;Note: Optional when paymentType is SENDER.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payor
    {
        /// <summary>
        /// These are payer details such as address, account and contacts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responsibleParty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResponsibleParty? ResponsibleParty { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Commodity
    {
        /// <summary>
        /// Indicate the description of the dutiable packages.&lt;br&gt; Maximum Length is 450. &lt;br&gt; Example: DOCUMENTS &lt;br&gt;&lt;a onclick='loadDocReference("vaguecommoditydescriptions")'&gt;Click here to see Vague commodity descriptions&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Specify the Total weight of this commodity. This element is used to estimate duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight_2? Weight { get; set; }

        /// <summary>
        /// Specify the total number of units (using quantityUnits as the unit of measure) of this commodity present in the shipment. This element is used to estimate duties and taxes. &lt;br&gt;Example: 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }

        /// <summary>
        /// Specify the required Customs value for this commodity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customsValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? CustomsValue { get; set; }

        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnitPrice? UnitPrice { get; set; }

        /// <summary>
        /// Specifies the number of pieces for this commodity.&lt;br&gt;Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfPieces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfPieces { get; set; }

        /// <summary>
        /// This is a manufacturing country. Maximum field Length is 4&lt;br&gt; Example: IN
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryOfManufacture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryOfManufacture { get; set; }

        /// <summary>
        /// Indicate quantiy unit used. Used to estimate duties and taxes &lt;br&gt; Example: PCS&lt;br&gt;&lt;a onclick='loadDocReference("harmonizedsystemcodeunitofmeasure-table1")'&gt;click here to see Commodity Unit Measures&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityUnits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? QuantityUnits { get; set; }

        /// <summary>
        /// Indicate the Commodity name&lt;br&gt;Example: DOCUMENTS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; }

        /// <summary>
        /// This is to specify the Harmonized Tariff System (HTS) code to meet U.S. and foreign governments' customs requirements. These are mainly used to estimate the duties and taxes.&lt;br&gt;Example: A six digit code for Almonds fresh or dried is 080211. The HTS code for pistachios in shell is 080251. The HTS code for fish is HS203.&lt;br&gt;To research the classification for your commodity, use the FedEx Global Trade Manager online at &lt;a href='http://www.fedex.com/gtm' target='_blank'&gt;fedex.com/gtm&lt;/a&gt;. You can find the commodities and its respective codes by logging into FedEx and selecting harmonized code option. You will find country-specific information to determine whether your commodity is considered to be a document or non-document for your destination. &lt;br&gt;For additional information about harmonized code, refer to &lt;a href='https://www.usitc.gov/documents/hts_external_guide.pdf' target='_blank'&gt;harmonized code&lt;/a&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("harmonizedCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HarmonizedCode { get; set; }

        /// <summary>
        /// Specify the part number if any. Example: P1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PartNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// service type information details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceTypeDetailVO
    {
        /// <summary>
        /// Identifies which carrier is being described.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceTypeDetailVOCarrierCode CarrierCode { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Service Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceName { get; set; }

        /// <summary>
        /// Service Category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceCategory { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify the smartpost shipment details. &lt;br&gt;Required for SMARTPOST service. If SmartPostInfoDetail is indicated, the elements below it are also required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestedShipmentSmartPostInfoDetail
    {
        /// <summary>
        /// Indicate the type of ancillary endorsement. Is required for Presorted Standard but not for returns or parcel select. Note not all are usable for all ancillary endorsements.&lt;br&gt;For more information, refer to the &lt;a href = 'https://www.fedex.com/en-us/shipping/fedex-smartpost/rates-zones.html' target='_blank'&gt;FedEx SmartPost®&lt;/a&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ancillaryEndorsement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestedShipmentSmartPostInfoDetailAncillaryEndorsement AncillaryEndorsement { get; set; }

        /// <summary>
        /// Specify the four-digit numeric Hub ID value used during rate quote for smartport shipments.&lt;br&gt;&lt;a onclick='loadDocReference("smartposthubids")'&gt;Click here to see Hub Ids&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hubId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HubId { get; set; }

        /// <summary>
        /// Specify the indicia type.&lt;br&gt;Available options include:&lt;ul&gt;&lt;li&gt;MEDIA_MAIL&lt;/li&gt;&lt;li&gt;PARCEL_SELECT (1 LB through 70 LB)&lt;/li&gt;&lt;li&gt;PRESORTED_BOUND_PRINTED_MATTER&lt;/li&gt;&lt;li&gt;PRESORTED_STANDARD (less than 1 LB)&lt;/li&gt;&lt;li&gt;PARCEL_RETURN&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("indicia", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestedShipmentSmartPostInfoDetailIndicia Indicia { get; set; }

        /// <summary>
        /// Specify the special handling associated with Smartpost Shipment.&lt;br&gt;&lt;a onclick='loadDocReference("shipmentlevelspecialservicetypes")'&gt;Click here to see Shipment Level Special Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestedShipmentSmartPostInfoDetailSpecialServices SpecialServices { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Conditional"
    /// <br/>Details specific to a FedEx Express Freight® shipment (i.e. FedEx First Freight, FedEx 1Day, 2Day, and 3Day Freight).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpressFreightDetail
    {
        /// <summary>
        /// An advance booking number is optional for FedEx 1Day Freight. When you call 1.800.332.0807 to book your freight shipment, you will receive a booking number. This booking number is included in the Ship request, and prints on the shipping label
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingConfirmationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BookingConfirmationNumber { get; set; }

        /// <summary>
        /// Describes the shippers loaded total package counts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippersLoadAndCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ShippersLoadAndCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class US_Domestic_Rate_shop
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Alternate_Currency_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Express_Freight_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class International_Hold_At_Location_with_Adult_Signature_Option
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class International_Multi_Piece_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class International_Return_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Intra_Canada_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Intra_Europe_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Intra_India_Cash_On_Delivery_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Intra_Mexico_Express_Saver_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Priority_Alert_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Express_Freight_Saturday_Pickup_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SmartPost_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class International_Dry_Ice_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class US_Domestic_Multi_Piece_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class US_Domestic_Priority_Overnight_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ground_Home_Delivery_Appointment_Delivery_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class International_Ground_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class International_Priority_Rate_Quote
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies Printed Reference.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EMailNotificationDetail_PrintedReference
    {
        /// <summary>
        /// Indicates the printed reference type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printedReferenceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EMailNotificationDetail_PrintedReferencePrintedReferenceType PrintedReferenceType { get; set; }

        /// <summary>
        /// Specifies printed reference value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details for the Return Shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentSpecialServicesRequested_returnShipmentDetail
    {
        /// <summary>
        /// The type of return shipment being requested. 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentSpecialServicesRequested_returnShipmentDetailReturnType ReturnType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryOnInvoiceAcceptanceDetailRecipient_address
    {
        /// <summary>
        /// This is the combination of number, street name, etc. &lt;br&gt;Note: At least one line is required and streetlines more than 3 will be ignored. Empty lines should not be included. Maximum Length per line is 35.&lt;br&gt;Example: [10 FedEx Parkway, Suite 302, .etc.]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StreetLines { get; set; }

        /// <summary>
        /// The two-letter country code. &lt;br&gt;Maximum length is 2.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? CountryCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryOnInvoiceAcceptanceDetailRecipient_contact
    {
        /// <summary>
        /// This is a placeholder for company name. Maximum length is 35.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? CompanyName { get; set; }

        /// <summary>
        /// This is a placeholder for Fax number. Maximum length is 15.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FaxNumber { get; set; }

        /// <summary>
        /// This is a placeholder for contact person's name. Maximum Length is 70.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? PersonName { get; set; }

        /// <summary>
        /// This is a placeholder for phone number associated with this contact. Maximum length is 15.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? PhoneNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RatedShipmentDetailRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL")]
        ACTUAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENT")]
        CURRENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LIST")]
        LIST = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INCENTIVE")]
        INCENTIVE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED")]
        PREFERRED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED_INCENTIVE")]
        PREFERRED_INCENTIVE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED_CURRENCY")]
        PREFERRED_CURRENCY = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RatedShipmentDetailRatedWeightMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL")]
        ACTUAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AVERAGE_PACKAGE_WEIGHT_MINIMUM")]
        AVERAGE_PACKAGE_WEIGHT_MINIMUM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT_WEIGHT_APPLIED")]
        DEFAULT_WEIGHT_APPLIED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BALLOON")]
        BALLOON = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DIM")]
        DIM = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FREIGHT_MINIMUM")]
        FREIGHT_MINIMUM = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MIXED")]
        MIXED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERSIZE")]
        OVERSIZE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERSIZE_1")]
        OVERSIZE_1 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERSIZE_2")]
        OVERSIZE_2 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERSIZE_3")]
        OVERSIZE_3 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PACKAGING_MINIMUM")]
        PACKAGING_MINIMUM = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"WEIGHT_BREAK")]
        WEIGHT_BREAK = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RatedShipmentDetailFreightChargeBasis
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CWT")]
        CWT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FLAT")]
        FLAT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MINIMUM")]
        MINIMUM = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingWeight : Weight
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Weight_1Units
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipmentRateDetailRatingBasis
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPMENT_WEIGHT_BASED")]
        SHIPMENT_WEIGHT_BASED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FLAT_RATE_PER_PACK")]
        FLAT_RATE_PER_PACK = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PACK_WEIGHT_BASED")]
        PACK_WEIGHT_BASED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BrokerDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXPORT")]
        EXPORT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommitDaysInTransit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EIGHT_DAYS")]
        EIGHT_DAYS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EIGHTEEN_DAYS")]
        EIGHTEEN_DAYS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ELEVEN_DAYS")]
        ELEVEN_DAYS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FIFTEEN_DAYS")]
        FIFTEEN_DAYS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FIVE_DAYS")]
        FIVE_DAYS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FOUR_DAYS")]
        FOUR_DAYS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FOURTEEN_DAYS")]
        FOURTEEN_DAYS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NINE_DAYS")]
        NINE_DAYS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NINETEEN_DAYS")]
        NINETEEN_DAYS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ONE_DAY")]
        ONE_DAY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SEVEN_DAYS")]
        SEVEN_DAYS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SEVENTEEN_DAYS")]
        SEVENTEEN_DAYS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"SIX_DAYS")]
        SIX_DAYS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SIXTEEN_DAYS")]
        SIXTEEN_DAYS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"TEN_DAYS")]
        TEN_DAYS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRTEEN_DAYS")]
        THIRTEEN_DAYS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"THREE_DAYS")]
        THREE_DAYS = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"TWELVE_DAYS")]
        TWELVE_DAYS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"TWENTY_DAYS")]
        TWENTY_DAYS = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TWO_DAYS")]
        TWO_DAYS = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"SMARTPOST_TRANSIT_DAYS")]
        SMARTPOST_TRANSIT_DAYS = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 21,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommitGuaranteedType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GUARANTEED_MORNING")]
        GUARANTEED_MORNING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GUARANTEED_CLOSE_OF_BUSINESS")]
        GUARANTEED_CLOSE_OF_BUSINESS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransitDaysMinimumTransitTime
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EIGHT_DAYS")]
        EIGHT_DAYS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EIGHTEEN_DAYS")]
        EIGHTEEN_DAYS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ELEVEN_DAYS")]
        ELEVEN_DAYS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FIFTEEN_DAYS")]
        FIFTEEN_DAYS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FIVE_DAYS")]
        FIVE_DAYS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FOUR_DAYS")]
        FOUR_DAYS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FOURTEEN_DAYS")]
        FOURTEEN_DAYS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NINE_DAYS")]
        NINE_DAYS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NINETEEN_DAYS")]
        NINETEEN_DAYS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ONE_DAY")]
        ONE_DAY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SEVEN_DAYS")]
        SEVEN_DAYS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"SEVENTEEN_DAYS")]
        SEVENTEEN_DAYS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"SIX_DAYS")]
        SIX_DAYS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SIXTEEN_DAYS")]
        SIXTEEN_DAYS = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"TEN_DAYS")]
        TEN_DAYS = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRTEEN_DAYS")]
        THIRTEEN_DAYS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"THREE_DAYS")]
        THREE_DAYS = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"TWELVE_DAYS")]
        TWELVE_DAYS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"TWENTY_DAYS")]
        TWENTY_DAYS = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TWO_DAYS")]
        TWO_DAYS = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"SMARTPOST_TRANSIT_DAYS")]
        SMARTPOST_TRANSIT_DAYS = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 21,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceSubOptionDetailSmartPostIndiciaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIA_MAIL")]
        MEDIA_MAIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PARCEL_RETURN")]
        PARCEL_RETURN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PARCEL_SELECT")]
        PARCEL_SELECT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PRESORTED_BOUND_PRINTED_MATTER")]
        PRESORTED_BOUND_PRINTED_MATTER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PRESORTED_STANDARD")]
        PRESORTED_STANDARD = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlertType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOTE")]
        NOTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RateRequestControlParametersVariableOptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SATURDAY_DELIVERY")]
        SATURDAY_DELIVERY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FREIGHT_GUARANTEE")]
        FREIGHT_GUARANTEE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SMART_POST_ALLOWED_INDICIA")]
        SMART_POST_ALLOWED_INDICIA = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SMARTPOST_HUB_ID")]
        SMARTPOST_HUB_ID = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RateRequestControlParametersRateSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COMMITASCENDING")]
        COMMITASCENDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SERVICENAMETRADITIONAL")]
        SERVICENAMETRADITIONAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMITDESCENDING")]
        COMMITDESCENDING = 2,

    }

    /// <summary>
    /// Specifies the items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RateRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LIST")]
        LIST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INCENTIVE")]
        INCENTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED")]
        PREFERRED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequestedShipmentPickupType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_FEDEX_TO_SCHEDULE")]
        CONTACT_FEDEX_TO_SCHEDULE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DROPOFF_AT_FEDEX_LOCATION")]
        DROPOFF_AT_FEDEX_LOCATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"USE_SCHEDULED_PICKUP")]
        USE_SCHEDULED_PICKUP = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NotificationEventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ON_DELIVERY")]
        ON_DELIVERY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_EXCEPTION")]
        ON_EXCEPTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_SHIPMENT")]
        ON_SHIPMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_TENDER")]
        ON_TENDER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_ESTIMATED_DELIVERY")]
        ON_ESTIMATED_DELIVERY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_PICKUP")]
        ON_PICKUP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_LABEL")]
        ON_LABEL = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_BILL_OF_LADING")]
        ON_BILL_OF_LADING = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmailNotificationRecipientNotificationFormatType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HTML")]
        HTML = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmailNotificationRecipientType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BROKER")]
        BROKER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER")]
        SHIPPER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_PARTY")]
        THIRD_PARTY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER1")]
        OTHER1 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER2")]
        OTHER2 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmailNotificationRecipientNotificationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
        EMAIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SMS_TEXT_MESSAGE")]
        SMS_TEXT_MESSAGE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? PhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneNumberCountryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? PhoneNumberCountryCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Weight_1_2Units
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Dimensions_1Units
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VariableHandlingChargeDetailRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL")]
        ACTUAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENT")]
        CURRENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LIST")]
        LIST = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INCENTIVE")]
        INCENTIVE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED")]
        PREFERRED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED_INCENTIVE")]
        PREFERRED_INCENTIVE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED_CURRENCY")]
        PREFERRED_CURRENCY = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VariableHandlingChargeDetailRateLevelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLED_RATE")]
        BUNDLED_RATE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INDIVIDUAL_PACKAGE_RATE")]
        INDIVIDUAL_PACKAGE_RATE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VariableHandlingChargeDetailRateElementBasis
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NET_CHARGE")]
        NET_CHARGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_FREIGHT")]
        NET_FREIGHT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BASE_CHARGE")]
        BASE_CHARGE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_CHARGE_EXCLUDING_TAXES")]
        NET_CHARGE_EXCLUDING_TAXES = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PackageSpecialServicesRequestedSignatureOptionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_DEFAULT")]
        SERVICE_DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NO_SIGNATURE_REQUIRED")]
        NO_SIGNATURE_REQUIRED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INDIRECT")]
        INDIRECT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECT")]
        DIRECT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ADULT")]
        ADULT = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlcoholDetailAlcoholRecipientType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LICENSEE")]
        LICENSEE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CONSUMER")]
        CONSUMER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DangerousGoodsDetailAccessibility
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESSIBLE")]
        ACCESSIBLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INACCESSIBLE")]
        INACCESSIBLE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Options
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HAZARDOUS_MATERIALS")]
        HAZARDOUS_MATERIALS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTERY")]
        BATTERY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ORM_D")]
        ORM_D = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REPORTABLE_QUANTITIES")]
        REPORTABLE_QUANTITIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SMALL_QUANTITY_EXCEPTION")]
        SMALL_QUANTITY_EXCEPTION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LIMITED_QUANTITIES_COMMODITIES")]
        LIMITED_QUANTITIES_COMMODITIES = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DangerousGoodsDetailRegulation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADR")]
        ADR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DOT")]
        DOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IATA")]
        IATA = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ORMD")]
        ORMD = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DangerousGoodsContainerPackingType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_PACKED_IN_ONE")]
        ALL_PACKED_IN_ONE = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DangerousGoodsContainerRadioactiveContainerClass
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXCEPTED_PACKAGE")]
        EXCEPTED_PACKAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INDUSTRIAL_IP1")]
        INDUSTRIAL_IP1 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INDUSTRIAL_IP2")]
        INDUSTRIAL_IP2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INDUSTRIAL_IP3")]
        INDUSTRIAL_IP3 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TYPE_A")]
        TYPE_A = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TYPE_B_M")]
        TYPE_B_M = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TYPE_B_U")]
        TYPE_B_U = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TYPE_C")]
        TYPE_C = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HazardousCommodityQuantityDetailQuantityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GROSS")]
        GROSS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NET")]
        NET = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HazardousCommodityOptionDetailLabelTextOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"APPEND")]
        APPEND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERRIDE")]
        OVERRIDE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProcessingOptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INCLUDE_SPECIAL_PROVISIONS")]
        INCLUDE_SPECIAL_PROVISIONS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HazardousCommodityDescriptionPackingGroup
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"II")]
        II = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"III")]
        III = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PackageSpecialServicesRequestedPackageCODDetailCodCollectionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ANY")]
        ANY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH")]
        CASH = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_CHECK")]
        COMPANY_CHECK = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GUARANTEED_FUNDS")]
        GUARANTEED_FUNDS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL_CHECK")]
        PERSONAL_CHECK = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BatteryClassificationDetailMaterial
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LITHIUM_METAL")]
        LITHIUM_METAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LITHIUM_ION")]
        LITHIUM_ION = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BatteryClassificationDetailRegulatorySubType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IATA_SECTION_II")]
        IATA_SECTION_II = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BatteryClassificationDetailPacking
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINED_IN_EQUIPMENT")]
        CONTAINED_IN_EQUIPMENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PACKED_WITH_EQUIPMENT")]
        PACKED_WITH_EQUIPMENT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PendingShipmentDetailPendingShipmentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
        EMAIL = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Options2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOW_MODIFICATIONS")]
        ALLOW_MODIFICATIONS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Types
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ANTIQUE_STATEMENT_EUROPEAN_UNION")]
        ANTIQUE_STATEMENT_EUROPEAN_UNION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ANTIQUE_STATEMENT_UNITED_STATES")]
        ANTIQUE_STATEMENT_UNITED_STATES = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ASSEMBLER_DECLARATION")]
        ASSEMBLER_DECLARATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BEARING_WORKSHEET")]
        BEARING_WORKSHEET = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CERTIFICATE_OF_SHIPMENTS_TO_SYRIA")]
        CERTIFICATE_OF_SHIPMENTS_TO_SYRIA = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET")]
        COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA")]
        CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS")]
        DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLARATION_OF_BIOLOGICAL_STANDARDS")]
        DECLARATION_OF_BIOLOGICAL_STANDARDS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD")]
        DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET")]
        ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FILM_AND_VIDEO_CERTIFICATE")]
        FILM_AND_VIDEO_CERTIFICATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERIM_FOOTWEAR_INVOICE")]
        INTERIM_FOOTWEAR_INVOICE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH")]
        NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH")]
        NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH")]
        NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES")]
        NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PACKING_LIST")]
        PACKING_LIST = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PRINTED_CIRCUIT_BOARD_WORKSHEET")]
        PRINTED_CIRCUIT_BOARD_WORKSHEET = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"REPAIRED_WATCH_BREAKOUT_WORKSHEET")]
        REPAIRED_WATCH_BREAKOUT_WORKSHEET = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES")]
        STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"TOXIC_SUBSTANCES_CONTROL_ACT")]
        TOXIC_SUBSTANCES_CONTROL_ACT = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES")]
        UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES")]
        UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"UNITED_STATES_NEW_WATCH_WORKSHEET")]
        UNITED_STATES_NEW_WATCH_WORKSHEET = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"UNITED_STATES_WATCH_REPAIR_DECLARATION")]
        UNITED_STATES_WATCH_REPAIR_DECLARATION = 25,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmailRecipientRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPMENT_COMPLETOR")]
        SHIPMENT_COMPLETOR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPMENT_INITIATOR")]
        SHIPMENT_INITIATOR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Options3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCE_PAPERLESS_SHIPPING_FORMAT")]
        PRODUCE_PAPERLESS_SHIPPING_FORMAT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPRESS_ADDITIONAL_LANGUAGES")]
        SUPPRESS_ADDITIONAL_LANGUAGES = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPRESS_ACCESS_EMAILS")]
        SUPPRESS_ACCESS_EMAILS = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UploadDocumentReferenceDetailDocumentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CERTIFICATE_OF_ORIGIN")]
        CERTIFICATE_OF_ORIGIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL_INVOICE")]
        COMMERCIAL_INVOICE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ETD_LABEL")]
        ETD_LABEL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NAFTA_CERTIFICATE_OF_ORIGIN")]
        NAFTA_CERTIFICATE_OF_ORIGIN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_RATE_SHEET")]
        NET_RATE_SHEET = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PRO_FORMA_INVOICE")]
        PRO_FORMA_INVOICE = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HoldAtLocationDetailLocationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_AUTHORIZED_SHIP_CENTER")]
        FEDEX_AUTHORIZED_SHIP_CENTER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_OFFICE")]
        FEDEX_OFFICE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_SELF_SERVICE_LOCATION")]
        FEDEX_SELF_SERVICE_LOCATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_STAFFED")]
        FEDEX_STAFFED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RETAIL_ALLICANCE_LOCATION")]
        RETAIL_ALLICANCE_LOCATION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_GROUND_TERMINAL")]
        FEDEX_GROUND_TERMINAL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_ONSITE")]
        FEDEX_ONSITE = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipmentSpecialServicesRequestedShipmentCODDetailCodCollectionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ANY")]
        ANY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH")]
        CASH = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_CHECK")]
        COMPANY_CHECK = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GUARANTEED_FUNDS")]
        GUARANTEED_FUNDS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL_CHECK")]
        PERSONAL_CHECK = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipmentSpecialServicesRequestedShipmentCODDetailReturnReferenceIndicatorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INVOICE")]
        INVOICE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PO")]
        PO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REFERENCE")]
        REFERENCE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TRACKING")]
        TRACKING = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CODTransportationChargesDetailRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL")]
        ACTUAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENT")]
        CURRENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LIST")]
        LIST = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INCENTIVE")]
        INCENTIVE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED")]
        PREFERRED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED_INCENTIVE")]
        PREFERRED_INCENTIVE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED_CURRENCY")]
        PREFERRED_CURRENCY = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CODTransportationChargesDetailRateLevelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLED_RATE")]
        BUNDLED_RATE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INDIVIDUAL_PACKAGE_RATE")]
        INDIVIDUAL_PACKAGE_RATE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CODTransportationChargesDetailChargeLevelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENT_PACKAGE")]
        CURRENT_PACKAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUM_OF_PACKAGES")]
        SUM_OF_PACKAGES = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CODTransportationChargesDetailChargeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COD_SURCHARGE")]
        COD_SURCHARGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_CHARGE")]
        NET_CHARGE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_FREIGHT")]
        NET_FREIGHT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_CUSTOMER_CHARGE")]
        TOTAL_CUSTOMER_CHARGE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InternationalControlledExportDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEA_036")]
        DEA_036 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DEA_236")]
        DEA_236 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEA_486")]
        DEA_486 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DSP_05")]
        DSP_05 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DSP_61")]
        DSP_61 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DSP_73")]
        DSP_73 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DSP_85")]
        DSP_85 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DSP_94")]
        DSP_94 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DSP_LICENSE_AGREEMENT")]
        DSP_LICENSE_AGREEMENT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FROM_FOREIGN_TRADE_ZONE")]
        FROM_FOREIGN_TRADE_ZONE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"WAREHOUSE_WITHDRAWAL")]
        WAREHOUSE_WITHDRAWAL = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HomeDeliveryPremiumDetailHomedeliveryPremiumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"APPOINTMENT")]
        APPOINTMENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DATE_CERTAIN")]
        DATE_CERTAIN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENING")]
        EVENING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequestedShipmentCustomsClearanceDetailFreightOnValue
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CARRIER_RISK")]
        CARRIER_RISK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OWN_RISK")]
        OWN_RISK = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommercialInvoiceShipmentPurpose
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT")]
        GIFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_SOLD")]
        NOT_SOLD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL_EFFECTS")]
        PERSONAL_EFFECTS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REPAIR_AND_RETURN")]
        REPAIR_AND_RETURN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SAMPLE")]
        SAMPLE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SOLD")]
        SOLD = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL")]
        COMMERCIAL = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURN_AND_REPAIR")]
        RETURN_AND_REPAIR = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL_USE")]
        PERSONAL_USE = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SENDER")]
        SENDER = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponsibleParty : Party_2
    {
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object AccountNumber { get; set; } = new object();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitPrice : Money
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceTypeDetailVOCarrierCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FDXE")]
        FDXE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FDXG")]
        FDXG = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FXSP")]
        FXSP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FXFR")]
        FXFR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FDXC")]
        FDXC = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FXCC")]
        FXCC = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequestedShipmentSmartPostInfoDetailAncillaryEndorsement
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADDRESS_CORRECTION")]
        ADDRESS_CORRECTION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CARRIER_LEAVE_IF_NO_RESPONSE")]
        CARRIER_LEAVE_IF_NO_RESPONSE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHANGE_SERVICE")]
        CHANGE_SERVICE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FORWARDING_SERVICE")]
        FORWARDING_SERVICE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURN_SERVICE")]
        RETURN_SERVICE = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequestedShipmentSmartPostInfoDetailIndicia
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIA_MAIL")]
        MEDIA_MAIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PARCEL_RETURN")]
        PARCEL_RETURN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PARCEL_SELECT")]
        PARCEL_SELECT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PRESORTED_BOUND_PRINTED_MATTER")]
        PRESORTED_BOUND_PRINTED_MATTER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PRESORTED_STANDARD")]
        PRESORTED_STANDARD = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequestedShipmentSmartPostInfoDetailSpecialServices
    {

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_DELIVERY_CONFIRMATION")]
        USPS_DELIVERY_CONFIRMATION = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EMailNotificationDetail_PrintedReferencePrintedReferenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BILL_OF_LADING")]
        BILL_OF_LADING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CONSIGNEE_ID_NUMBER")]
        CONSIGNEE_ID_NUMBER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERLINE_PRO_NUMBER")]
        INTERLINE_PRO_NUMBER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PO_NUMBER")]
        PO_NUMBER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER_ID_NUMBER")]
        SHIPPER_ID_NUMBER = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER_ID1_NUMBER")]
        SHIPPER_ID1_NUMBER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER_ID2_NUMBER")]
        SHIPPER_ID2_NUMBER = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipmentSpecialServicesRequested_returnShipmentDetailReturnType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_TAG")]
        FEDEX_TAG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRINT_RETURN_LABEL")]
        PRINT_RETURN_LABEL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL_LABEL")]
        EMAIL_LABEL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_RETURN")]
        NET_RETURN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"VOICE_CALL_TAG")]
        VOICE_CALL_TAG = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response ?? string.Empty;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }
}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603
