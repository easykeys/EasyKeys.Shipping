using System.IO.Compression;

using EasyKeys.Shipping.FedEx.Abstractions.OpenApis.V1.Authorization;
using EasyKeys.Shipping.FedEx.Abstractions.Options;

using Microsoft.Extensions.Options;

using Newtonsoft.Json;

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace EasyKeys.Shipping.FedEx.Abstractions.OpenApis.V1.Ship
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipApi
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public ShipApi(IOptionsMonitor<FedExApiOptions> options, System.Net.Http.HttpClient httpClient)
        {
            _baseUrl = options.CurrentValue.Url;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Create Shipment
        /// </summary>
        /// <remarks>
        /// This endpoint helps you to create shipment requests therebyy validating all the shippingg input information and either generates the labels (if the responses is synchronous) or a job ID if transaction is processed using asynchronous method.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SHPCResponseVO_ShipShipment> Create_ShipmentAsync(Full_Schema_Ship body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return Create_ShipmentAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Shipment
        /// </summary>
        /// <remarks>
        /// This endpoint helps you to create shipment requests therebyy validating all the shippingg input information and either generates the labels (if the responses is synchronous) or a job ID if transaction is processed using asynchronous method.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SHPCResponseVO_ShipShipment> Create_ShipmentAsync(Full_Schema_Ship body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ship/v1/shipments");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SHPCResponseVO_ShipShipment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO401>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO401>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO403>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO403>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO404>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO404>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO500>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO500>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO503>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO503>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel Shipment
        /// </summary>
        /// <remarks>
        /// Use this endpoint to cancel FedEx Express and Ground shipments that have not already been tendered to FedEx. This request will cancel all packages within the shipment.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SHPCResponseVO_CancelShipment> Cancel_ShipmentAsync(Full_Schema_Cancel_Shipment body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return Cancel_ShipmentAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Shipment
        /// </summary>
        /// <remarks>
        /// Use this endpoint to cancel FedEx Express and Ground shipments that have not already been tendered to FedEx. This request will cancel all packages within the shipment.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SHPCResponseVO_CancelShipment> Cancel_ShipmentAsync(Full_Schema_Cancel_Shipment body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ship/v1/shipments/cancel");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SHPCResponseVO_CancelShipment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO_2>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO401_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO401_2>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO403_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO403_2>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO404_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO404_2>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO500_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO500_2>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO503_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO503_2>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Retrieve Async Ship
        /// </summary>
        /// <remarks>
        /// This endpoint helps you to process confirmed shipments asynchronously (above 40 packages) and produce results based on job id.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This transaction Id helps the customers to track the transaction with APIF.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SHPCResponseVO_GetOpenShipmentResults> Get_Confirmed_Shipment_Async_ResultsAsync(string x_customer_transaction_id, string content_type, string x_locale, string authorization, FullSchemaGetConfirmedShipmentAsyncResults body)
        {
            return Get_Confirmed_Shipment_Async_ResultsAsync(x_customer_transaction_id, content_type, x_locale, authorization, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve Async Ship
        /// </summary>
        /// <remarks>
        /// This endpoint helps you to process confirmed shipments asynchronously (above 40 packages) and produce results based on job id.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This transaction Id helps the customers to track the transaction with APIF.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SHPCResponseVO_GetOpenShipmentResults> Get_Confirmed_Shipment_Async_ResultsAsync(string x_customer_transaction_id, string content_type, string x_locale, string authorization, FullSchemaGetConfirmedShipmentAsyncResults body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ship/v1/shipments/results");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SHPCResponseVO_GetOpenShipmentResults>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO_2>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO401_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO401_2>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO403_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO403_2>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO404_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO404_2>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO500_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO500_2>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO503_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO503_2>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Validate Shipment
        /// </summary>
        /// <remarks>
        /// Use this endpoint to verify the accuracy of a shipment request prior to actually submitting shipment request. This allow businesses that receive shipping orders from end-user/customers to verify the shipment information prior to submitting a create shipment request to FedEx and printing a label. If for any reason the information needs to be edited or changed, it can be done while the end-user is still available to confirm the changes.&lt;br&gt;&lt;br&gt;Note:&lt;ul&gt;&lt;li&gt;This is shipment level validation hence supports validation for single piece shipment only.&lt;/li&gt;&lt;li&gt;Shipment validation is supported for all Express and Ground - Domestic as well as international shipments with all applicable special services. &lt;/li&gt;&lt;li&gt;Shipment validation is supported for SmartPost and not for Freight LTL shipments.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SHPCResponseVO_Validate> ShipmentPackageValidateAsync(FullSchemaVerifyShipment body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return ShipmentPackageValidateAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Validate Shipment
        /// </summary>
        /// <remarks>
        /// Use this endpoint to verify the accuracy of a shipment request prior to actually submitting shipment request. This allow businesses that receive shipping orders from end-user/customers to verify the shipment information prior to submitting a create shipment request to FedEx and printing a label. If for any reason the information needs to be edited or changed, it can be done while the end-user is still available to confirm the changes.&lt;br&gt;&lt;br&gt;Note:&lt;ul&gt;&lt;li&gt;This is shipment level validation hence supports validation for single piece shipment only.&lt;/li&gt;&lt;li&gt;Shipment validation is supported for all Express and Ground - Domestic as well as international shipments with all applicable special services. &lt;/li&gt;&lt;li&gt;Shipment validation is supported for SmartPost and not for Freight LTL shipments.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SHPCResponseVO_Validate> ShipmentPackageValidateAsync(FullSchemaVerifyShipment body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ship/v1/shipments/packages/validate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SHPCResponseVO_Validate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO_2>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO_2>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO_2>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO_2>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Tag
        /// </summary>
        /// <remarks>
        /// FedEx creates and delivers a return shipping label to your customer and collects the item for return. Your customer needs to have the package ready for pickup when the FedEx driver arrives. Use this endpoint to create tag requests for FedEx Express and FedEx Ground shipments.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SHPCResponseVO_CreateTag> Create_TagAsync(Full_Schema_Create_Tag body, string x_customer_transaction_id, string content_type, string x_locale, string authorization)
        {
            return Create_TagAsync(body, x_customer_transaction_id, content_type, x_locale, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Tag
        /// </summary>
        /// <remarks>
        /// FedEx creates and delivers a return shipping label to your customer and collects the item for return. Your customer needs to have the package ready for pickup when the FedEx driver arrives. Use this endpoint to create tag requests for FedEx Express and FedEx Ground shipments.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SHPCResponseVO_CreateTag> Create_TagAsync(Full_Schema_Create_Tag body, string x_customer_transaction_id, string content_type, string x_locale, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ship/v1/shipments/tag");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SHPCResponseVO_CreateTag>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO401>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO401>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO403>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO403>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO404>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO404>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO500>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO500>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO503>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO503>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel Tag
        /// </summary>
        /// <remarks>
        /// This endpoint cancels a FedEx Return Tag and the associated pickup for FedEx Express and FedEx Ground shipments if the shipment has not yet been picked up by the courier.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SHPCResponseVO> CancelTagAsync(string shipmentid, string x_customer_transaction_id, string content_type, string x_locale, string authorization, FullSchemaCancelTag body)
        {
            return CancelTagAsync(shipmentid, x_customer_transaction_id, content_type, x_locale, authorization, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Tag
        /// </summary>
        /// <remarks>
        /// This endpoint cancels a FedEx Return Tag and the associated pickup for FedEx Express and FedEx Ground shipments if the shipment has not yet been picked up by the courier.&lt;br&gt;&lt;i&gt;Note: FedEx APIs do not support Cross-Origin Resource Sharing (CORS) mechanism.&lt;/i&gt;
        /// </remarks>
        /// <param name="x_customer_transaction_id">This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply.</param>
        /// <param name="content_type">This is used to indicate the media type of the resource. The media type is a string sent along with the file indicating format of the file.</param>
        /// <param name="x_locale">This indicates the combination of language code and country code.  &lt;a onclick='loadDocReference("locales")'&gt;Click here to see Locales&lt;/a&gt;</param>
        /// <param name="authorization">This indicates the authorization token for the input request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SHPCResponseVO> CancelTagAsync(string shipmentid, string x_customer_transaction_id, string content_type, string x_locale, string authorization, FullSchemaCancelTag body, System.Threading.CancellationToken cancellationToken)
        {
            if (shipmentid == null)
                throw new System.ArgumentNullException("shipmentid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ship/v1/shipments/tag/cancel/{shipmentid}");
            urlBuilder_.Replace("{shipmentid}", System.Uri.EscapeDataString(ConvertToString(shipmentid, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_customer_transaction_id != null)
                        request_.Headers.TryAddWithoutValidation("x-customer-transaction-id", ConvertToString(x_customer_transaction_id, System.Globalization.CultureInfo.InvariantCulture));

                    if (content_type == null)
                        throw new System.ArgumentNullException("content_type");
                    request_.Headers.TryAddWithoutValidation("content-type", ConvertToString(content_type, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_locale != null)
                        request_.Headers.TryAddWithoutValidation("x-locale", ConvertToString(x_locale, System.Globalization.CultureInfo.InvariantCulture));

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SHPCResponseVO>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO_2>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO401_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO401_2>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO403_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO403_2>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO404_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO404_2>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO500_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO500_2>("Failure", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseVO503_2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponseVO503_2>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
#pragma warning disable CS8604 // Possible null reference argument.
                    return new ObjectResponseResult<T>(typedBody, responseText);
#pragma warning restore CS8604 // Possible null reference argument.
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            if (response.Content.Headers.ContentEncoding.Contains("gzip"))
            {
                try
                {
                    using var responseStream = await response.Content.ReadAsStreamAsync();
                    using var decompressionStream = new GZipStream(responseStream, CompressionMode.Decompress);
                    using var decompressedStream = new StreamReader(decompressionStream);
                    var jsonString = await decompressedStream.ReadToEndAsync();
                    var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                    using var jsonReader = new JsonTextReader(decompressedStream);
                    var jsonObject = serializer.Deserialize<T>(jsonReader);
#pragma warning disable CS8604 // Possible null reference argument.
                    return new ObjectResponseResult<T>(jsonObject, jsonString);
#pragma warning restore CS8604 // Possible null reference argument.
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
#pragma warning disable CS8604 // Possible null reference argument.
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
#pragma warning restore CS8604 // Possible null reference argument.
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// The request elements required to create a shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Full_Schema_Ship
    {
        /// <summary>
        /// It specifies the content of the merged pdf URL in the response. The merged pdf URL is generated only if the labelResponseOption is indicated as URL_ONLY.&lt;ul&gt;&lt;li&gt;If the value is 'LABELS_AND_DOCS', then merged (all shipping labels and shipping documents) pdf URL will be returned.&lt;/li&gt;&lt;li&gt;If the value is 'LABELS_ONLY', merged (all shipping labels only) pdf URL will be returned.&lt;/li&gt;&lt;li&gt;If the value is 'NONE', then no merged pdf URL will be returned.&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;This is optional field and will default to LABELS_AND_DOCS.&lt;br&gt;Note: If the value is 'LABELS_ONLY', then the returned merged pdf label will not be in the Base64 encoded format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mergeLabelDocOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Full_Schema_ShipMergeLabelDocOption? MergeLabelDocOption { get; set; }

        [Newtonsoft.Json.JsonProperty("requestedShipment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RequestedShipment RequestedShipment { get; set; } = new RequestedShipment();

        [Newtonsoft.Json.JsonProperty("labelResponseOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LABELRESPONSEOPTIONS LabelResponseOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipperAccountNumber AccountNumber { get; set; } = new ShipperAccountNumber();

        [Newtonsoft.Json.JsonProperty("shipAction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OpenShipmentAction? ShipAction { get; set; }

        [Newtonsoft.Json.JsonProperty("processingOptionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AsynchronousProcessingOptionType_1? ProcessingOptionType { get; set; }

        /// <summary>
        /// This flag is used to specify if the shipment is singleshot mps or one Label at a time, piece by piece shipment. Default is false. If true, one label at a time is processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oneLabelAtATime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OneLabelAtATime { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The descriptive data of the requested shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestedShipment
    {
        /// <summary>
        /// This is the shipment date. Default value is current date in case the date is not provided or a past date is provided.&lt;br&gt;Format [YYYY-MM-DD].&lt;br&gt;Example: 2019-10-14
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDatestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShipDatestamp { get; set; }

        /// <summary>
        /// It is the sum of all declared values of all packages in a shipment. The amount of totalDeclaredValue must be equal to the sum of all the individual declaredValues in the shipment. The declaredValue and totalDeclaredValue must match in all currencies in one shipment. This value represents FedEx maximum liability associated with a shipment. This is including, but not limited to any loss, damage, delay, misdelivery, any failure to provide information, or misdelivery of information related to the Shipment.&lt;br&gt;&lt;i&gt;Note: The totalDeclaredValue should not exceed customsValue.&lt;/i&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDeclaredValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? TotalDeclaredValue { get; set; }

        /// <summary>
        /// Indicate the Shipper contact details for this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipper", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipperParty Shipper { get; set; } = new ShipperParty();

        /// <summary>
        /// Will indicate the party responsible for purchasing the goods shipped from the shipper to the recipient. The sold to party is not necessarily the recipient or the importer of record. The sold to party is relevant when the purchaser, rather than the recipient determines when certain customs regulations apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("soldTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SoldToParty? SoldTo { get; set; }

        /// <summary>
        /// Indicate the descriptive data for the recipient location to which the shipment is to be received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RecipientsParty> Recipients { get; set; } = new System.Collections.ObjectModel.Collection<RecipientsParty>();

        /// <summary>
        /// A unique identifier for a recipient location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientLocationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RecipientLocationNumber { get; set; }

        /// <summary>
        /// Indicate the pickup type method by which the shipment to be tendered to FedEx.&lt;br&gt;&lt;a onclick='loadDocReference("pickuptypes")'&gt;Click here for more information on Pickup Types.&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickupType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestedShipmentPickupType PickupType { get; set; }

        /// <summary>
        /// Indicate the FedEx service type used for this shipment.&lt;br&gt;Example: STANDARD_OVERNIGHT&lt;br&gt;&lt;a onclick='loadDocReference("servicetypes")'&gt;click here to see Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? ServiceType { get; set; }

        /// <summary>
        /// Specify the packaging used.&lt;br&gt;Note: For Express Freight shipments, the packaging will default to YOUR_PACKAGING irrespective of the user provided package type in the request.&lt;br&gt;Example: FEDEX_PAK&lt;br&gt;&lt;a onclick='loadDocReference("packagetypes")'&gt;click here to see Package Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packagingType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? PackagingType { get; set; }

        /// <summary>
        /// Indicate the shipment total weight in pounds.&lt;br&gt;Example: 10.6&lt;br&gt;Note: &lt;ul&gt;&lt;li&gt;This only applies to International shipments and should be used on the first package of a multiple piece shipment.&lt;/li&gt;&lt;li&gt;This value contains 1 explicit decimal position.&lt;/li&gt;&lt;li&gt;For one Label at a time shipments, the unit of totalWeight is considered same as the unit of weight provided in requestedPackageLineItem field.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalWeight { get; set; }

        /// <summary>
        /// Indicate shipment origin address information, if it is different from the shipper address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactAndAddress_1? Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("shippingChargesPayment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Payment ShippingChargesPayment { get; set; } = new Payment();

        [Newtonsoft.Json.JsonProperty("shipmentSpecialServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentSpecialServicesRequested? ShipmentSpecialServices { get; set; }

        [Newtonsoft.Json.JsonProperty("emailNotificationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipShipmentEMailNotificationDetail? EmailNotificationDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("expressFreightDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExpressFreightDetail? ExpressFreightDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("variableHandlingChargeDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VariableHandlingChargeDetail? VariableHandlingChargeDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("customsClearanceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomsClearanceDetail? CustomsClearanceDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("smartPostInfoDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SmartPostInfoDetail? SmartPostInfoDetail { get; set; }

        /// <summary>
        /// Indicate if the shipment be available to be visible/tracked using FedEx InSight&lt;sup&gt;®&lt;/sup&gt; tool. If value indicated as true, only the shipper/payer will have visibility of this shipment in the FedEx InSight&lt;sup&gt;®&lt;/sup&gt; tool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blockInsightVisibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BlockInsightVisibility { get; set; }

        [Newtonsoft.Json.JsonProperty("labelSpecification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LabelSpecification LabelSpecification { get; set; } = new LabelSpecification();

        [Newtonsoft.Json.JsonProperty("shippingDocumentSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentSpecification? ShippingDocumentSpecification { get; set; }

        /// <summary>
        /// Indicate the type of rates to be returned. The account specific rates are returned by default if the account number is specified in the request.&lt;br&gt;Following are values:&lt;ul&gt;&lt;li&gt;LIST - Returns FedEx published list rates in addition to account-specific rates (if applicable).&lt;/li&gt;&lt;li&gt;INCENTIVE - This is one-time discount for incentivising the customer. For more information, contact your FedEx representative.&lt;/li&gt;&lt;li&gt;ACCOUNT - Returns account specific rates (Default).&lt;/li&gt;&lt;li&gt;PREFERRED - Returns rates in the preferred currency specified in the element preferredCurrency.&lt;/li&gt;&lt;li&gt;RETAIL - Returns customer rate from one of retail FedEx service centers.&lt;/li&gt;&lt;/ul&gt;Examples: ["ACCOUNT", "PREFERRED"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateRequestType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<RateRequestType>? RateRequestType { get; set; }

        /// <summary>
        /// Indicate the currency the caller requests to have used in all returned monetary values. Should be Used in conjunction with the element RateRequestType.&lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;click here to see available Currency codes&lt;/a&gt;&lt;br&gt;Note: Incorrect currency codes should not be supplied. The system ignores the incorrect currency code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PreferredCurrency { get; set; }

        /// <summary>
        /// For an MPS, this is the total number of packages in the shipment.Applicable for parent shipment for one label at a time shipments. &lt;br&gt;Example: 25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPackageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalPackageCount { get; set; }

        [Newtonsoft.Json.JsonProperty("masterTrackingId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MasterTrackingId? MasterTrackingId { get; set; }

        /// <summary>
        /// These are one or more package-attribute descriptions, each of which describes an individual package, a group of identical packages, or (for the total-piece-total-weight case) common characteristics of all packages in the shipment.&lt;ul&gt;&lt;li&gt;At least one instance containing the weight for at least one package is required for EXPRESS and GROUND shipments.&lt;/li&gt;&lt;li&gt;Single piece requests will have one RequestedPackageLineItem.&lt;/li&gt;&lt;li&gt;Multiple piece requests will have multiple RequestedPackageLineItems.&lt;/li&gt;&lt;li&gt;Maximum occurrences is 30.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedPackageLineItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RequestedPackageLineItem> RequestedPackageLineItems { get; set; } = new System.Collections.ObjectModel.Collection<RequestedPackageLineItem>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This customs value is applicable for all items(or units) under the specified commodity
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Money
    {
        /// <summary>
        /// This is the amount. Maximum limit is 5 digits before decimal.&lt;br&gt;Example: 12.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// This is the currency code for the amount.&lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;Click here to see Currency codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This customs value is applicable for all items(or units) under the specified commodity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Customs_Money
    {
        /// <summary>
        /// This is the amount. Maximum limit is 5 digits before decimal.&lt;br&gt;Example:  1556.25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// This is the currency code for the amount.&lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;Click here to see Currency codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the Shipper contact details for this shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipperParty
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyAddress Address { get; set; } = new PartyAddress();

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyContact Contact { get; set; } = new PartyContact();

        /// <summary>
        /// This is the tax identification number details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxpayerIdentification>? Tins { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Will indicate the party responsible for purchasing the goods shipped from the shipper to the recipient. The sold to party is not necessarily the recipient or the importer of record. The sold to party is relevant when the purchaser, rather than the recipient determines when certain customs regulations apply.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SoldToParty
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyAddress? Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyContact? Contact { get; set; }

        /// <summary>
        /// Used for adding the tax id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxpayerIdentification>? Tins { get; set; }

        /// <summary>
        /// Identification of a specific FedEx customer account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyAccountNumber? AccountNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is detailed information on physical location. May be used as an actual physical address (place to which one could go), or as a container of address parts which should be handled as a unit (such as a city-state-ZIP combination within the US).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartyAddress
    {
        /// <summary>
        /// Combination of number, street name, etc. At least one line is required for a valid physical address. Empty lines should not be included. Max Length is 35.&lt;br&gt;Example: [1550 Union Blvd,Suite 302]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> StreetLines { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The name of city, town of the recipient.Max length is 35.&lt;br&gt;Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string? City { get; set; }

        /// <summary>
        /// The US States,Canada and Puerto Rico Province codes of the recipient. The Format and presence of this field may vary depending on the country.State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2.&lt;br&gt;Example: CA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StateOrProvinceCode { get; set; }

        /// <summary>
        /// This is the postal code.&lt;br&gt;Note: This is Optional for non postal-aware countries. Maximum length is 10.&lt;br&gt;Example: 65247&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; }

        /// <summary>
        /// This is the two-letter country code.&lt;br&gt;Maximum length is 2.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is residential (as opposed to commercial).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the contact details for this shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartyContact
    {
        /// <summary>
        /// Specify contact name. Maximum length is 70. &lt;br&gt;Note: Either the companyName or personName is mandatory.&lt;br&gt; Example: John Taylor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonName { get; set; }

        /// <summary>
        /// Specify contact email address. Maximum length is 80. &lt;br&gt; Example: sample@company.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmailAddress { get; set; }

        /// <summary>
        /// Specify contact phone extension. Maximum length is 6. &lt;br&gt; Example: 1234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneExtension { get; set; }

        /// <summary>
        /// The shipper's phone number. &lt;br&gt;Minimum length is 10 and supports maximum of 15 for certain countries using longer phone numbers.&lt;br&gt;Note: For US and CA, a phone number must have exactly 10 digits, plus an optional leading country code of '1' or '+1'.&lt;br&gt;Example: 918xxxxx890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? PhoneNumber { get; set; }

        /// <summary>
        /// Specify contact company name. Maximum length is 35. &lt;br&gt;Note: Either the companyName or personName is mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CompanyName { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxpayerIdentification
    {
        /// <summary>
        /// Specify tax ID number. Maximum length is 18. &lt;br&gt;Example: 123567
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Number { get; set; }

        /// <summary>
        /// Indicate the type of tax identification number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tinType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaxpayerIdentificationTinType TinType { get; set; }

        /// <summary>
        /// Specify the reason for using the tax identification number in shipment processing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Usage { get; set; }

        /// <summary>
        /// Specify the tax ID effective date.&lt;br&gt;Example: 2000-01-23T04:56:07.000+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EffectiveDate { get; set; }

        /// <summary>
        /// Specify the tax ID expiration date.&lt;br&gt;Example: 2000-01-23T04:56:07.000+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExpirationDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The descriptive information of the recipient for the shipment and the physical location for the package destination.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecipientsParty
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyAddress Address { get; set; } = new PartyAddress();

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyContact Contact { get; set; } = new PartyContact();

        /// <summary>
        /// This is the tax identification number details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxpayerIdentification>? Tins { get; set; }

        /// <summary>
        /// Specify the delivery instructions to be added with the shipment. Use with Ground Home Delivery.&lt;br&gt;Example: Delivery Instructions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeliveryInstructions { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the contact and address details of a location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAndAddress_1
    {
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact_2? Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address_1? Address { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the contact details of the shipper.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact_2
    {
        /// <summary>
        /// Specify contact person name.&lt;br&gt;Recommended length is 70. &lt;br&gt;Note: There's no specific validation for the person name.&lt;br&gt; Example: John Taylor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonName { get; set; }

        /// <summary>
        /// Specify contact email address. Maximum length is 80. &lt;br&gt; Example: sample@company.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmailAddress { get; set; }

        /// <summary>
        /// Specify contact phone number. &lt;br&gt;Minimum length is 10 and supports maximum of 15 for certain countries using longer phone numbers. &lt;br&gt;Note: Recommended Maximum length is 15 and there's no specific validation will be done for the phone number. &lt;br&gt; Example: 918xxxxx890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneNumber { get; set; }

        /// <summary>
        /// Specify contact phone extension. &lt;br&gt;Note: Recommended length is 6. There's no specific validation for the phone extension. &lt;br&gt; Example: 1234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneExtension { get; set; }

        /// <summary>
        /// Specify contact fax number.&lt;br&gt;Note: Recommended length is 15. There's no specific validation for the fax number.&lt;br&gt; Example: 1234567890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FaxNumber { get; set; }

        /// <summary>
        /// Specify contact company name.&lt;br&gt;Recommended length is 35.&lt;br&gt;Note: There's no specific validation for the company name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CompanyName { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is detailed information on physical location. May be used as an actual physical address (place to which one could go), or as a container of address parts which should be handled as a unit (such as a city-state-ZIP combination within the U.S.).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address_1
    {
        /// <summary>
        /// This is the combination of number, street name, etc. &lt;br&gt;Note: At least one line is required and streetlines more than 3 will be ignored. Empty lines should not be included. Maximum length per line is 35.&lt;br&gt;Example: [10 FedEx Parkway, Suite 302, .etc.]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StreetLines { get; set; }

        /// <summary>
        /// This is a placeholder for City Name.&lt;br&gt;Note: This is conditional and not required in all the requests.&lt;br&gt;Note: It is recommended for Express shipments for the most accurate ODA and OPA surcharges.&lt;br&gt;Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; }

        /// <summary>
        /// This is a placeholder for State or Province code.State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2.&lt;br&gt;Example: CA&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;click here to see State or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StateOrProvinceCode { get; set; }

        /// <summary>
        /// Indicate the Postal code. This is Optional for non postal-aware countries. Maximum length is 10.&lt;br&gt; Example: 65247&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; }

        /// <summary>
        /// This is the two-letter country code.&lt;br&gt;Maximum length is 2.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is residential (as opposed to commercial).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the payment details specifying the method and means of payment to FedEx for providing shipping services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payment
    {
        /// <summary>
        /// Specifies the payment Type. &lt;br&gt;Note: This is required for Express, Ground and SmartPost shipments.&lt;br&gt; The payment type COLLECT is applicable only for Ground shipments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentType PaymentType { get; set; }

        [Newtonsoft.Json.JsonProperty("payor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Payor? Payor { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Payor is mandatory when the paymentType is RECIPIENT, THIRD_PARTY or COLLECT.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payor
    {
        [Newtonsoft.Json.JsonProperty("responsibleParty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ResponsiblePartyParty ResponsibleParty { get; set; } = new ResponsiblePartyParty();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the payer Information responsible for paying for the shipment. &lt;br&gt;Note: ResponsibleParty accountNumber is required for ACCOUNT based services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponsiblePartyParty
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyAddress? Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyContact? Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyAccountNumber AccountNumber { get; set; } = new PartyAccountNumber();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is FedEx Account number details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartyAccountNumber
    {
        /// <summary>
        /// The account number value.Value is required if the paymentType is RECIPIENT, THIRD_PARTY or COLLECT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the special services requested at the shipment level.&lt;br&gt;If the shipper is requesting a special service which requires additional data (such as the COD amount), the shipment special service type must be present in the specialServiceTypes collection, and the supporting detail must be provided in the appropriate sub-object below.&lt;br&gt;RETURN_SHIPMENT is required for creating return shipments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentSpecialServicesRequested
    {
        /// <summary>
        /// Special services requested for the shipment.&lt;br&gt;Example: &lt;ul&gt;&lt;li&gt;HOLD_AT_LOCATION&lt;/li&gt;&lt;li&gt;RETURN_SHIPMENT&lt;/li&gt;&lt;li&gt;BROKER_SELECT_OPTION&lt;/li&gt;&lt;li&gt;CALL_BEFORE_DELIVERY&lt;/li&gt;&lt;li&gt;COD&lt;/li&gt;&lt;li&gt;CUSTOM_DELIVERY_WINDOW&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;a onclick='loadDocReference("shipmentlevelspecialservicetypes")'&gt;click here to see Shipment Special Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialServiceTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? SpecialServiceTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("etdDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ETDDetail? EtdDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("returnShipmentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReturnShipmentDetail? ReturnShipmentDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryOnInvoiceAcceptanceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeliveryOnInvoiceAcceptanceDetail? DeliveryOnInvoiceAcceptanceDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("internationalTrafficInArmsRegulationsDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InternationalTrafficInArmsRegulationsDetail? InternationalTrafficInArmsRegulationsDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("pendingShipmentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PendingShipmentDetail? PendingShipmentDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("holdAtLocationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HoldAtLocationDetail? HoldAtLocationDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentCODDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentCODDetail? ShipmentCODDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentDryIceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentDryIceDetail_1? ShipmentDryIceDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("internationalControlledExportDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InternationalControlledExportDetail? InternationalControlledExportDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("homeDeliveryPremiumDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomeDeliveryPremiumDetail? HomeDeliveryPremiumDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify all information on how the electronic Trade document references used with the shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ETDDetail
    {
        /// <summary>
        /// Use this attribute to specify if the Trade documents will be uploaded post the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Attributes>? Attributes { get; set; }

        /// <summary>
        /// Use this object to specify the details regarding already uploded document(s). This object is required if the documents are uploaded Pre-Shipment uploaded documents. It is recommended to provide values for all elements under this object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachedDocuments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UploadDocumentReferenceDetail>? AttachedDocuments { get; set; }

        /// <summary>
        /// Indicate the types of shipping documents produced for the shipper by FedEx. The types of shipping documents are copied back to the shipper in the shipment result data.&lt;br&gt;Note: For more information document types, refer business overview topic - &lt;a href='#shippingandcustoms'&gt;&lt;b&gt;Shipping and Customs Documents.&lt;/b&gt;&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedDocumentTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<RequestedDocumentTypes>? RequestedDocumentTypes { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the document upload reference details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UploadDocumentReferenceDetail
    {
        /// <summary>
        /// Specify document type for the uploaded document. It should match with the type of uploaded document associated with documentId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadDocumentReferenceDetailDocumentType DocumentType { get; set; }

        /// <summary>
        /// Specify the reference for the uploaded document.This is for the customer to reference their uploaded docs when they retrieve them. Could be anything, order number, po number, whatever the customer used to tie the document to something they would use.&lt;br&gt;Note: Ensure to supply document references in case of  Pre-Shipment document upload.&lt;/br&gt;&lt;br&gt;Example: Reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DocumentReference { get; set; }

        /// <summary>
        /// Specify additional information about the uploaded document for better understanding.&lt;br&gt;Example: Certificate of Origin is uploaded for country of manufacturing verification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// This is the uploaded document ID value.&lt;br&gt;Example: 090927d680038c61
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DocumentId { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object for specifying return shipment details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnShipmentDetail
    {
        [Newtonsoft.Json.JsonProperty("returnEmailDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReturnEmailDetail? ReturnEmailDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("rma", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReturnMerchandiseAuthorization? Rma { get; set; }

        [Newtonsoft.Json.JsonProperty("returnAssociationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReturnAssociationDetail? ReturnAssociationDetail { get; set; }

        /// <summary>
        /// This is the return Type. Required to be set to PRINT_RETURN_LABEL for printed return label shipments. For email return label shipments returnType must be set to PENDING and pendingShipmentDetail must be set to EMAIL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnShipmentDetailReturnType ReturnType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are email details for the return shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnEmailDetail
    {
        /// <summary>
        /// This is the merchant phone number and required for Email Return Labels.&lt;br&gt;Example: 19012635656
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchantPhoneNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? MerchantPhoneNumber { get; set; }

        /// <summary>
        /// Indicate the allowed (merchant-authorized) special services which may be selected when the subsequent shipment is created.&lt;br&gt;Only services represented in EmailLabelAllowedSpecialServiceType will be controlled by this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedSpecialService", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<AllowedSpecialService>? AllowedSpecialService { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a Return Merchant Authorization (RMA) for the return shipment.&lt;br&gt; Reason for the requirement is mandatory.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnMerchandiseAuthorization
    {
        /// <summary>
        /// Specify the reason for the return.&lt;br&gt; Note: There is no validation for reason. Recommended length is 60 alpha-numeric characters&lt;br&gt;Example: Wrong color or size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Reason { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the details of an outbound shipment in order to associate the return shipment to it.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnAssociationDetail
    {
        /// <summary>
        /// This is the ship date for the outbound shipment associated with a return shipment. The format is YYYY-MM-DD.&lt;br&gt; Example: 2019-10-01
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDatestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShipDatestamp { get; set; }

        /// <summary>
        /// This is the tracking number associated with this package.&lt;br&gt;Example: 49XXX0000XXX20032835
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrackingNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the Delivery On Invoice Acceptance detail. Recipient is required for Delivery On Invoice Special service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryOnInvoiceAcceptanceDetail
    {
        /// <summary>
        /// The descriptive data for the recipient of the shipment and the physical location for the shipment destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Recipient? Recipient { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are International Traffic In Arms Regulations shipment service details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternationalTrafficInArmsRegulationsDetail
    {
        /// <summary>
        /// The export or license number for the ITAR shipment.&lt;br&gt;Minimum length is 5 characters.&lt;br&gt;Maximum length is 21 characters.&lt;br&gt;Example: 9871234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("licenseOrExemptionNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? LicenseOrExemptionNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This object is used to specify the Pending Shipment Type for Email label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PendingShipmentDetail
    {
        /// <summary>
        /// This is Pending Shipment Type. Must include the value 'EMAIL' for email return shipments.&lt;br&gt;Not applicable for other types of shipments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pendingShipmentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PendingShipmentDetailPendingShipmentType PendingShipmentType { get; set; }

        [Newtonsoft.Json.JsonProperty("processingOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PendingShipmentProcessingOptionsRequested? ProcessingOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("recommendedDocumentSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecommendedDocumentSpecification? RecommendedDocumentSpecification { get; set; }

        [Newtonsoft.Json.JsonProperty("emailLabelDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public EmailLabelDetail EmailLabelDetail { get; set; } = new EmailLabelDetail();

        /// <summary>
        /// These are the reference document details with the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachedDocuments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UploadDocumentReferenceDetail_1>? AttachedDocuments { get; set; }

        /// <summary>
        /// This is the Email Label expiration date. The maximum expiration date for an Email Return Label must be greater of equal to the day of the label request and not greater than 2 years in the future.&lt;br&gt;Example: 2020-01-01
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationTimeStamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExpirationTimeStamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to allow the Email Label shipment originator,  specify if the Email label shipment completer can make modifications to editable shipment data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PendingShipmentProcessingOptionsRequested
    {
        /// <summary>
        /// These are processing options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Options>? Options { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are documents that are recommended to be included with the shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecommendedDocumentSpecification
    {
        /// <summary>
        /// This is the recommended document Type.&lt;br&gt;&lt;a onclick='loadDocReference("shipmentdocumenttype")'&gt;click here to see shipment document type&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Types> Types { get; set; } = new System.Collections.ObjectModel.Collection<Types>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are specific information about the pending email label.&lt;br&gt;Required when PendingShipmentType is EMAIL.&lt;br&gt;Not applicable for CreateTag.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailLabelDetail
    {
        /// <summary>
        /// This is Email label recipient email address, shipment role, &amp; language locale details. Atleast one entry must be specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EmailRecipient>? Recipients { get; set; }

        /// <summary>
        /// This is an optional personalized message to be included in the email to the recipient.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are the recipient details for the online email return label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailRecipient
    {
        /// <summary>
        /// This is recipient email address for notifying the return label. Maximum length 200 characters.&lt;br&gt; Example: neena@abc.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? EmailAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("optionsRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailOptionsRequested? OptionsRequested { get; set; }

        /// <summary>
        /// This is to specify Recipient role in the shipment.Shipment completor role is needed when we pass shipment initiator. We cannot use shipment initiator alone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailRecipientRole Role { get; set; }

        /// <summary>
        /// These are locale details.&lt;br&gt;Example: 'en_US'&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;click here to see locales&lt;/a&gt;&lt;br&gt;Note: If the locale is left blank or an invalid locale is entered, an error message is returned in response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Locale { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are to indicate how the email notifications for the pending shipment to be processed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailOptionsRequested
    {
        /// <summary>
        /// These are the processing options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Options2>? Options { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the document upload reference details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UploadDocumentReferenceDetail_1
    {
        /// <summary>
        /// This is the uploaded document type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadDocumentReferenceDetail_1DocumentType DocumentType { get; set; }

        /// <summary>
        /// Specify the reference for the uploaded document.&lt;br&gt;Example: Reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DocumentReference { get; set; }

        /// <summary>
        /// This is the document description of the attached document.&lt;br&gt;Example: PRO FORMA INVOICE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// This is the uploaded document ID value.&lt;br&gt;Example: 090927d680038c61
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DocumentId { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify required information for a shipment to be held at destination FedEx location.&lt;br&gt;&lt;i&gt;Note: This object HoldAtLocationDetail is Required, when HOLD_AT_LOCATION is chosen in the specialServiceTypes.&lt;/i&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HoldAtLocationDetail
    {
        /// <summary>
        /// This is an alphanumeric identifier used for Location/Facility Identification.&lt;br&gt;Example: YBZA&lt;br&gt;Note: &lt;ul&gt;&lt;li&gt;For HAL Shipment, Location ID is &lt;b&gt;REQUIRED&lt;/b&gt; to ensure packages are delivered to the right location.&lt;/li&gt;&lt;li&gt;Use endpoint [&lt;b&gt;Find Location&lt;/b&gt;] in [&lt;b&gt;Location Search API&lt;/b&gt;], to find the correct location ID for your shipment.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? LocationId { get; set; }

        [Newtonsoft.Json.JsonProperty("locationContactAndAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactAndAddress? LocationContactAndAddress { get; set; }

        /// <summary>
        /// Specifies the type of facility at which package/shipment is to be held.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HoldAtLocationDetailLocationType LocationType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the contact and address details of a location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAndAddress
    {
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact_1? Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address_1? Address { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the contact details of the shipper.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact_1
    {
        /// <summary>
        /// Specify contact person name.&lt;br&gt;Recommended length is 70. &lt;br&gt;Note: There's no specific validation for the person name.&lt;br&gt; Example: John Taylor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonName { get; set; }

        /// <summary>
        /// Specify contact email address. Maximum length is 80. &lt;br&gt; Example: sample@company.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmailAddress { get; set; }

        /// <summary>
        /// Contact person's phone number. &lt;br&gt;Minimum length is 10 and supports maximum of 15 for certain countries using longer phone numbers.&lt;br&gt;Note: For US and CA, a phone number must have exactly 10 digits, plus an optional leading country code of '1' or '+1'.&lt;br&gt;Example: 918xxxxx890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneNumber { get; set; }

        /// <summary>
        /// Specify contact phone extension. &lt;br&gt;Note: Recommended length is 6. There's no specific validation for the phone extension. &lt;br&gt; Example: 1234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneExtension { get; set; }

        /// <summary>
        /// Specify contact fax number.&lt;br&gt;Note: Recommended length is 15. There's no specific validation for the fax number.&lt;br&gt; Example: 1234567890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FaxNumber { get; set; }

        /// <summary>
        /// Specify contact company name.&lt;br&gt;Recommended length is 35.&lt;br&gt;Note: There's no specific validation for the company name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CompanyName { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is the shipment level COD detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentCODDetail
    {
        [Newtonsoft.Json.JsonProperty("addTransportationChargesDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CODTransportationChargesDetail? AddTransportationChargesDetail { get; set; }

        /// <summary>
        /// Descriptive data of the Cash On Delivery along with their details of the physical location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codRecipient", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party_1? CodRecipient { get; set; }

        /// <summary>
        /// Specify the name of the person or company receiving the secured/unsecured funds payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remitToName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RemitToName { get; set; }

        /// <summary>
        /// Identifies the type of funds FedEx should collect upon shipment delivery
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codCollectionType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentCODDetailCodCollectionType CodCollectionType { get; set; }

        [Newtonsoft.Json.JsonProperty("financialInstitutionContactAndAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactAndAddress? FinancialInstitutionContactAndAddress { get; set; }

        /// <summary>
        /// Indicate the COD collection amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codCollectionAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? CodCollectionAmount { get; set; }

        /// <summary>
        /// Indicate return reference type information to include on the COD return shipping label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnReferenceIndicatorType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipmentCODDetailReturnReferenceIndicatorType ReturnReferenceIndicatorType { get; set; }

        /// <summary>
        /// Indicate the COD amount for this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentCodAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? ShipmentCodAmount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify C.O.D. transportation charges.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CODTransportationChargesDetail
    {
        /// <summary>
        /// Specify the Rate Type used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CODTransportationChargesDetailRateType RateType { get; set; }

        /// <summary>
        /// Specify which level the rate to be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateLevelType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CODTransportationChargesDetailRateLevelType RateLevelType { get; set; }

        /// <summary>
        /// Specify which level the charges to be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chargeLevelType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CODTransportationChargesDetailChargeLevelType ChargeLevelType { get; set; }

        /// <summary>
        /// Specify Charge type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chargeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CODTransportationChargesDetailChargeType ChargeType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Party_1
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyAddress? Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyContact? Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyAccountNumber? AccountNumber { get; set; }

        /// <summary>
        /// This is the tax identification number details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxpayerIdentification>? Tins { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is the descriptive data required for a FedEx shipment containing dangerous materials. This element is required when SpecialServiceType DRY_ICE is selected.&lt;p&gt;&lt;i&gt;Note:&lt;ul&gt;&lt;li&gt;Dry Ice is a Package level Special Service for Domestic and International shipments.&lt;/li&gt;&lt;li&gt;Dry Ice must be declared at both Shipment and Package level for International MPS shipments to print the compliance statement on Airway Bill labels.&lt;/li&gt;&lt;/ul&gt;&lt;/i&gt;&lt;/p&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentDryIceDetail_1
    {
        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight_1? TotalWeight { get; set; }

        /// <summary>
        /// Indicates the total number of packages in the shipment that contain dry ice.&lt;br&gt;Example: 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PackageCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are the package weight details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight_1
    {
        /// <summary>
        /// This is the package weight unit. For Dry Ice the unit of measure is KG.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Weight_1Units Units { get; set; }

        /// <summary>
        /// Weight Value.&lt;br&gt; Example: 68.25&lt;br&gt;&lt;a href='https://developer.fedex.com/api/en-us/guides/api-reference.html#packagetypes' target='_blank'&gt;Click here to see Weight Values&lt;/a&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify International Controlled Export shipment Details.&lt;br&gt;Note: licenseOrPermitExpirationDate and licenseOrPermitNumber are not required when type is WAREHOUSE_WITHDRAWAL.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternationalControlledExportDetail
    {
        /// <summary>
        /// Indicate the expiration date for the license or permit. The format is YYYY-MM-DD.&lt;br&gt;Example: "2019-12-03"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("licenseOrPermitExpirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LicenseOrPermitExpirationDate { get; set; }

        /// <summary>
        /// Indicate License Or Permit Number for the commodity being exported.&lt;br&gt;Example: 11
        /// </summary>
        [Newtonsoft.Json.JsonProperty("licenseOrPermitNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LicenseOrPermitNumber { get; set; }

        /// <summary>
        /// Indicate Entry Number for the export.&lt;br&gt;Example: 125
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entryNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EntryNumber { get; set; }

        /// <summary>
        /// Indicate the Foreign Trade Zone Code.&lt;br&gt;Example: US
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreignTradeZoneCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ForeignTradeZoneCode { get; set; }

        /// <summary>
        /// Indicate International Controlled Export Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InternationalControlledExportDetailType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are Special service elements for FedEx Ground Home Delivery shipments. If selected, element homedeliveryPremiumType is mandatory.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HomeDeliveryPremiumDetail
    {
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PhoneNumber1? PhoneNumber { get; set; }

        /// <summary>
        /// This is delivery date. Required for FedEx Date Certain Home Delivery. Valid dates are Monday to Sunday. &lt;br&gt;There may be a delay in delivery on Sundays to locations that are geographically difficult to access.&lt;br&gt;Example: 2019-06-26
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeliveryDate { get; set; }

        /// <summary>
        /// This is Home Delivery Premium Type. It allows to specify additional premimum service options for the home delivery shipment. Can specify Evening delivery or a Date certain, or can specify appointment for the delivery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homedeliveryPremiumType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HomeDeliveryPremiumDetailHomedeliveryPremiumType HomedeliveryPremiumType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the phone number. Only numeric values allowed.&lt;br&gt; Note that phoneNumber is mandatory when homedeliveryPremiumType is DATE_CERTAIN or EVENING.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PhoneNumber1
    {
        /// <summary>
        /// Indicate the area code for the phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("areaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AreaCode { get; set; }

        /// <summary>
        /// Indicate the local phone number for contacting in the event of an emergency. Maximum length  is 10.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalNumber { get; set; }

        /// <summary>
        /// Indicate the extension for the phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Extension { get; set; }

        /// <summary>
        /// Indicate the Personal Identification Number associated with the phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalIdentificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonalIdentificationNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is used to provide eMail notification information..
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipShipmentEMailNotificationDetail
    {
        /// <summary>
        /// This is the shipment Notification Aggregation Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipShipmentEMailNotificationDetailAggregationType AggregationType { get; set; }

        /// <summary>
        /// These are email notification recipient details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailNotificationRecipients", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipShipmentEmailNotificationRecipient>? EmailNotificationRecipients { get; set; }

        /// <summary>
        /// This is your personal message for the email.&lt;br&gt;Note: The maximum personal message character limit depends on the element notificationFormatType values:&lt;ul&gt;&lt;li&gt;If notificationFormatType is TEXT, then only 120 characters printed on the email&lt;/li&gt;&lt;li&gt;If notificationFormatType is HTML, then 500 characters printed on the email&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;Example: This is concerning the order 123456 of 26 July 2021 - art no 34324-23 Teddy Bear, brown
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonalMessage { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are recipient details for receiving email notification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipShipmentEmailNotificationRecipient
    {
        /// <summary>
        /// Specify the recipient name.&lt;br&gt;Example: Joe Smith
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; }

        /// <summary>
        /// Specify the recipient type for email notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailNotificationRecipientType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipShipmentEmailNotificationRecipientEmailNotificationRecipientType EmailNotificationRecipientType { get; set; }

        /// <summary>
        /// Specify the recipient email address.&lt;br&gt;Example: xyz@aol.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? EmailAddress { get; set; }

        /// <summary>
        /// This is the format for the email notification. Either HTML or plain text can be provided.&lt;br&gt;Example: TEXT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationFormatType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipShipmentEmailNotificationRecipientNotificationFormatType NotificationFormatType { get; set; }

        /// <summary>
        /// Indicate the type of notification that will be sent as an email&lt;br&gt;Example: EMAIL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShipShipmentEmailNotificationRecipientNotificationType NotificationType { get; set; }

        /// <summary>
        /// These are the locale details for email.&lt;br&gt;Example: en_US, fr_CA, es_MX,.etc.&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;click here to see Locales&lt;/a&gt;&lt;br&gt;Note: If the locale is left blank or an invalid locale is entered, an error message is returned in response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Locale { get; set; }

        /// <summary>
        /// These are to specify the notification event types.&lt;br&gt; Example: [ON_PICKUP_DRIVER_ARRIVED, ON_SHIPMENT]&lt;br&gt;&lt;a onclick='loadDocReference("notificationeventtypes")'&gt;Click here for more information on Notification Event Types.&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationEventType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<NotificationEventType>? NotificationEventType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the advance booking number, shipper load /count and packing list details. This details must be provided by the user during freight shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpressFreightDetail
    {
        /// <summary>
        /// This is an advanced booking number that must be acquired through the appropriate channel in the shipment origin country. Without the booking number pickup and space allocation for the Express Freight shipment are not guaranteed. &lt;br&gt;Minimum length: 5 digits &lt;br&gt; Maximum length: 12 digits  &lt;br&gt;Example: XXXX56789812
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingConfirmationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BookingConfirmationNumber { get; set; }

        /// <summary>
        /// Indicates the content of a container were loaded and counted by the shipper.&lt;br&gt;Minimum length: 1 digits &lt;br&gt; Maximum length: 5 digits &lt;br&gt;Example:  If a skid has 32 small boxes on it that are shrinkwrapped, the shippersLoadAndCount should be “32”
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippersLoadAndCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ShippersLoadAndCount { get; set; }

        /// <summary>
        /// This indicates whether or not the Packing List is enclosed with the shipment. A packing list is a document that includes details about the contents of a package. &lt;br&gt; Example: true
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packingListEnclosed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PackingListEnclosed { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the details about how to calculate variable handling charges at the shipment level. They can be based on a percentage of the shipping charges or a fixed amount. If indicated, element rateLevelType is required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableHandlingChargeDetail
    {
        /// <summary>
        /// The rate type indicates what type of rate request is being returned; account, preferred, incentive, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VariableHandlingChargeDetailRateType RateType { get; set; }

        /// <summary>
        /// This is the variable handling percentage. If the percent value is mentioned as 10, it means 10%(multiplier of 0.1).&lt;br&gt;Example: 12.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double PercentValue { get; set; }

        /// <summary>
        /// indicates whether or not the rating is being done at the package level, or if the packages are bundled together. At the package level, charges are applied based on the details of each individual package. If they are bundled, one package is chosen as the parent and charges are applied based on that one package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateLevelType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VariableHandlingChargeDetailRateLevelType RateLevelType { get; set; }

        /// <summary>
        /// This is to specify a fixed handling charge on the shipment. The element allows entry of 7 characters before the decimal and 2 characters following the decimal. &lt;br&gt;Example: 5.00.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FixedValue? FixedValue { get; set; }

        /// <summary>
        /// Specify the charge type upon which the variable handling percentage amount is calculated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateElementBasis", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VariableHandlingChargeDetailRateElementBasis RateElementBasis { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are customs clearance details. Required for International and intra-country Shipments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomsClearanceDetail
    {
        /// <summary>
        /// These are the regulatory controls applicable to the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regulatoryControls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<RegulatoryControls>? RegulatoryControls { get; set; }

        /// <summary>
        /// Specify broker information. Use this option only if you are using Broker Select Option for your shipment. A country code must be specified in addition to one of the following address items: postal code, city, or location id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brokers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BrokerDetail>? Brokers { get; set; }

        [Newtonsoft.Json.JsonProperty("commercialInvoice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CommercialInvoice CommercialInvoice { get; set; } = new CommercialInvoice();

        /// <summary>
        /// Specify the risk owner for the Freight shipment.This element is only mandatory or valid for Intra India shipments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightOnValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomsClearanceDetailFreightOnValue? FreightOnValue { get; set; }

        [Newtonsoft.Json.JsonProperty("dutiesPayment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Payment_1? DutiesPayment { get; set; }

        /// <summary>
        /// Indicates the details about the dutiable packages. Maximum upto 999 commodities per shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commodities", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Commodity> Commodities { get; set; } = new System.Collections.ObjectModel.Collection<Commodity>();

        /// <summary>
        /// Used to specify if a shipment is document shipment or not. Used only for International Express document shipments. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDocumentOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDocumentOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("recipientCustomsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecipientCustomsId? RecipientCustomsId { get; set; }

        [Newtonsoft.Json.JsonProperty("customsOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomsOptionDetail? CustomsOption { get; set; }

        /// <summary>
        /// The descriptive data for the importer of Record for the shipment and their physical address, contact and account number information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importerOfRecord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party_1? ImporterOfRecord { get; set; }

        /// <summary>
        /// This is the locale for generated document.&lt;br&gt;Example: en_US&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;click here to see Locales&lt;/a&gt;&lt;br&gt;Note: If the locale is left blank or an invalid locale is entered, an error message is returned in response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generatedDocumentLocale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GeneratedDocumentLocale { get; set; }

        [Newtonsoft.Json.JsonProperty("exportDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExportDetail? ExportDetail { get; set; }

        /// <summary>
        /// This is the total customs value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCustomsValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? TotalCustomsValue { get; set; }

        /// <summary>
        /// Specify if the transacting parties are related.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partiesToTransactionAreRelated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PartiesToTransactionAreRelated { get; set; }

        [Newtonsoft.Json.JsonProperty("declarationStatementDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomsDeclarationStatementDetail? DeclarationStatementDetail { get; set; }

        /// <summary>
        /// Specify insurance charges if applicable. &lt;br&gt;&lt;i&gt;Note: FedEx does not provide insurance of any kind.&lt;/i&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insuranceCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? InsuranceCharge { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are broker details for the shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrokerDetail
    {
        /// <summary>
        /// These are broker details for the shipment with physical address, contact and account number information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("broker", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Broker? Broker { get; set; }

        /// <summary>
        /// Identifies the type of broker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokerDetailType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to provide Commercial Invoice details. This element is required for electronic upload of CI data. It will serve to create/transmit an electronic Commercial Invoice through the FedEx system.&lt;br&gt;Customers are responsible for printing their own Commercial Invoice.&lt;br&gt;If you would like FedEx to generate a Commercial Invoice and transmit it to Customs for clearance purposes, you need to specify that in the ETDDetail/RequestedDocumentCopies element.&lt;br&gt;Supports maximum of 99 commodity line items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommercialInvoice
    {
        /// <summary>
        /// The originator name that will populate the Commercial Invoice (or Pro Forma).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originatorName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OriginatorName { get; set; }

        /// <summary>
        /// The comments that will populate the Commercial Invoice (or Pro Forma). Only the comments specified in the first two indexes of the array will be printed on the invoice and other comments would be ignored as the limitation is set for only two indexes. It considers the comment which is in the first index as a Special Instructions, Hence the comment at first index will be printed under special instructions and the other will be printed at comments section in the Commercial Invoice Document. &lt;br&gt;Example: comments
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Comments { get; set; }

        /// <summary>
        /// These are additional customer reference data for commercial invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerReference>? CustomerReferences { get; set; }

        /// <summary>
        /// Indicate the taxes or miscellaneous charges(other than freight charges or insurance charges) that are associated with the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxesOrMiscellaneousCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? TaxesOrMiscellaneousCharge { get; set; }

        /// <summary>
        /// Indicate the type of taxes Or miscellaneous charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxesOrMiscellaneousChargeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommercialInvoiceTaxesOrMiscellaneousChargeType TaxesOrMiscellaneousChargeType { get; set; }

        /// <summary>
        /// Indicate the freight charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? FreightCharge { get; set; }

        /// <summary>
        /// Indicate the packing cost.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packingCosts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? PackingCosts { get; set; }

        /// <summary>
        /// Indicate the handling cost.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("handlingCosts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? HandlingCosts { get; set; }

        /// <summary>
        /// This is the declaration statement which will populate the Commercial Invoice (or Pro Forma).&lt;br&gt;Maximum length is 554.&lt;br&gt;Example: declarationStatement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("declarationStatement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeclarationStatement { get; set; }

        /// <summary>
        /// Specify terms Of Sale that will be populated on the Commercial Invoice (or Pro Forma). Maximum length is 3&lt;br&gt;Valid values are:&lt;ul&gt;&lt;li&gt;FCA/FOB (Free Carrier/Free On Board): Seller is responsible for all costs of delivering goods to destination. (Default)&lt;/li&gt;&lt;li&gt;CIP (Costs, Insurance Paid): Seller is responsible for miscellaneous charges to destination.&lt;/li&gt;&lt;li&gt;CPT (Carriage Paid To): Buyer is responsible for insurance.&lt;/li&gt;&lt;li&gt;EXW (Ex Works): Seller makes goods available to buyer. Buyer is responsible for delivering goods to destination.&lt;/li&gt;&lt;li&gt;DDU (Delivered Duty Unpaid): Seller is responsible for delivering goods to destination. Buyer is responsible for clearing goods through Bureau of Customs and Border Protection.&lt;/li&gt;&lt;li&gt;DDP (Delivered Duty Paid): Seller is responsible for delivering goods to destination, including duties, taxes, and miscellaneous fees.&lt;/li&gt;&lt;li&gt;DAP (Delivered at Place): Seller pays for carriage to the named place, except for costs related to import clearance, and assumes all risks prior to the point that the goods are ready for unloading by the buyer.&lt;/li&gt;&lt;li&gt;DPU(Deliver at Place of Unloading)&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("termsOfSale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TermsOfSale { get; set; }

        /// <summary>
        /// These are special instructions that will be populated on the Commercial Invoice (or Pro Forma).&lt;br&gt;Example: specialInstructions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SpecialInstructions { get; set; }

        /// <summary>
        /// This is the reason for the shipment. &lt;br&gt;Note: SOLD is not a valid purpose for a Proforma Invoice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentPurpose", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommercialInvoiceShipmentPurpose ShipmentPurpose { get; set; }

        [Newtonsoft.Json.JsonProperty("emailNotificationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipEmailDispositionDetail? EmailNotificationDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReference
    {
        /// <summary>
        /// This is a customer reference type. The value specified here for the element is printed on the Commercial Invoice only for tracking and label information.&lt;p&gt;Note: &lt;ul&gt;&lt;li&gt;The P_O_NUMBER value must be specified in customerReferences under requestedPackageLineItems&lt;/li&gt;&lt;li&gt;The INVOICE_NUMBER value that is printed on the FedEx-supplied invoice must be specified in customerReferences under commercialInvoice. Value defined in this section will print on the label that is attached to the package&lt;/li&gt;&lt;/ul&gt; &lt;br&gt;Note: INTRACOUNTRY_REGULATORY_REFERENCE is applicable only in Intra-Brazil.&lt;br&gt;&lt;a onclick='loadDocReference("customerreferencetypes")'&gt;For more information, click here for Cutsomer References ENUMs&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReferenceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerReferenceType CustomerReferenceType { get; set; }

        /// <summary>
        /// This is a customer reference type value.&lt;br&gt;Example: 3686 &lt;ul&gt;&lt;li&gt;The P_O_NUMBER value must be specified in customerReferences under requestedPackageLineItems&lt;/li&gt;&lt;li&gt;The INVOICE_NUMBER value that is printed on the FedEx-supplied invoice must be specified in customerReferences under commercialInvoice. Value defined in this section will print on the label that is attached to the package&lt;/li&gt;&lt;li&gt;The RMA value sent by the customer is returned on the label in human readable form but also as a barcode. RMA_ASSOCIATION only prints on the label as a barcode for a Return shipment.&lt;/ul&gt;NOTE:&lt;ul&gt;&lt;li&gt; INTRACOUNTRY_REGULATORY_REFERENCE is applicable only in Intra-Brazil.&lt;/li&gt;&lt;li&gt;  Maximum length varies for value field depending on customerReferenceType.&lt;/li&gt;&lt;/ul&gt; Maximum length for value is as follows: &lt;ul&gt;&lt;li&gt;CUSTOMER_REFERENCE - 40(Express), 30(Ground)&lt;/li&gt;&lt;li&gt;DEPARTMENT_NUMBER - 30&lt;/li&gt;&lt;li&gt;INVOICE_NUMBER - 30&lt;/li&gt;&lt;li&gt;P_O_NUMBER - 30&lt;/li&gt;&lt;li&gt;INTRACOUNTRY_REGULATORY_REFERENCE - 30&lt;/li&gt;&lt;li&gt;RMA_ASSOCIATION - 20&lt;/li&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are email disposition details. Provides the type and email addresses of e-mail recipients. If returnedDispositionDetail in labelSpecification is set as true then email will be send with label and documents copy.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipEmailDispositionDetail
    {
        /// <summary>
        /// This is email Address.&lt;br&gt;Example: xxxx@xxx.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmailAddress { get; set; }

        /// <summary>
        /// Specify the email status.&lt;br&gt;Example: EMAILED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        /// <summary>
        /// Specify the recipient Type.&lt;br&gt;Example: SHIPPER/BROKER
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RecipientType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a payment type, basically indicates who is the payor for the shipment.Conditional required for International Shipments
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payment_1
    {
        [Newtonsoft.Json.JsonProperty("payor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Payor_1? Payor { get; set; }

        [Newtonsoft.Json.JsonProperty("billingDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingDetails? BillingDetails { get; set; }

        /// <summary>
        /// This is a payment type, basically indicates who is the payor for the shipment.&lt;br&gt;Required for Express and Ground.&lt;br&gt;The payment type COLLECT is applicable only for Ground shipments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Payment_1PaymentType PaymentType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about the person who is paying for the shipment. Not applicable for credit card payment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payor_1
    {
        [Newtonsoft.Json.JsonProperty("responsibleParty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party_2? ResponsibleParty { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to provide the attributes such as physical address, contact information and account number information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Party_2
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address_1? Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact_1? Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyAccountNumber? AccountNumber { get; set; }

        /// <summary>
        /// This is the tax identification number details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxpayerIdentification>? Tins { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are billing details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingDetails
    {
        /// <summary>
        /// Indicates a billing code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BillingCode { get; set; }

        /// <summary>
        /// These are duties and taxes billing type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BillingType { get; set; }

        /// <summary>
        /// This is bill to alias identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aliasId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AliasId { get; set; }

        /// <summary>
        /// This is account nick name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNickname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AccountNickname { get; set; }

        /// <summary>
        /// This is bill to account number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AccountNumber { get; set; }

        /// <summary>
        /// This is the country code of the account number.&lt;br&gt;Example: CA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumberCountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AccountNumberCountryCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Commodity
    {
        /// <summary>
        /// This is the unit price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? UnitPrice { get; set; }

        /// <summary>
        /// This object contains additional quantitative information other than weight and quantity to calculate duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalMeasures", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalMeasures>? AdditionalMeasures { get; set; }

        /// <summary>
        /// Indicate the number of pieces associated with the commodity. The value can neither be negative nor exceed 9,999.&lt;br&gt;Example: 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfPieces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfPieces { get; set; }

        /// <summary>
        /// This is the units quantity (using quantityUnits as the unit of measure) per commodity. This is used to estimate duties and taxes.&lt;br&gt; Example: 125
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }

        /// <summary>
        /// This is the unit of measure for the units quantity. This is used to estimate duties and taxes.&lt;br&gt;Example: EA&lt;br&gt;&lt;a onclick='loadDocReference("harmonizedsystemcodeunitofmeasure-table1")'&gt;click here to see Commodity Unit Measures&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityUnits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? QuantityUnits { get; set; }

        /// <summary>
        /// This customs value is applicable for all items(or units) under the specified commodity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customsValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Customs_Money? CustomsValue { get; set; }

        /// <summary>
        /// This is commodity country of manufacture. This is required for International shipments. Maximum allowed length is 4.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryOfManufacture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryOfManufacture { get; set; }

        /// <summary>
        /// This is an identifying mark or number used on the packaging of a shipment to help customers identify a particular shipment&lt;br&gt;Example: 87123
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cIMarksAndNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CIMarksAndNumbers { get; set; }

        /// <summary>
        /// This is to specify the Harmonized Tariff System (HTS) code to meet U.S. and foreign governments' customs requirements. These are mainly used to estimate the duties and taxes.&lt;br&gt;Example: 0613&lt;br&gt;To research the classification for your commodity, use the FedEx Global Trade Manager online at &lt;a href='http://www.fedex.com/gtm' target='_blank'&gt;fedex.com/gtm&lt;/a&gt;. You will find country-specific information to determine whether your commodity is considered to be a document or non-document for your destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("harmonizedCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HarmonizedCode { get; set; }

        /// <summary>
        /// This is the commodity description. Maximum allowed 450 characters.&lt;br&gt;&lt;a onclick='loadDocReference("vaguecommoditydescriptions")'&gt;click here to see Vague commodity descriptions&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? Description { get; set; }

        /// <summary>
        /// This is Commodity name.&lt;br&gt;Example: Non-Threaded Rivets
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight_4? Weight { get; set; }

        /// <summary>
        /// This is the export license number for the shipment.&lt;br&gt;Example: 26456
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportLicenseNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExportLicenseNumber { get; set; }

        /// <summary>
        /// Specify the export license expiration date for the shipment.&lt;br&gt;Format YYYY-MM-DD&lt;br&gt;Example : 2009-04-12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportLicenseExpirationDate", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExportLicenseExpirationDate { get; set; }

        /// <summary>
        /// This is a part number.&lt;br&gt;Example: 167
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PartNumber { get; set; }

        /// <summary>
        /// This is the purpose of this shipment. This is used for calculation of duties and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommodityPurpose Purpose { get; set; }

        [Newtonsoft.Json.JsonProperty("usmcaDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsmcaDetail? UsmcaDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalMeasures
    {
        /// <summary>
        /// Specify commodity quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Quantity { get; set; }

        /// <summary>
        /// Unit of measure used to express the quantity of this commodity line item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are the package weight details.&lt;br&gt;Note: Weight is not required for One rate shipments
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight
    {
        /// <summary>
        /// Indicate the weight unit type. The package and commodity weight unit should be the same else the request will result in an error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeightUnits Units { get; set; }

        /// <summary>
        /// Weight Value.&lt;br&gt; Example: 68.25&lt;br&gt;&lt;a href='https://developer.fedex.com/api/en-us/guides/api-reference.html#packagetypes' target='_blank'&gt;Click here to see Weight Values&lt;/a&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// It is the unit weight of the commodity.&lt;br&gt;Note: Weight is not required for One rate shipments
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight_4
    {
        /// <summary>
        /// Indicate the weight unit type. The package and commodity weight unit should be the same else the request will result in an error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Weight_4Units Units { get; set; }

        /// <summary>
        /// Weight Value.&lt;br&gt; Example: 68.25
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are the package weight details.&lt;br&gt;Note: Weight is not required for One rate shipments
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight_3
    {
        /// <summary>
        /// Indicate the weight unit type. The package and commodity weight unit should be the same else the request will result in an error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Weight_3Units Units { get; set; }

        /// <summary>
        /// Weight Value.&lt;br&gt; Example: 68.25&lt;br&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the USMCA detail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsmcaDetail
    {
        /// <summary>
        /// Specify the origin criterion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originCriterion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaDetailOriginCriterion OriginCriterion { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this element to provide valid identification details. Used for populating brazil tax id.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecipientCustomsId
    {
        /// <summary>
        /// This is ID Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RecipientCustomsIdType Type { get; set; }

        /// <summary>
        /// This is the ID number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are customs Option Detail, type must be indicated for each occurrence.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomsOptionDetail
    {
        /// <summary>
        /// Specify additional description about customs options. This is a required field when the Type is OTHER.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Specify the reason for a global return, as recognized by Customs. Valid values:&lt;ul&gt;&lt;li&gt;COURTESY_RETURN_LABEL: Applicable for Outbound shipments.&lt;/li&gt;&lt;li&gt;EXHIBITION_TRADE_SHOW: For exhibition or trade-show, outbound and inbound.&lt;/li&gt;&lt;li&gt;FAULTY_ITEM: For faulty item being returned, inbound only.&lt;/li&gt;&lt;li&gt;FOLLOWING_REPAIR: For repaired or processed item being sent, outbound only.&lt;/li&gt;&lt;li&gt;FOR_REPAIR: For repair or processing, outbound and inbound.&lt;/li&gt;&lt;li&gt;ITEM_FOR_LOAN: For loan item, outbound and inbound.&lt;/li&gt;&lt;li&gt;OTHER: Other reason, outbound and inbound. This type requires a description.&lt;/li&gt;&lt;li&gt;REJECTED: For rejected merchandise being returned, inbound.&lt;/li&gt;&lt;li&gt;REPLACEMENT: For replacement being sent, outbound only.&lt;/li&gt;&lt;li&gt;TRIAL: For use in a trial, outbound and inbound.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomsOptionDetailType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are export Detail used for US or CA exports.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExportDetail
    {
        [Newtonsoft.Json.JsonProperty("destinationControlDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DestinationControlDetail? DestinationControlDetail { get; set; }

        /// <summary>
        /// Specify the filing option being exercised. Required for  non-document shipments originating in Canada destinated for any country other than Canada, the United States, Puerto Rico, or the U.S. Virgin Islands.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("b13AFilingOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExportDetailB13AFilingOption B13AFilingOption { get; set; }

        /// <summary>
        /// For US export shipments requiring an EEI, enter the ITN number received from AES when you filed your shipment or the FTR (Foreign Trade Regulations) exemption number.The proper format for an ITN number is AES XYYYYMMDDNNNNNN where YYYYMMDD is date and NNNNNN are numbers generated by the AES.&lt;br&gt; Example: AESX20220714987654&lt;br&gt;Note: The ITN or FTR exemption number you submit in the ship request prints on the international shipping label.&lt;br&gt;&lt;br&gt;For CA export shipments,it can be Proof of report number(15-32 alphanumeric) , Summary proof of report number(7-32 alphanumeric) or Exemption number(2 digit) based on the selected b13AFilingOption.&lt;br&gt;Example: 98765432107654321(POR number), 7654321(Summary POR number) and 02(Exemption number). &lt;br&gt;For FTR exemption number you need provide a predefined value as NO_EEI_30_37_A.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportComplianceStatement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExportComplianceStatement { get; set; }

        /// <summary>
        /// This is a Permit Number. This field is applicable only to Canada export non-document shipments of any value to any destination. No special characters are allowed.&lt;br&gt; Example: 12345
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permitNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PermitNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify the appropriate destination control statement type(s). Also make sure to specify destination country and end user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DestinationControlDetail
    {
        /// <summary>
        /// Specify End User name. Its is required if StatementTypes is entered as DEPARTMENT_OF_STATE. &lt;br&gt;Example: John Wick
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EndUser { get; set; }

        /// <summary>
        /// Specify appropriate destination control statement type(s), Also make sure to specify destination country and end user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statementTypes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DestinationControlDetailStatementTypes StatementTypes { get; set; }

        /// <summary>
        /// Specify DCS shipment destination country. You may enter up to four country codes in this element. Up to 11 alphanumeric characters are allowed.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationCountries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? DestinationCountries { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies about the statements to be declared for Customs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomsDeclarationStatementDetail
    {
        [Newtonsoft.Json.JsonProperty("usmcaLowValueStatementDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public UsmcaLowValueStatementDetail UsmcaLowValueStatementDetail { get; set; } = new UsmcaLowValueStatementDetail();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the low Value statement necessary for printing the USMCA for Customs documentation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsmcaLowValueStatementDetail
    {
        /// <summary>
        /// Specify the country Of Origin of Low Value Document for Customs declaration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryOfOriginLowValueDocumentRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CountryOfOriginLowValueDocumentRequested { get; set; }

        /// <summary>
        /// Specify the shipper role for Customs declaration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customsRole", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaLowValueStatementDetailCustomsRole CustomsRole { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify the smartpost shipment details. &lt;br&gt;Required for SMARTPOST service. If SmartPostInfoDetail is indicated, the elements below it are also required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SmartPostInfoDetail
    {
        /// <summary>
        /// Indicate the type of ancillary endorsement. Is required for Presorted Standard but not for returns or parcel select. &lt;br&gt;Note: Not all are usable for all ancillary endorsements.&lt;br&gt;For more information, refer to the &lt;a href = 'https://www.fedex.com/en-us/shipping/fedex-smartpost/rates-zones.html' target='_blank'&gt;FedEx SmartPost®&lt;/a&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ancillaryEndorsement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SmartPostInfoDetailAncillaryEndorsement AncillaryEndorsement { get; set; }

        /// <summary>
        /// Specify the four-digit numeric Hub ID value used for smartport shipments.&lt;br&gt;&lt;a onclick='loadDocReference("smartposthubids")'&gt;click here to see Hub Ids&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hubId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? HubId { get; set; }

        /// <summary>
        /// Specify the indicia type.&lt;br&gt;Available options include:&lt;ul&gt;&lt;li&gt;MEDIA_MAIL&lt;/li&gt;&lt;li&gt;PARCEL_SELECT (1 LB through 70 LB)&lt;/li&gt;&lt;li&gt;PRESORTED_BOUND_PRINTED_MATTER&lt;/li&gt;&lt;li&gt;PRESORTED_STANDARD (less than 1 LB)&lt;/li&gt;&lt;li&gt;PARCEL_RETURN&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("indicia", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SmartPostInfoDetailIndicia Indicia { get; set; }

        /// <summary>
        /// Specify the special handling associated with Smartpost Shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SmartPostInfoDetailSpecialServices SpecialServices { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are label specification details includes the image type, printer format, and label stock for label. Can also specify specific details such as doc-tab content, regulatory labels, and masking data on the label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelSpecification
    {
        /// <summary>
        /// Specify the label Format Type.&lt;br&gt;&lt;a onclick='loadDocReference("labelstocktypes")'&gt;click here to see label format types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelFormatType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelSpecificationLabelFormatType LabelFormatType { get; set; }

        /// <summary>
        /// This is the order of the Shipping label/documents to be generated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelSpecificationLabelOrder LabelOrder { get; set; }

        [Newtonsoft.Json.JsonProperty("customerSpecifiedDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerSpecifiedLabelDetail? CustomerSpecifiedDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("printedLabelOrigin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactAndAddress? PrintedLabelOrigin { get; set; }

        /// <summary>
        /// Indicate the label stock type used. &lt;br&gt;&lt;a onclick='loadDocReference("labelstocktypes")'&gt;click here to see label format types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelStockType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelSpecificationLabelStockType LabelStockType { get; set; }

        /// <summary>
        /// This is applicable only to documents produced on thermal printers with roll stock.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelRotation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelSpecificationLabelRotation LabelRotation { get; set; }

        /// <summary>
        /// Specify the image format used for a shipping document.&lt;br&gt;&lt;a onclick='loadDocReference("labelstocktypes")'&gt;click here to see label format types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelSpecificationImageType ImageType { get; set; }

        /// <summary>
        /// This is applicable only to documents produced on thermal printers with roll stock.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelPrintingOrientation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelSpecificationLabelPrintingOrientation LabelPrintingOrientation { get; set; }

        /// <summary>
        /// Specify whether or not the return deposition is needed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnedDispositionDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReturnedDispositionDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This object allows the control of label content for customization.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerSpecifiedLabelDetail
    {
        /// <summary>
        /// Specify which data/sections on the label to be masked.&lt;br&gt;Note: &lt;ul&gt;&lt;li&gt;SECONDARY_BARCODE &amp;ndash; This is used for Smartpost shipment labels.&lt;/li&gt;&lt;li&gt;SHIPPER_INFORMATION &amp;ndash; This is used for Third Party Consignee, Intra-UK shipments.&lt;/li&gt;&lt;li&gt;TOTAL_WEIGHT &amp;ndash; This replaces the Total weight with Actual Weight in Master label and AWB copies.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maskedData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<MaskedData>? MaskedData { get; set; }

        /// <summary>
        /// Specify how the regulatory details to be provided on the labels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regulatoryLabels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegulatoryLabelContentDetail>? RegulatoryLabels { get; set; }

        /// <summary>
        /// Specify how the additional details to be provided on the labels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalLabels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalLabelsDetail>? AdditionalLabels { get; set; }

        [Newtonsoft.Json.JsonProperty("docTabContent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocTabContent? DocTabContent { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegulatoryLabelContentDetail
    {
        /// <summary>
        /// Specify the regulatory content preference to be displayed on the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generationOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegulatoryLabelContentDetailGenerationOptions GenerationOptions { get; set; }

        /// <summary>
        /// Specify the type of regulatory content to be added on the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegulatoryLabelContentDetailType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalLabelsDetail
    {
        /// <summary>
        /// Specify the type of additional  details to be added on the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdditionalLabelsDetailType Type { get; set; }

        /// <summary>
        /// Specifies the count of label to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies details of doc tab content.It is only applicable only with imageType as ZPLII.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocTabContent
    {
        /// <summary>
        /// Indicates the content type of the doc tab.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docTabContentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocTabContentType DocTabContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("zone001", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocTabContentZone001? Zone001 { get; set; }

        [Newtonsoft.Json.JsonProperty("barcoded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocTabContentBarcoded? Barcoded { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the doc tab specification for different zones on the label. The specification includes zone number, header and data field to be displayed on the label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocTabContentZone001
    {
        /// <summary>
        /// Indicate the doc tab specifications for the individual doc tab zone on the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docTabZoneSpecifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DocTabZoneSpecification>? DocTabZoneSpecifications { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the doc tab zone specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocTabZoneSpecification
    {
        /// <summary>
        /// It is a non-negative integer that represents the portion of doc-tab in a label.&lt;br&gt;Example: 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ZoneNumber { get; set; }

        /// <summary>
        /// Indicates the parameter name in the header for the doc tab zone. The maximum charater limit is 7.&lt;br&gt;Example:  WHT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Header { get; set; }

        /// <summary>
        /// Indicate the path request/reply element to be printed on doc tab.&lt;br&gt;Example: &lt;ul&gt;&lt;li&gt; REQUEST/PACKAGE/weight/Value&lt;/li&gt;&lt;li&gt; REQUEST/PACKAGE/weight/Value&lt;/li&gt;&lt;li&gt; REQUEST/PACKAGE/InsuredValue/Amount&lt;/li&gt;&lt;li&gt; REQUEST/SHIPMENT/SpecialServicesRequested/CodDetail/CodCollectionAmount/Amount&lt;/li&gt;&lt;li&gt;REQUEST/SHIPMENT/Shipper/Address/StreetLines[1]CLIENT/MeterNumber&lt;/li&gt;&lt;li&gt; TRANSACTION/CustomerTransactionId&lt;/li&gt;&lt;li&gt; REQUEST/SHIPMENT/TotalWeight/Value&lt;/li&gt;&lt;li&gt; REQUEST/SHIPMENT/ShipTimestamp&lt;/li&gt;&lt;li&gt; REQUEST/SHIPMENT/Recipient/Contact/PersonName&lt;/li&gt;&lt;li&gt; REPLY/SHIPMENT/OperationalDetail/DeliveryDate&lt;/li&gt;&lt;li&gt;  REPLY/SHIPMENT/RATES/ACTUAL/totalBaseCharge/Amount&lt;/li&gt;&lt;li&gt; REPLY/SHIPMENT/RATES/ACTUAL/totalFreightDiscounts/Amount&lt;/li&gt;&lt;li&gt;  REPLY/SHIPMENT/RATES/ACTUAL/totalSurcharges/Amount&lt;/li&gt;&lt;li&gt; REPLY/SHIPMENT/RATES/ACTUAL/totalNetCharge/Amount&lt;/li&gt;&lt;li&gt; REPLY/SHIPMENT/RATES/PAYOR_ACCOUNT_PACKAGE/totalSurcharges/Amount&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataField", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DataField { get; set; }

        /// <summary>
        /// Indicates the actual data to be printed in the label&lt;br&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("literalValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LiteralValue { get; set; }

        /// <summary>
        /// Indicates the justification format for the string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("justification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocTabZoneSpecificationJustification Justification { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// It is a doc tab content type which is in barcoded format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocTabContentBarcoded
    {
        /// <summary>
        /// Indicates the type of barcode symbology used on FedEx documents and labels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbology", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocTabContentBarcodedSymbology Symbology { get; set; }

        [Newtonsoft.Json.JsonProperty("specification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocTabZoneSpecification? Specification { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to provide all data required for additional (non-label) shipping documents to be produced.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingDocumentSpecification
    {
        [Newtonsoft.Json.JsonProperty("generalAgencyAgreementDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeneralAgencyAgreementDetail? GeneralAgencyAgreementDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("returnInstructionsDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReturnInstructionsDetail? ReturnInstructionsDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("op900Detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Op900Detail? Op900Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("usmcaCertificationOfOriginDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsmcaCertificationOfOriginDetail? UsmcaCertificationOfOriginDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("usmcaCommercialInvoiceCertificationOfOriginDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsmcaCommercialInvoiceCertificationOfOriginDetail? UsmcaCommercialInvoiceCertificationOfOriginDetail { get; set; }

        /// <summary>
        /// Indicates the types of shipping documents requested.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shippingDocumentTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ShippingDocumentTypes>? ShippingDocumentTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("certificateOfOrigin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateOfOriginDetail? CertificateOfOrigin { get; set; }

        [Newtonsoft.Json.JsonProperty("commercialInvoiceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommercialInvoiceDetail? CommercialInvoiceDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify details to generate general agency agreement detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeneralAgencyAgreementDetail
    {
        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentFormat? DocumentFormat { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the shipping document format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingDocumentFormat
    {
        /// <summary>
        /// Indicates whether or not to provide the instructions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provideInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ProvideInstructions { get; set; }

        [Newtonsoft.Json.JsonProperty("optionsRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentFormatOptionsRequested? OptionsRequested { get; set; }

        /// <summary>
        /// Indicate the used label stock type. Note to list the correct type of paper for the freight address label option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stockType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingDocumentFormatStockType StockType { get; set; }

        /// <summary>
        /// Specifies how to create, organize, and return the document
        /// <br/>
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dispositions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShippingDocumentDispositionDetail>? Dispositions { get; set; }

        /// <summary>
        /// These are locale details.&lt;br&gt;example: 'en_US'&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;click here to see Locales&lt;/a&gt;&lt;br&gt;Note: If the locale is left blank or an invalid locale is entered, an error message is returned in response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Locale { get; set; }

        /// <summary>
        /// Specify the image format used for a shipping document.&lt;br&gt;&lt;a onclick='loadDocReference("labelstocktypes")'&gt;click here to see label format types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingDocumentFormatDocType DocType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the requested options for document format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentFormatOptionsRequested
    {
        /// <summary>
        /// Indicates the format options. SUPPRESS_ADDITIONAL_LANGUAGES value will suppress English language if another language is specified in the language code field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Options3>? Options { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are document diposition details. Each occurrence of this class specifies a particular way in which a kind of shipping document is to be produced and provided.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingDocumentDispositionDetail
    {
        [Newtonsoft.Json.JsonProperty("eMailDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentEmailDetail? EMailDetail { get; set; }

        /// <summary>
        /// Specify how to create and return the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dispositionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingDocumentDispositionDetailDispositionType DispositionType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies how to e-mail shipping documents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingDocumentEmailDetail
    {
        /// <summary>
        /// Indicates the shipping document email recipients.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eMailRecipients", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShippingDocumentEmailRecipient> EMailRecipients { get; set; } = new System.Collections.ObjectModel.Collection<ShippingDocumentEmailRecipient>();

        /// <summary>
        /// These are locale details.&lt;br&gt;Example: 'en_US'&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;click here to see locales&lt;/a&gt;&lt;br&gt;Note: If the locale is left blank or an invalid locale is entered, an error message is returned in response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Locale { get; set; }

        /// <summary>
        /// Identifies the convention by which documents are to be grouped as email attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grouping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingDocumentEmailDetailGrouping Grouping { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShippingDocumentEmailRecipient
    {
        /// <summary>
        /// Specifies the email address.&lt;br&gt; Example: email@fedex.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmailAddress { get; set; }

        /// <summary>
        /// Specify the email notification recipient type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShippingDocumentEmailRecipientRecipientType RecipientType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are return instruction details which will be returned in the transaction to be printed on Return Label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnInstructionsDetail
    {
        /// <summary>
        /// Specify additional information (text) to be inserted into the return document.&lt;br&gt;Example: This is additional text printed on Return Label
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomText { get; set; }

        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReturnShippingDocumentFormat? DocumentFormat { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are characteristics of a shipping document to be produced.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnShippingDocumentFormat
    {
        /// <summary>
        /// Use this element to indicate whether or not to provide the instructions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provideInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ProvideInstructions { get; set; }

        [Newtonsoft.Json.JsonProperty("optionsRequested", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentFormatOptionsRequested? OptionsRequested { get; set; }

        /// <summary>
        /// Specify the label stock type.&lt;br&gt;&lt;a onclick='loadDocReference("labelstocktypes")'&gt;click here to see label format types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stockType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnShippingDocumentFormatStockType StockType { get; set; }

        /// <summary>
        /// Details on creating, organizing, and returning the document.
        /// <br/>
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dispositions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShippingDocumentDispositionDetail>? Dispositions { get; set; }

        /// <summary>
        /// These are locale details.&lt;br&gt;example: 'en_US'&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;click here to see Locales&lt;/a&gt;&lt;br&gt;Note: If the locale is left blank or an invalid locale is entered, an error message is returned in response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Locale { get; set; }

        /// <summary>
        /// Specify the image format used for shipping document.&lt;br&gt;&lt;a onclick='loadDocReference("labelstocktypes")'&gt;click here to see label format types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnShippingDocumentFormatDocType DocType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify details to generate the OP-900 document for hazardous material packages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Op900Detail
    {
        /// <summary>
        /// Specify the use and identification of supplied images to be used on document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerImageUsages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerImageUsage>? CustomerImageUsages { get; set; }

        /// <summary>
        /// Indicates the name to be printed as signature on the document instead of (or in addition to) a signature image.&lt;br&gt;Example: John Hill
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signatureName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SignatureName { get; set; }

        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentFormat? DocumentFormat { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the usse and identification of supplied images to be used on this document.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerImageUsage
    {
        /// <summary>
        /// Specify the Image ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerImageUsageId Id { get; set; }

        /// <summary>
        /// Specify document image type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerImageUsageType Type { get; set; }

        /// <summary>
        /// Specify the provided document image type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("providedImageType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerImageUsageProvidedImageType ProvidedImageType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The instructions indicating how to print the USMCA Certificate of Origin (e.g. whether or not to include the instructions, image type, etc ...).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsmcaCertificationOfOriginDetail
    {
        /// <summary>
        /// Specifies the usage and identification of customer supplied images to be used on this document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerImageUsages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerImageUsage>? CustomerImageUsages { get; set; }

        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentFormat? DocumentFormat { get; set; }

        /// <summary>
        /// This is certifier specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certifierSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaCertificationOfOriginDetailCertifierSpecification CertifierSpecification { get; set; }

        /// <summary>
        /// This is importer specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importerSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaCertificationOfOriginDetailImporterSpecification ImporterSpecification { get; set; }

        /// <summary>
        /// This is producer specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("producerSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaCertificationOfOriginDetailProducerSpecification ProducerSpecification { get; set; }

        [Newtonsoft.Json.JsonProperty("producer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party_3? Producer { get; set; }

        [Newtonsoft.Json.JsonProperty("blanketPeriod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RetrieveDateRange? BlanketPeriod { get; set; }

        /// <summary>
        /// Specify the job title of the certifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certifierJobTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CertifierJobTitle { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Party_3
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyAddress_1? Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartyContact_1? Contact { get; set; }

        /// <summary>
        /// This is the tax identification number details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxpayerIdentification>? Tins { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is detailed information on physical location. May be used as an actual physical address (place to which one could go), or as a container of address parts which should be handled as a unit (such as a city-state-ZIP combination within the US).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartyAddress_1
    {
        /// <summary>
        /// This is the combination of number, street name, etc. Maximum length per line is 35.&lt;br&gt;Example: 10 FedEx Parkway, Suite 302.&lt;p&gt;&lt;i&gt;Note:&lt;ul&gt;&lt;li&gt;At least one line is required.&lt;/li&gt;&lt;li&gt;Streetlines more than 3 will be ignored.&lt;/li&gt;&lt;li&gt;Empty lines should not be included&lt;/li&gt;&lt;li&gt;For SmartPost Shipments, only 30 characters from the individual street lines will be printed on the labels.&lt;/li&gt;&lt;/ul&gt;&lt;/i&gt;&lt;/p&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StreetLines { get; set; }

        /// <summary>
        /// This is a placeholder for City Name. &lt;br&gt;Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; }

        /// <summary>
        /// This is a placeholder for State or Province code.State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2.&lt;br&gt;Example: CA.&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;click here to see State or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StateOrProvinceCode { get; set; }

        /// <summary>
        /// This is the Postal code.&lt;br&gt;This is Optional for non postal-aware countries.&lt;br&gt;Maximum length is 10.&lt;br&gt;Example: 65247&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; }

        /// <summary>
        /// This is the two-letter country code.&lt;br&gt;Maximum length is 2.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is residential (as opposed to commercial).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        /// <summary>
        /// Indicates the geographic coordinates. &lt;br&gt; example: geographicCoordinates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("geographicCoordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GeographicCoordinates { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the contact details for this shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartyContact_1
    {
        /// <summary>
        /// Specify contact name. Maximum length is 70. &lt;br&gt; Example: John Taylor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonName { get; set; }

        /// <summary>
        /// Specify contact email address. Maximum length is 80. &lt;br&gt; Example: sample@company.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmailAddress { get; set; }

        /// <summary>
        /// Specify contact phone extension. Maximum length is 6. &lt;br&gt; Example: 1234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneExtension { get; set; }

        /// <summary>
        /// Specify contact phone number. &lt;br&gt;Minimum length is 10 and supports Maximum as 15 for certain countries using longer phone numbers. &lt;br&gt;Note: Recommended Maximum length is 15 and there's no specific validation will be done for the phone number. &lt;br&gt; Example: 918xxxxx890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneNumber { get; set; }

        /// <summary>
        /// Specify contact company name.&lt;br&gt;Recommended length is 35.&lt;br&gt;Note: There's no specific validation of the company name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CompanyName { get; set; }

        /// <summary>
        /// Specify contact person's fax number. Maximum length is 15.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FaxNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Date Range for custom delivery request; only used if type is BETWEEN.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RetrieveDateRange
    {
        /// <summary>
        /// Indicates the start date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("begins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Begins { get; set; }

        /// <summary>
        /// Indicates the end date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ends", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ends { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The instructions indicating commercial invoice certification of origin.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsmcaCommercialInvoiceCertificationOfOriginDetail
    {
        /// <summary>
        /// Specifies the usage and identification of customer supplied images to be used on this document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerImageUsages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerImageUsage>? CustomerImageUsages { get; set; }

        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentFormat? DocumentFormat { get; set; }

        /// <summary>
        /// This is certifier specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certifierSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaCommercialInvoiceCertificationOfOriginDetailCertifierSpecification CertifierSpecification { get; set; }

        /// <summary>
        /// This is importer specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importerSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaCommercialInvoiceCertificationOfOriginDetailImporterSpecification ImporterSpecification { get; set; }

        /// <summary>
        /// This is producer specification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("producerSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsmcaCommercialInvoiceCertificationOfOriginDetailProducerSpecification ProducerSpecification { get; set; }

        [Newtonsoft.Json.JsonProperty("producer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Party_3? Producer { get; set; }

        /// <summary>
        /// Specify the job title of the certifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certifierJobTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CertifierJobTitle { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The instructions indicating how to print the Certificate of Origin ( e.g. whether or not to include the instructions, image type, etc ...)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateOfOriginDetail
    {
        /// <summary>
        /// Specifies the usage and identification of customer supplied images to be used on this document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerImageUsages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerImageUsage>? CustomerImageUsages { get; set; }

        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentFormat? DocumentFormat { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The instructions indicating how to print the Commercial Invoice( e.g. image type) Specifies characteristics of a shipping document to be produced.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommercialInvoiceDetail
    {
        /// <summary>
        /// Specifies the usage and identification of customer supplied images to be used on this document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerImageUsages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerImageUsage>? CustomerImageUsages { get; set; }

        [Newtonsoft.Json.JsonProperty("documentFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentFormat? DocumentFormat { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the tracking details of the package.Required for child shipments of an oneLabelAtATime shipments
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MasterTrackingId
    {
        /// <summary>
        /// This is FedEx tracking Identifier associated with the package.&lt;br&gt;Example: 8600
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FormId { get; set; }

        /// <summary>
        /// Specify the FedEx transportation type. &lt;br&gt;Example: EXPRESS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingIdType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrackingIdType { get; set; }

        /// <summary>
        /// Specify the USPS tracking Identifier associated with FedEx SmartPost shipment.&lt;br&gt;Example: 92
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uspsApplicationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UspsApplicationId { get; set; }

        /// <summary>
        /// This is the number associated with the package that is used to track it.For child shipment of an oneLabelAtATime shipments,this should be same as the masterTrackingNumber of the parent shipment. &lt;br&gt;Example: 49XXX0000XXX20032835
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrackingNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are one or more package-attribute descriptions, each of which describes an individual package, a group of identical packages, or (for the total-piece-total-weight case) common characteristics of all packages in the shipment.&lt;ul&gt;&lt;li&gt;At least one instance containing the weight for at least one package is required for EXPRESS and GROUND shipments.&lt;/li&gt;&lt;li&gt;Single piece requests will have one RequestedPackageLineItem.&lt;/li&gt;&lt;li&gt;Multiple piece requests will have multiple RequestedPackageLineItems.&lt;/li&gt;&lt;li&gt;Maximum occurrences is 30.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestedPackageLineItem
    {
        /// <summary>
        /// Optional. &lt;br&gt;Used only with individual packages as a unique identifier of each requested package. Will be adjusted at the shipment level as pieces are added.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// Indicate the subPackagingType, if you are using your own packaging for the shipment. Use it for all shipments inbound to Canada (CA) and inbound shipments to the U.S. and Puerto Rico (PR) from Canada and Mexico (MX).subPackagingType is mandatory for shipments to Canada.&lt;br&gt;Example: TUBE, CARTON, CONTAINER. etc.&lt;br&gt;Note: If the value is TUBE, a non-machinable surcharge will be applicable for SmartPost shipments.&lt;br&gt;&lt;a onclick='loadDocReference("subpackagetypes")'&gt;click here to see Sub-Packaging Types&lt;/a&gt;&lt;br&gt;For more information on physical packaging or packaging regulatory requirements, contact your FedEx representative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subPackagingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SubPackagingType { get; set; }

        /// <summary>
        /// This object lists the customer references provided with the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerReference_1>? CustomerReferences { get; set; }

        /// <summary>
        /// This is the Declared Value of any shipment which represents FedEx maximum liability associated with a shipment. This is including, but not limited to any loss, damage, delay, misdelivery, any failure to provide information, or misdelivery of information related to the Shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("declaredValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? DeclaredValue { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = new Weight();

        /// <summary>
        /// Indicate the dimensions of the package.&lt;br&gt; Following conditions will apply: &lt;ul&gt;&lt;li&gt;Dimensions are optional but when added, then all three dimensions must be indicated.&lt;/li&gt;&lt;li&gt;Dimensions are required when using a Express freight service.&lt;/li&gt;&lt;/ul&gt;Note: The maximum/minimum dimension values varies based on the services and the packaging types. Refer &lt;a href='https://www.fedex.com/en-us/service-guide.html' target='_blank'&gt;FedEx Service Guide&lt;/a&gt; for service details related to DIM Weighting for FedEx Express and oversize conditions for FedEx Express and FedEx Ground.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimensions? Dimensions { get; set; }

        /// <summary>
        /// Indicate the grouped package count. These are number of identical package(s) each with one or more commodities. &lt;br&gt; Example: 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupPackageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int GroupPackageCount { get; set; }

        /// <summary>
        /// Describe the content of the package for customs clearance purposes. This applies to intra-UAE, intra-Columbia and intra-Brazil shipments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemDescriptionForClearance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ItemDescriptionForClearance { get; set; }

        /// <summary>
        /// Use this object to specify package content details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentRecord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentRecord>? ContentRecord { get; set; }

        /// <summary>
        /// This the item description for the package.&lt;br&gt;Note: Item description is required for Email Label return shipments and ground Create tag.&lt;br&gt;Example: Item description&lt;br&gt; Maximum limit is 50 characters
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ItemDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("variableHandlingChargeDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VariableHandlingChargeDetail? VariableHandlingChargeDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("packageSpecialServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageSpecialServicesRequested? PackageSpecialServices { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerReference_1
    {
        /// <summary>
        /// This is a customer reference type. The value specified here for the element is printed on the Commercial Invoice only for tracking and label information.&lt;p&gt;Note: &lt;ul&gt;&lt;li&gt;The P_O_NUMBER value must be specified in customerReferences under requestedPackageLineItems&lt;/li&gt;&lt;li&gt;The INVOICE_NUMBER value that is printed on the FedEx-supplied invoice must be specified in customerReferences under commercialInvoice. Value defined in this section will print on the label that is attached to the package&lt;/li&gt;&lt;li&gt;The RMA_ASSOCIATION value sent by the customer is returned on the label in human readable form but also as a barcode.&lt;/li&gt;&lt;/ul&gt;Note: INTRACOUNTRY_REGULATORY_REFERENCE is applicable only in Intra-Brazil.&lt;br&gt;&lt;a onclick='loadDocReference("customerreferencetypes")'&gt;For more information, click here for Customer References&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReferenceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerReference_1CustomerReferenceType CustomerReferenceType { get; set; }

        /// <summary>
        /// This is a customer reference type value.&lt;br&gt;Example: 3686 &lt;ul&gt;&lt;li&gt;The P_O_NUMBER value must be specified in customerReferences under requestedPackageLineItems&lt;/li&gt;&lt;li&gt;The INVOICE_NUMBER value that is printed on the FedEx-supplied invoice must be specified in customerReferences under commercialInvoice. Value defined in this section will print on the label that is attached to the package&lt;/li&gt;&lt;li&gt;The RMA value sent by the customer is returned on the label in human readable form but also as a barcode. RMA_ASSOCIATION only prints on the label as a barcode for a Return shipment.&lt;/ul&gt;NOTE:&lt;ul&gt;&lt;li&gt; INTRACOUNTRY_REGULATORY_REFERENCE is applicable only in Intra-Brazil.&lt;/li&gt;&lt;li&gt;  Maximum length varies for value field depending on customerReferenceType.&lt;/li&gt;&lt;/ul&gt; Maximum length for value is as follows: &lt;ul&gt;&lt;li&gt;CUSTOMER_REFERENCE - 40(Express), 30(Ground)&lt;/li&gt;&lt;li&gt;DEPARTMENT_NUMBER - 30&lt;/li&gt;&lt;li&gt;INVOICE_NUMBER - 30&lt;/li&gt;&lt;li&gt;P_O_NUMBER - 30&lt;/li&gt;&lt;li&gt;INTRACOUNTRY_REGULATORY_REFERENCE - 30&lt;/li&gt;&lt;li&gt;RMA_ASSOCIATION - 20&lt;/li&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the dimensions of the package.&lt;br&gt; Following conditions will apply: &lt;ul&gt;&lt;li&gt;Dimensions are optional but when added, then all three dimensions must be indicated.&lt;/li&gt;&lt;li&gt;Dimensions are required with YOUR_PACKAGING package type.&lt;/li&gt;&lt;/ul&gt;Note: The maximum/minimum dimension values varies based on the services and the packaging types. Refer &lt;a href="https://www.fedex.com/en-us/service-guide.html" target="_blank"&gt;FedEx Service Guide&lt;/a&gt; for service details related to DIM Weighting for FedEx Express and oversize conditions for FedEx Express and FedEx Ground.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dimensions
    {
        /// <summary>
        /// Indicate the length of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 20
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Length { get; set; }

        /// <summary>
        /// Indicate the width of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }

        /// <summary>
        /// Indicate the height of the package. No implied decimal places. Maximum value: 999 &lt;br&gt; Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }

        /// <summary>
        /// Indicate the Unit of measure for the provided dimensions.&lt;br&gt;Valid Values are:&lt;li&gt;IN - inches&lt;/li&gt;&lt;li&gt;CM - centimeters&lt;/li&gt;Note: Any value other than CM including blank/null will default to IN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DimensionsUnits Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Use this object to specify package content details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentRecord
    {
        /// <summary>
        /// This is a package item number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ItemNumber { get; set; }

        /// <summary>
        /// This is the package item quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receivedQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ReceivedQuantity { get; set; }

        /// <summary>
        /// This is the description of the package item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// This is the part number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PartNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are special services that are available at the package level for some or all service types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageSpecialServicesRequested
    {
        /// <summary>
        /// Indicate the types of special services requested for the shipment.&lt;br&gt;&lt;a onclick='loadDocReference("packagelevelspecialservicetypes")'&gt;click here to see Package Special Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialServiceTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? SpecialServiceTypes { get; set; }

        /// <summary>
        /// Indicate the Signature Type. &lt;br&gt;Valid Values: &lt;ul&gt;&lt;li&gt;ADULT - Adult signature required, at recipient address.&lt;/li&gt;&lt;li&gt;DIRECT - Signature required, at recipient address.&lt;/li&gt;&lt;li&gt;INDIRECT - Signature required, alternate address is accepted.This option is available for residential deliveries only&lt;/li&gt;&lt;li&gt;NO_SIGNATURE_REQUIRED - Signature is not required.&lt;/li&gt;&lt;li&gt;SERVICE_DEFAULT - Signature handled as per current Service Guide.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signatureOptionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageSpecialServicesRequestedSignatureOptionType SignatureOptionType { get; set; }

        [Newtonsoft.Json.JsonProperty("priorityAlertDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PriorityAlertDetail? PriorityAlertDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("signatureOptionDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignatureOptionDetail? SignatureOptionDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("alcoholDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlcoholDetail? AlcoholDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("dangerousGoodsDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DangerousGoodsDetail? DangerousGoodsDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("packageCODDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageCODDetail? PackageCODDetail { get; set; }

        /// <summary>
        /// Provide the pieceCount or VerificationBoxCount for batteries or cells that are contained within this specific package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pieceCountVerificationBoxCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PieceCountVerificationBoxCount { get; set; }

        /// <summary>
        /// Provide details about the batteries or cells that are contained within this specific package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("batteryDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BatteryDetail>? BatteryDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("dryIceWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight_3? DryIceWeight { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the Priority Alert Detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PriorityAlertDetail
    {
        /// <summary>
        /// The types of all enhancement for the Priority Alert.&lt;br&gt;Example: PRIORITY_ALERT_PLUS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enhancementTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? EnhancementTypes { get; set; }

        /// <summary>
        /// Specifies Content for the Priority Alert Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This element specifies Signature option details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SignatureOptionDetail
    {
        /// <summary>
        /// This is release number.&lt;br&gt;Example: 23456
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signatureReleaseNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SignatureReleaseNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are detcontentails for the package containing alcohol. This is required for alcohol special service. The alcoholRecipientType is required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlcoholDetail
    {
        /// <summary>
        /// Specify the Alcohol Recipient Type of the shipment. &lt;br&gt; Example: LICENSEE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alcoholRecipientType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlcoholDetailAlcoholRecipientType AlcoholRecipientType { get; set; }

        /// <summary>
        /// Specify the type of entity, the shipper for alcohol shipment is registered such as fulfillment house, retailer or a winery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipperAgreementType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShipperAgreementType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Provide dangerous goods shipment details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DangerousGoodsDetail
    {
        /// <summary>
        /// A Boolean value that, when True, specifies the mode of shipment transportation should be Cargo Aircraft for Dangerous Goods. Its default value is set as False.&lt;br&gt;Note: An identifier DGD-CAO is added in AWB for cargo aircraft shipments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cargoAircraftOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CargoAircraftOnly { get; set; }

        /// <summary>
        /// Specify Dangerous Goods Accessibility Type. &lt;ul&gt;&lt;li&gt;Inaccessible &amp;ndash; it does not have to be accessable on the aircraft.&lt;/li&gt;&lt;li&gt;Accessible &amp;ndash; it must be fully accessible on the aircraft, and is more strictly controlled.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessibility", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DangerousGoodsDetailAccessibility Accessibility { get; set; }

        /// <summary>
        /// Indicate type of DG being reported.&lt;br&gt; - SMALL_QUANTITY_EXCEPTION : It is applicable for only One Piece shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Options4>? Options { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are COD package details. For use with FedEx Ground services only; COD must be present in shipments special services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageCODDetail
    {
        /// <summary>
        /// Indicate the COD collection amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codCollectionAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Money? CodCollectionAmount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatteryDetail
    {
        /// <summary>
        /// Describe the packing arrangement of the battery or cell with respect to other items within the same package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("batteryPackingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BatteryDetailBatteryPackingType BatteryPackingType { get; set; }

        /// <summary>
        /// This is a regulation specific classification for the battery or the cell.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("batteryRegulatoryType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BatteryDetailBatteryRegulatoryType BatteryRegulatoryType { get; set; }

        /// <summary>
        /// Indicate the material composition of the battery or cell.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("batteryMaterialType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BatteryDetailBatteryMaterialType BatteryMaterialType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is to specify whether the encoded bytecode or  the Label URL to be returned in the response.&lt;p&gt;Valid values:&lt;ul&gt;&lt;li&gt;LABEL &amp;ndash; Indicates request is for encoded bytecode.&lt;/li&gt;&lt;li&gt;URL_ONLY &amp;ndash; Indicates label URL request.&lt;/li&gt;&lt;/ul&gt;Note: For asynchronous shipment (More than 40 packages) request only the value LABEL is suported.&lt;/p&gt;&lt;br&gt;&lt;i&gt;Note: With URL_ONLY option, the URL once created will be active for 12 hours.&lt;/i&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LABELRESPONSEOPTIONS
    {

        [System.Runtime.Serialization.EnumMember(Value = @"URL_ONLY")]
        URL_ONLY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LABEL")]
        LABEL = 1,

    }

    /// <summary>
    /// The account number associated with the shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipperAccountNumber
    {
        /// <summary>
        /// The account number value. Maximum length is 9 .&lt;br&gt;Example: Your account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate shipment action for the Shipment. &lt;ul&gt;&lt;li&gt;CONFIRM &amp;ndash; used in case of shipment submission&lt;/li&gt;&lt;li&gt;TRANSFER &amp;ndash; used in case of Email Label Shipment or Pending Shipment submission.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OpenShipmentAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRM")]
        CONFIRM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFER")]
        TRANSFER = 1,

    }

    /// <summary>
    /// Indicate the processing option for submitting a Single shot MPS shipment. The value indicates if the MPS to be processed synchronously or asynchronously.&lt;br&gt;Note: &lt;ul&gt;&lt;li&gt;Default value is SYNCHRONOUS_ONLY.&lt;/li&gt;&lt;li&gt;Value or element is not needed when groupPackageCount is less than or equal to 40.&lt;/li&gt;&lt;li&gt;Must provide element with value ALLOW_ASYNCHRONOUS when groupPackageCount is greater than 40.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AsynchronousProcessingOptionType_1
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SYNCHRONOUS_ONLY")]
        SYNCHRONOUS_ONLY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOW_ASYNCHRONOUS")]
        ALLOW_ASYNCHRONOUS = 1,

    }

    /// <summary>
    /// Wrapper class for ShipShipmentOutputVO. It holds transactionId and output.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SHPCResponseVO_ShipShipment
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element has a unique identifier added in your request, helps you match the request to the reply.&lt;br&gt;Example: XXXX_XXX123XXXXX
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseProcessOutputVO_ShipShipment? Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is the response received when a shipment is requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProcessOutputVO_ShipShipment
    {
        /// <summary>
        /// These are shipping transaction details, such as master tracking number, service type, and ship date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionShipments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionShipmentOutputVO>? TransactionShipments { get; set; }

        /// <summary>
        /// The alerts received when processing a shipment request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert>? Alerts { get; set; }

        /// <summary>
        /// Unique identifier for a Job. Example: abc123456
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? JobId { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies shipping transaction output details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionShipmentOutputVO
    {
        /// <summary>
        /// Indicate the FedEx serviceType used for this shipment. The results will be filtered by the serviceType value indicated.&lt;br&gt;Example: STANDARD_OVERNIGHT&lt;br&gt;&lt;a onclick='loadDocReference("servicetypes")'&gt;click here to see Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceType { get; set; }

        /// <summary>
        /// This is the shipment date. Default value is current date in case the date is not provided or a past date is provided.&lt;br&gt;Format [YYYY-MM-DD].&lt;br&gt;Example: 2019-10-14
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDatestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShipDatestamp { get; set; }

        /// <summary>
        /// Indicates the Service Category.&lt;br&gt;Example: EXPRESS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceCategory { get; set; }

        /// <summary>
        /// These are shipping document details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentDocuments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LabelResponseVO>? ShipmentDocuments { get; set; }

        /// <summary>
        /// Specifies the information about the pieces, received in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pieceResponses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PieceResponse>? PieceResponses { get; set; }

        /// <summary>
        /// This is the service name associated with the shipment.&lt;br&gt;Example: FedEx Ground
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceName { get; set; }

        /// <summary>
        /// These are alert details received in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert>? Alerts { get; set; }

        [Newtonsoft.Json.JsonProperty("completedShipmentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletedShipmentDetail? CompletedShipmentDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentAdvisoryDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentAdvisoryDetails? ShipmentAdvisoryDetails { get; set; }

        /// <summary>
        /// This is a master tracking number for the shipment (must be unique for stand-alone open shipments, or unique within consolidation if consolidation key is provided).&lt;br&gt;Example: 794953535000
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterTrackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MasterTrackingNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are shipping document/label specific information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LabelResponseVO
    {
        /// <summary>
        /// This is the content key of the document/label.&lt;br&gt;Example: content key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ContentKey { get; set; }

        /// <summary>
        /// These are the number of copies to print for the specific document type.&lt;br&gt;Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copiesToPrint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CopiesToPrint { get; set; }

        /// <summary>
        /// Indicates the type of document/label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LabelResponseVOContentType ContentType { get; set; }

        /// <summary>
        /// This is the tracking number of the package. &lt;br&gt;Example: 49XXX0000XXX20032835&lt;br&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrackingNumber { get; set; }

        /// <summary>
        /// This is the document type.&lt;br&gt;Example: PDF
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DocType { get; set; }

        /// <summary>
        /// These are alerts received in the label response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert>? Alerts { get; set; }

        /// <summary>
        /// Specifies if the document is encoded.&lt;br&gt;Example: encoded label
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encodedLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] EncodedLabel { get; set; }

        /// <summary>
        /// The URL of the shipping document/label&lt;br&gt;Example: https://.../document/v2/document/retrieve/SH,794816968200_Merge/isLabel=true&amp;autoPrint=false&lt;br&gt;&lt;i&gt;Note: The URL once created will be active for 24 hours.&lt;/i&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are alert details received in the response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Alert
    {
        /// <summary>
        /// Specifies the API alert code.&lt;br&gt;Example: SHIP.RECIPIENT.POSTALCITY.MISMATCH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies the API alert type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alertType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertType AlertType { get; set; }

        /// <summary>
        /// Specifies the API alert message.&lt;br&gt;Example: Recipient Postal-City Mismatch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Piece Response information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PieceResponse
    {
        /// <summary>
        /// Indicates the net charges amount.&lt;br&gt;Example: 21.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netChargeAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetChargeAmount { get; set; }

        /// <summary>
        /// Indicates data received that governs data payload language/translations. The TransactionDetail from the request is echoed back to the caller in the corresponding reply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionDetailVO>? TransactionDetails { get; set; }

        /// <summary>
        /// These are package documents returned in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageDocuments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LabelResponseVO>? PackageDocuments { get; set; }

        /// <summary>
        /// Indicates the acceptance tracking number.&lt;br&gt;Example: 7949XXXXX5000
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acceptanceTrackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AcceptanceTrackingNumber { get; set; }

        /// <summary>
        /// Indicates the service category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PieceResponseServiceCategory ServiceCategory { get; set; }

        /// <summary>
        /// Indicates total charges applicable to the customer.&lt;br&gt;Example: listCustomerTotalCharge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listCustomerTotalCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ListCustomerTotalCharge { get; set; }

        /// <summary>
        /// Indicates delivery date with timestamp.&lt;br&gt;Example: 2012-09-23
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeliveryTimestamp { get; set; }

        /// <summary>
        /// Indicates the type of the tracking identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingIdType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrackingIdType { get; set; }

        /// <summary>
        /// These are additional charges or discounts.&lt;br&gt;Example: 621.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalChargesDiscount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double AdditionalChargesDiscount { get; set; }

        /// <summary>
        /// Indicates the net List rate amount.&lt;br&gt;Example: 1.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netListRateAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetListRateAmount { get; set; }

        /// <summary>
        /// Specifies the base rate amount.&lt;br&gt;Example: 321.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseRateAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double BaseRateAmount { get; set; }

        /// <summary>
        /// Indicates package sequence number.&lt;br&gt;Example: 215
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageSequenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PackageSequenceNumber { get; set; }

        /// <summary>
        /// Specifies the net discount amount.&lt;br&gt;Example: 121.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netDiscountAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetDiscountAmount { get; set; }

        /// <summary>
        /// Specifies the Collect on Delivery collection amount.&lt;br&gt;Example: 231.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codcollectionAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double CodcollectionAmount { get; set; }

        /// <summary>
        /// This is a master tracking number of the shipment (must be unique for stand-alone open shipments, or unique within consolidation if consolidation key is provided).&lt;br&gt;Example: 794XXXXX5000
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterTrackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MasterTrackingNumber { get; set; }

        /// <summary>
        /// Indicates acceptance type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acceptanceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AcceptanceType { get; set; }

        /// <summary>
        /// This is the tracking number associated with this package. &lt;br&gt;Example: 49XXX0000XXX20032835
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrackingNumber { get; set; }

        /// <summary>
        /// Returns true if the responses are successful otherwise false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("successful", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Successful { get; set; }

        /// <summary>
        /// These are additional customer reference data.&lt;br&gt;Note: The groupPackageCount must be specified to retrieve customer references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerReferences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerReference>? CustomerReferences { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionDetailVO
    {
        /// <summary>
        /// Includes data returned which governs data payload language/translations. The TransactionDetail from the request is echoed back to the caller in the corresponding reply.&lt;br&gt;Example: transactionDetails
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionDetails { get; set; }

        /// <summary>
        /// This element has a unique identifier added in your request, helps you match the request to the reply. Maximum of 40 characters allowed.&lt;br&gt;Example: XXXX_XXX123XXXXX.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Returns the result of processing the desired package as a single-package shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedShipmentDetail
    {
        /// <summary>
        /// Indicates the completed package details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completedPackageDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompletedPackageDetail>? CompletedPackageDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("operationalDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentOperationalDetail? OperationalDetail { get; set; }

        /// <summary>
        /// Specify the four letter code of a FedEx operating company that meets your requirements&lt;br&gt;Examples of FedEx Operating Companies are:&lt;ul&gt;&lt;li&gt;FDXE - FedEx Express&lt;/li&gt;&lt;li&gt;FDXG - FedEx Ground&lt;/li&gt;&lt;li&gt;FXSP - FedEx SmartPost&lt;/li&gt;&lt;li&gt;FXCC - FedEx Custom Critical.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CarrierCode { get; set; }

        [Newtonsoft.Json.JsonProperty("completedHoldAtLocationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletedHoldAtLocationDetail? CompletedHoldAtLocationDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("completedEtdDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletedEtdDetail? CompletedEtdDetail { get; set; }

        /// <summary>
        /// Specifies packaging description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packagingDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PackagingDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("masterTrackingId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackingId? MasterTrackingId { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceDescription? ServiceDescription { get; set; }

        /// <summary>
        /// Indicates whether or not this is an intra-U.S. shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usDomestic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UsDomestic { get; set; }

        [Newtonsoft.Json.JsonProperty("hazardousShipmentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletedHazardousShipmentDetail? HazardousShipmentDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentRating? ShipmentRating { get; set; }

        [Newtonsoft.Json.JsonProperty("documentRequirements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentRequirementsDetail? DocumentRequirements { get; set; }

        /// <summary>
        /// For US export shipments requiring an EEI, enter the ITN number received from AES when you filed your shipment or the FTR (Foreign Trade Regulations) exemption number.The proper format for an ITN number is AES XYYYYMMDDNNNNNN where YYYYMMDD is date and NNNNNN are numbers generated by the AES.&lt;br&gt; Example: AESX20220714987654&lt;br&gt;Note: The ITN or FTR exemption number you submit in the ship request prints on the international shipping label.&lt;br&gt;&lt;br&gt;For CA export shipments,it can be Proof of report number(15-32 alphanumeric) , Summary proof of report number(7-32 alphanumeric) or Exemption number(2 digit) based on the selected b13AFilingOption.&lt;br&gt;Example: 98765432107654321(POR number), 7654321(Summary POR number) and 02(Exemption number).&lt;br&gt;For FTR exemption number you need provide a predefined value as NO_EEI_30_37_A.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportComplianceStatement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExportComplianceStatement { get; set; }

        [Newtonsoft.Json.JsonProperty("accessDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PendingShipmentAccessDetail? AccessDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedPackageDetail
    {
        /// <summary>
        /// This is package sequence number. No negative value or decimals are allowed.&lt;br&gt;Example: 256
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SequenceNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("operationalDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageOperationalDetail? OperationalDetail { get; set; }

        /// <summary>
        /// It specifies the signature option applied, to allow cases in which the value requested conflicted with other service features in the shipment. &lt;br&gt;Example: DIRECT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signatureOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SignatureOption { get; set; }

        /// <summary>
        /// Tracking details of the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TrackingId>? TrackingIds { get; set; }

        /// <summary>
        /// This is group shipment number. Used with request containing PACKAGE_GROUPS, to identify which group of identical packages was used to produce a reply item.&lt;br&gt;Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int GroupNumber { get; set; }

        /// <summary>
        /// Indicates the oversize classification.&lt;br&gt;Example: OVERSIZE_1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oversizeClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OversizeClass { get; set; }

        [Newtonsoft.Json.JsonProperty("packageRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageRating? PackageRating { get; set; }

        /// <summary>
        /// Descriptive data required for a FedEx shipment containing dry ice. Includes weight and units. This element is required when SpecialServiceType DRY_ICE is present in the SpecialServiceTypes collection at the package level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dryIceWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight? DryIceWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("hazardousPackageDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletedHazardousPackageDetail? HazardousPackageDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Package-level data required for labeling and/or movement.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageOperationalDetail
    {
        /// <summary>
        /// This is human-readable astra handling text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("astraHandlingText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AstraHandlingText { get; set; }

        [Newtonsoft.Json.JsonProperty("barcodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageBarcodes? Barcodes { get; set; }

        /// <summary>
        /// These are operational instruction such as Ground Information printed on a given area of the label, one-dimensional barcode with only x-axis that contains the details of the shipment in encrypted form, COD Return operational instructions data such as COD amount, SECURED or UNSECURED.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationalInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OperationalInstructions>? OperationalInstructions { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are package barcode details. Each instance of this data type represents the set of barcodes (of all types) which are associated with a specific package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageBarcodes
    {
        /// <summary>
        /// This is binary-style barcodes used for the package identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("binaryBarcodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BinaryBarcode>? BinaryBarcodes { get; set; }

        /// <summary>
        /// This is string-style barcodes  used for package identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stringBarcodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StringBarcode>? StringBarcodes { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Each instance of this data type represents a barcode whose content must be represented as binary data (i.e. not ASCII text).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BinaryBarcode
    {
        /// <summary>
        /// This is the type of barcode data available in this instance.&lt;br&gt; Example: COMMON-2D
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        /// <summary>
        /// This is the value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[]? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Each instance of this data type represents a barcode whose content must be represented as ASCII text (i.e. not binary data).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StringBarcode
    {
        /// <summary>
        /// This is the type of barcode data in this instance. &lt;br&gt;Valid values:&lt;ul&gt;&lt;li&gt;ADDRESS - Represents the recipient address.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        /// <summary>
        /// This is the value.&lt;br&gt;Example: 1010062512241535917900794953544894
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationalInstructions
    {
        /// <summary>
        /// Specifies the number of operational instructions returned for this shipment.&lt;br&gt;Example: 17
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Number { get; set; }

        /// <summary>
        /// This is an operational instruction printed or available on the shipping document.&lt;br&gt;Example: SECURED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the tracking details of the package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackingId
    {
        /// <summary>
        /// This is FedEx tracking Identifier associated with the package.&lt;br&gt;Example: 8600
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FormId { get; set; }

        /// <summary>
        /// Specify the FedEx transportation type. &lt;br&gt;Example: EXPRESS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingIdType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrackingIdType { get; set; }

        /// <summary>
        /// Specify the USPS tracking Identifier associated with FedEx SmartPost shipment.&lt;br&gt;Example: 92
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uspsApplicationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UspsApplicationId { get; set; }

        /// <summary>
        /// This is the number associated with the package that is used to track it. &lt;br&gt;Example: 49XXX0000XXX20032835
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrackingNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This class groups together all package-level rate data for a single package (across all rate types) as part of the response to a shipping request, which groups shipment-level data together and groups package-level data by package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageRating
    {
        /// <summary>
        /// This is the difference between the list and account net charge.&lt;br&gt;Example: 0.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveNetDiscount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double EffectiveNetDiscount { get; set; }

        /// <summary>
        /// This is the actual rate type. It identifies which entry in the following array is considered as presenting the actual rates for the package.&lt;br&gt;Example: PAYOR_ACCOUNT_PACKAGE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actualRateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ActualRateType { get; set; }

        /// <summary>
        /// Data for a package's rates, as calculated per a specific rate type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageRateDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PackageRateDetail>? PackageRateDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are package rate details, as calculated per a specific rate type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageRateDetail
    {
        /// <summary>
        /// Indicates the weight types used in calculating this rate, such as actual weight or dimensional weight.&lt;br&gt; Example: DIM
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratedWeightMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RatedWeightMethod { get; set; }

        /// <summary>
        /// The sum of all freight discounts for this package.&lt;br&gt;Example: 44.55
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalFreightDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalFreightDiscounts { get; set; }

        /// <summary>
        /// The sum of all taxes on this package.&lt;br&gt;Example: 3.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalTaxes { get; set; }

        /// <summary>
        /// Indicates the minumum charge type. INTERNAL FEDEX USE ONLY.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumChargeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MinimumChargeType { get; set; }

        /// <summary>
        /// The package transportation charge(prior to any discounts applied).&lt;br&gt;Example: 45.67
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double BaseCharge { get; set; }

        /// <summary>
        /// Specifies total rebates on this package.&lt;br&gt;Example: 4.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalRebates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalRebates { get; set; }

        /// <summary>
        /// This is the rate type used.&lt;br&gt;Example: PAYOR_RETAIL_PACKAGE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; }

        [Newtonsoft.Json.JsonProperty("billingWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight? BillingWeight { get; set; }

        /// <summary>
        /// This is the net freight charges. i.e. base charge minus total freight discounts for a package.&lt;br&gt;Example: 4.89
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netFreight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetFreight { get; set; }

        /// <summary>
        /// These are all surcharges on this package.&lt;br&gt;&lt;a onclick='loadDocReference("surcharges")'&gt;click here to see Surcharges&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Surcharge>? Surcharges { get; set; }

        /// <summary>
        /// The sum of all surcharges on this package.&lt;br&gt;Example: 22.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSurcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalSurcharges { get; set; }

        /// <summary>
        /// This is sum of net freight and total surcharges (not including totalTaxes) for this package.&lt;br&gt;Example: 12.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netFedExCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetFedExCharge { get; set; }

        /// <summary>
        /// This is the sum of net freight, total surcharges and total taxes for a package.&lt;br&gt;Example: 121.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetCharge { get; set; }

        /// <summary>
        /// This is the currency code. &lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;click here to see Currency codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are surcharges details.&lt;br&gt;&lt;a onclick='loadDocReference("surcharges")'&gt;click here to see Surcharges&lt;/a&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Surcharge
    {
        /// <summary>
        /// This is the surcharge amount.&lt;br&gt;Example: 15.35
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Amount { get; set; }

        /// <summary>
        /// This is the surcharge type.&lt;br&gt;Example: APPOINTMENT_DELIVERY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surchargeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SurchargeType { get; set; }

        /// <summary>
        /// Specifies if the surcharge applies to the entire shipment, or to an individual package.&lt;br&gt;Example: PACKAGE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Level { get; set; }

        /// <summary>
        /// Specifies the description of the surcharge. Indicates delivery and returns information for FedEx Ground Economy services. &lt;br&gt;Example: Fuel Surcharge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Complete package-level hazardous commodity information for a single package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedHazardousPackageDetail
    {
        /// <summary>
        /// Specifies the hazardous package regulation type.&lt;br&gt;Example: IATA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regulation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Regulation { get; set; }

        /// <summary>
        /// Specifies the hazardous package accessibility.&lt;br&gt;Example: ACCESSIBLE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Accessibility { get; set; }

        /// <summary>
        /// Specifies the label type of hazardous package.&lt;br&gt;Example: II_YELLOW
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LabelType { get; set; }

        /// <summary>
        /// Indicates one or more approved containers used to pack dangerous goods commodities. This does not describe any individual inner receptacles that may be within this container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("containers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ValidatedHazardousContainer>? Containers { get; set; }

        /// <summary>
        /// A Boolean value that, when True, specifies the mode of shipment transportation should be Cargo Aircraft for Dangerous Goods. Its default value is set as False.&lt;br&gt;Note: An identifier DGD-CAO is added in AWB for cargo aircraft shipments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cargoAircraftOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CargoAircraftOnly { get; set; }

        /// <summary>
        /// A unique reference id that matches the package to a package configuration. This is populated if the client provided a package configuration for several packages that have the exact same dangerous goods content.&lt;br&gt;Example: 123456
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReferenceId { get; set; }

        /// <summary>
        /// Specifies the maximum radiation level from the package (measured in microSieverts per hour at a distance of one meter from the external surface of the package, divided by 10).&lt;br&gt;Example: 2.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("radioactiveTransportIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RadioactiveTransportIndex { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the details of a container used to package dangerous goods commodities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidatedHazardousContainer
    {
        /// <summary>
        /// Indicates that the quantity of the dangerous goods packaged is permissible for shipping. This is used to ensure that the dangerous goods commodities do not exceed the net quantity per package restrictions.&lt;br&gt;Example: 2.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qvalue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Qvalue { get; set; }

        /// <summary>
        /// Indicates the details of the hazardous commodities in the completed package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hazardousCommodities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ValidatedHazardousCommodityContent>? HazardousCommodities { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These the details on the kind and quantity of an individual hazardous commodity in a package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidatedHazardousCommodityContent
    {
        /// <summary>
        /// Indicates hazardous commodity quantity details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityQuantityDetail? Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityContent001? Options { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValidatedHazardousCommodityDescription? Description { get; set; }

        [Newtonsoft.Json.JsonProperty("netExplosiveDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetExplosiveDetail? NetExplosiveDetail { get; set; }

        /// <summary>
        /// The mass points are a calculation used by ADR regulations for measuring the risk of a particular hazardous commodity.&lt;br&gt;Example: 2.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("massPoints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MassPoints { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the Hazardous commodity quantity details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityQuantityDetail
    {
        /// <summary>
        /// Indicate the measure of units quantity to be validated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HazardousCommodityQuantityDetailQuantityType QuantityType { get; set; }

        /// <summary>
        /// Indicate the amount of the commodity in alternate units.&lt;br&gt;Example: 24.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }

        /// <summary>
        /// Indicate the unit of measure.&lt;br&gt;Example: KG
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer-provided specifications for handling individual commodities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityContent001
    {
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityQuantityDetail? Quantity { get; set; }

        /// <summary>
        /// Specifies the inner receptacles within the container.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("innerReceptacles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HazardousCommodityInnerReceptacleDetail01>? InnerReceptacles { get; set; }

        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityOptionDetail01? Options { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityDescription01? Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityInnerReceptacleDetail01
    {
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityQuantityDetail002? Quantity { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the Hazardous Commodity Quantity Detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityQuantityDetail002
    {
        /// <summary>
        /// Specifies which measure of quantity is to be validated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HazardousCommodityQuantityDetail002QuantityType QuantityType { get; set; }

        /// <summary>
        /// Number of units of the type below.&lt;br&gt;Example: 34.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }

        /// <summary>
        /// Specifies the units.&lt;br&gt;Example: KG
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Units { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates details of hazardous commodity option detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityOptionDetail01
    {
        /// <summary>
        /// Indicates the label text option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelTextOption", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HazardousCommodityOptionDetail01LabelTextOption LabelTextOption { get; set; }

        /// <summary>
        /// 'DG Data Upload Mode:- Optional.,DG Full Validation Mode:- Optional,Text used in labeling the commodity under control of the LabelTextOption field&lt;br&gt;Example:Customer Supplied Label Text'
        /// <br/>
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerSuppliedLabelText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerSuppliedLabelText { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Required&lt;br&gt;Details of hazardous commodity description.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityDescription01
    {
        /// <summary>
        /// Required&lt;br&gt;Specify the sequence number.&lt;br&gt;Example: 9812
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// Indicates any special processing options to be applied to the description of the dangerous goods commodity &lt;br&gt; Example: ["INCLUDE_SPECIAL_PROVISIONS"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("processingOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ProcessingOptions>? ProcessingOptions { get; set; }

        /// <summary>
        /// Required
        /// <br/>
        /// <br/>Indicates list of subsidiary classes&lt;br&gt;Example: ["Subsidiary Classes"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subsidiaryClasses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? SubsidiaryClasses { get; set; }

        /// <summary>
        /// Specifies the text for the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LabelText { get; set; }

        /// <summary>
        /// Specifies the technical name for the hazardous material.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("technicalName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TechnicalName { get; set; }

        [Newtonsoft.Json.JsonProperty("packingDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HazardousCommodityPackingDetail01? PackingDetails { get; set; }

        /// <summary>
        /// Information related to quantity limitations and operator or state variations as may be applicable to the dangerous goods commodity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Authorization { get; set; }

        /// <summary>
        /// Reportable Quantity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportableQuantity", Required = Newtonsoft.Json.Required.Always)]
        public bool ReportableQuantity { get; set; }

        /// <summary>
        /// Percentage&lt;br&gt;Example: 12.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Percentage { get; set; }

        /// <summary>
        /// ID&lt;br&gt;Example: 123
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; }

        /// <summary>
        /// Identifies DOT packing group for a hazardous commodity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packingGroup", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HazardousCommodityDescription01PackingGroup PackingGroup { get; set; }

        /// <summary>
        /// The proper shipping name as defined by the regulation. The name can also include qualifying words&lt;br&gt;Example: properShippingName
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properShippingName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ProperShippingName { get; set; }

        /// <summary>
        /// Specifies the hazard class for the commodity&lt;br&gt;Example: hazard Class
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hazardClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HazardClass { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies documentation and limits for validation of an individual packing group/category. DG Data Upload Mode: Required (IATA), Optional (Other), DG Full Validation Mode: Required (IATA), Optional (Other),
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HazardousCommodityPackingDetail01
    {
        /// <summary>
        /// Coded specification for how commodity is to be packed.&lt;br&gt;Example: packing Instructions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packingInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PackingInstructions { get; set; }

        /// <summary>
        /// A Boolean value that, when True, specifies the mode of shipment transportation should be Cargo Aircraft for Dangerous Goods. &lt;br&gt;Note: An identifier DGD-CAO is added in AWB for cargo aircraft shipments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cargoAircraftOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool CargoAircraftOnly { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identifies and describes an individual hazardous commodity. For 201001 load, this is based on data from the FedEx Ground Hazardous Materials Shipping Guide.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidatedHazardousCommodityDescription
    {
        /// <summary>
        /// In conjunction with the regulatory identifier, this field uniquely identifies a specific hazardous materials commodity.&lt;br&gt;Example: 876
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// Specifies Packing Instructions.&lt;br&gt;Example: packingInstructions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packingInstructions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PackingInstructions { get; set; }

        /// <summary>
        /// Specifies subsidiary Classes.&lt;br&gt;Example:["Subsidiary Classes"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subsidiaryClasses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? SubsidiaryClasses { get; set; }

        /// <summary>
        /// Specifies the text for the label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labelText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LabelText { get; set; }

        /// <summary>
        /// There are five categories of tunnel categorization with A representing the least restrictive and E as the most restrictive. Category A, as the least restrictive, will not be sign-posted. Category E, the most restrictive, only allows the passage of UN2919, UN3291, UN3331, UN3359 and UN3373.&lt;br&gt;Example: UN2919
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tunnelRestrictionCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TunnelRestrictionCode { get; set; }

        /// <summary>
        /// Specifies Special Provisions if any.&lt;br&gt;Example: specialProvisions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialProvisions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SpecialProvisions { get; set; }

        /// <summary>
        /// Fully-expanded descriptive text for a hazardous commodity.&lt;br&gt;Example: properShippingNameAndDescription
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properShippingNameAndDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ProperShippingNameAndDescription { get; set; }

        /// <summary>
        /// Specifies Technical Name.&lt;br&gt;Example: technicalName
        /// </summary>
        [Newtonsoft.Json.JsonProperty("technicalName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TechnicalName { get; set; }

        /// <summary>
        /// Specifies Symbols.&lt;br&gt;Example: symbols
        /// </summary>
        [Newtonsoft.Json.JsonProperty("symbols", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Symbols { get; set; }

        /// <summary>
        /// Information related to quantity limitations and operator or state variations as may be applicable to the dangerous goods commodity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Authorization { get; set; }

        /// <summary>
        /// Specifies attributes.&lt;br&gt;Example: ["attributes"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Attributes { get; set; }

        /// <summary>
        /// Specifies the Identification.&lt;br&gt;Example: 1234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; }

        /// <summary>
        /// Specifies packing group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packingGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PackingGroup { get; set; }

        /// <summary>
        /// Specifies proper shipping name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properShippingName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ProperShippingName { get; set; }

        /// <summary>
        /// Specifies hazard class.&lt;br&gt;Example: Hazard Class
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hazardClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HazardClass { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the total mass of the contained explosive substances, without the mass of any casings, bullets, shells, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetExplosiveDetail
    {
        /// <summary>
        /// Specifies amount.&lt;br&gt;Example: 10.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Specifies net explosive units.&lt;br&gt;Example: units
        /// </summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Units { get; set; }

        /// <summary>
        /// Specifies net explosive  classification type.&lt;br&gt;Example: NET_EXPLOSIVE_WEIGHT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the shipment level operational information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentOperationalDetail
    {
        /// <summary>
        /// Indicates the origin service area.&lt;br&gt;Example: A1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originServiceArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OriginServiceArea { get; set; }

        /// <summary>
        /// Indicates the service code.&lt;br&gt;Example: 010
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceCode { get; set; }

        /// <summary>
        /// Indicates the airport identifier.&lt;br&gt;Example: DFW
        /// </summary>
        [Newtonsoft.Json.JsonProperty("airportId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AirportId { get; set; }

        /// <summary>
        /// Specifies the postal code.&lt;br&gt;Example: 38010&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; }

        /// <summary>
        /// Indicates standard carrier alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scac", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Scac { get; set; }

        /// <summary>
        /// Specifies expected/estimated day of week of the delivery.&lt;br&gt;Example: TUE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeliveryDay { get; set; }

        /// <summary>
        /// This is the origin Location identifier.&lt;br&gt;Example: 678
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originLocationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OriginLocationId { get; set; }

        /// <summary>
        /// Indicate the two-letter country code.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Specifies astra description.&lt;br&gt;Example: SMART POST
        /// </summary>
        [Newtonsoft.Json.JsonProperty("astraDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AstraDescription { get; set; }

        /// <summary>
        /// Specifies origin location number.&lt;br&gt;Example: 243
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originLocationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OriginLocationNumber { get; set; }

        /// <summary>
        /// Specifies delivery date for the shipment. The format is [YYYY-MM-DD]&lt;br&gt;Example: 2001-04-05
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DeliveryDate { get; set; }

        /// <summary>
        /// FedEx Ground delivery features for which this shipment may be eligible.&lt;br&gt;Example: ["deliveryEligibilities"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryEligibilities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? DeliveryEligibilities { get; set; }

        /// <summary>
        /// Indicates that this shipment is not eligible for money back guarantee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ineligibleForMoneyBackGuarantee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IneligibleForMoneyBackGuarantee { get; set; }

        /// <summary>
        /// Maximum expected transit time.&lt;br&gt;Example: SEVEN_DAYS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumTransitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MaximumTransitTime { get; set; }

        /// <summary>
        /// This is the state or province code of the shipment destination location, and is not necessarily the same as the postal state.&lt;br&gt;Example: GA&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;click here to see State or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationLocationStateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DestinationLocationStateOrProvinceCode { get; set; }

        /// <summary>
        /// Text describing planned delivery.&lt;br&gt;Example: TUE - 15 OCT 10:30A
        /// </summary>
        [Newtonsoft.Json.JsonProperty("astraPlannedServiceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AstraPlannedServiceLevel { get; set; }

        /// <summary>
        /// Specifies the FedEx Destination Location Identifier.&lt;br&gt;Example: DALA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationLocationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DestinationLocationId { get; set; }

        /// <summary>
        /// Standard transit time per origin, destination, and service.&lt;br&gt;Example: TWO_DAYS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransitTime { get; set; }

        /// <summary>
        /// This is a placeholder for State or Province code.State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2.&lt;br&gt;Example: CA&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;click here to see State or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StateOrProvinceCode { get; set; }

        /// <summary>
        /// Indicates destination location number.&lt;br&gt;Example: 876
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationLocationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DestinationLocationNumber { get; set; }

        /// <summary>
        /// Indicates packaging code.&lt;br&gt;Example: 03
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packagingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PackagingCode { get; set; }

        /// <summary>
        /// This is committed date of delivery.&lt;br&gt;Example: 2019-10-15
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commitDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitDate { get; set; }

        /// <summary>
        /// This is delivery time, as published in Service Guide.&lt;br&gt;Example: 10:30A
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publishedDeliveryTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PublishedDeliveryTime { get; set; }

        /// <summary>
        /// This is ursa suffix code.&lt;br&gt;Example: Ga
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ursaSuffixCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UrsaSuffixCode { get; set; }

        /// <summary>
        /// This is ursa prefix code.&lt;br&gt;Example: XH
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ursaPrefixCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UrsaPrefixCode { get; set; }

        /// <summary>
        /// Specifies destination service area.&lt;br&gt;Example: A1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationServiceArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DestinationServiceArea { get; set; }

        /// <summary>
        /// Committed day of week of delivery.&lt;br&gt;Example: TUE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commitDay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CommitDay { get; set; }

        /// <summary>
        /// Transit time based on customer eligibility.&lt;br&gt;Example: ONE_DAY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customTransitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomTransitTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is default holding location information when HOLD_AT_LOCATION special service is requested and the client does not specify the hold location address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedHoldAtLocationDetail
    {
        /// <summary>
        /// Indicates the type of the FedEx holding location &lt;br&gt;Example: FEDEX_STAFFED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holdingLocationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HoldingLocationType { get; set; }

        /// <summary>
        /// Indicate the physical address of the FedEx holding location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holdingLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JustContactAndAddress? HoldingLocation { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JustContactAndAddress
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address? Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact? Contact { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Descriptive data for a physical location. May be used as an actual physical address (place to which one could go), or as a container of "address parts" which should be handled as a unit (such as a city-state-ZIP combination within the US).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// This is the combination of number, street name, etc. &lt;br&gt;Note: At least one line is required and streetlines more than 3 will be ignored. Empty lines should not be included. Maximum length per line is 35.&lt;br&gt;Example: [10 FedEx Parkway, Suite 302, .etc.]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> StreetLines { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// This is a placeholder for City Name.&lt;br&gt;Note: This is conditional and not required in all the requests.&lt;br&gt;Note: It is recommended for Express shipments for the most accurate ODA and OPA surcharges.&lt;br&gt;Example: Beverly Hills
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; }

        /// <summary>
        /// This is a placeholder for State or Province code.State code is required for US, CA, PR and not required for other countries. Conditional. Max length is 2.&lt;br&gt;Example: CA&lt;br&gt;&lt;a onclick='loadDocReference("canadaprovincecodes")'&gt;click here to see State or Province Code&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOrProvinceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StateOrProvinceCode { get; set; }

        /// <summary>
        /// Indicate the Postal code. This is Optional for non postal-aware countries. Maximum length is 10.&lt;br&gt; Example: 65247&lt;br&gt;&lt;a onclick='loadDocReference("postalawarecountries")'&gt;click here to see Postal aware countries&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; }

        /// <summary>
        /// This is the two-letter country code.&lt;br&gt;Maximum length is 2.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Indicate whether this address is residential (as opposed to commercial).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residential", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Residential { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify the contact information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact
    {
        /// <summary>
        /// Specify person name.&lt;br&gt;Example: John Taylor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonName { get; set; }

        /// <summary>
        /// Specify toll free phone number.&lt;br&gt;Example: XXXX7812
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tollFreePhoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TollFreePhoneNumber { get; set; }

        /// <summary>
        /// Specify email address.&lt;br&gt;Example: sample@company.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmailAddress { get; set; }

        /// <summary>
        /// The shippers phone number. &lt;br&gt;Minimum length is 10 and supports maximum of 15 for certain countries using longer phone numbers.&lt;br&gt;Note: For US and CA, a phone number must have exactly 10 digits, plus an optional leading country code of 1 or +1.&lt;br&gt;Example: 918xxxxx890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneNumber { get; set; }

        /// <summary>
        /// The shipper's phone extension. Max length is 6.&lt;br&gt;Example: 91
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneExtension { get; set; }

        /// <summary>
        /// Specify company name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CompanyName { get; set; }

        /// <summary>
        /// Specify pager number.&lt;br&gt;Example: XXX7812
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pagerNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PagerNumber { get; set; }

        /// <summary>
        /// Specify fax number.&lt;br&gt;Example: XXXX567890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FaxNumber { get; set; }

        /// <summary>
        /// Specify the title of the contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are completed ETD details when ELECTRONIC_TRADE_DOCUMENTS Special service type is requested
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedEtdDetail
    {
        /// <summary>
        /// Returns the folder id where the documents is uploaded &lt;br&gt; Example: "0b0493e580dc1a1b"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FolderId { get; set; }

        /// <summary>
        /// Returns the type of the document that is being uploaded &lt;br&gt; Example: "COMMERCIAL_INVOICE"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        /// <summary>
        /// Specify the document upload reference details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uploadDocumentReferenceDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UploadDocumentReferenceDetail>? UploadDocumentReferenceDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Descriptions for a service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceDescription
    {
        /// <summary>
        /// Indicate the FedEx serviceType used for this shipment. The results will be filtered by the serviceType value indicated.&lt;br&gt;Example: STANDARD_OVERNIGHT&lt;br&gt;&lt;a onclick='loadDocReference("servicetypes")'&gt;click here to see Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceType { get; set; }

        /// <summary>
        /// Specifies code of the Service.&lt;br&gt;example: 80
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Branded, translated, and/or localized names for this service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductName>? Names { get; set; }

        /// <summary>
        /// FOR FEDEX INTERNAL USE ONLY. The operating org code in a service.&lt;br&gt;Example: ["FXE", "FXE"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operatingOrgCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? OperatingOrgCodes { get; set; }

        /// <summary>
        /// Specifies astra Description.&lt;br&gt;Example: 2 DAY FRT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("astraDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AstraDescription { get; set; }

        /// <summary>
        /// Specifies the description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// FOR FEDEX INTERNAL USE ONLY, Designates the service ID.&lt;br&gt;Example: EP1000000027
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceId { get; set; }

        /// <summary>
        /// FOR FEDEX INTERNAL USE ONLY. This is tied to the Product EFS interface definition which will currently contain the values of parcel.&lt;br&gt;Example: EXPRESS_PARCEL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceCategory { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Product Name information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductName
    {
        /// <summary>
        /// The type of name (long, medium, short, etc.) to which this value refers.&lt;br&gt;Example: long
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        /// <summary>
        /// The character encoding used to represent this product name. &lt;br&gt;Example: UTF-8
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Encoding { get; set; }

        /// <summary>
        /// Specifies the value of the Product.&lt;br&gt;Example: F-2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Completed shipment level hazardous commodity information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedHazardousShipmentDetail
    {
        [Newtonsoft.Json.JsonProperty("hazardousSummaryDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletedHazardousSummaryDetail? HazardousSummaryDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("adrLicense", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdrLicenseDetail? AdrLicense { get; set; }

        [Newtonsoft.Json.JsonProperty("dryIceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentDryIceDetail? DryIceDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies Completed Hazardous Summary Detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedHazardousSummaryDetail
    {
        /// <summary>
        /// Specifies the total number of packages containing hazardous commodities in small exceptions.&lt;br&gt;Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("smallQuantityExceptionPackageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SmallQuantityExceptionPackageCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the details around the ADR license required for shipping.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdrLicenseDetail
    {
        [Newtonsoft.Json.JsonProperty("licenseOrPermitDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LicenseOrPermitDetail? LicenseOrPermitDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This contains the ADR license information, which identifies the license number, the effective date and the expiration date under which the customer is allowed to ship.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LicenseOrPermitDetail
    {
        /// <summary>
        /// Specifies license or permit detail number.&lt;br&gt;Example: 12345
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Number { get; set; }

        /// <summary>
        /// Specifies the effective date of the license.&lt;br&gt;The format is [YYYY-MM-DD].&lt;br&gt;Example: 2019-08-09
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EffectiveDate { get; set; }

        /// <summary>
        /// Specifies the expiration date of the license.&lt;br&gt;The format is [YYYY-MM-DD].&lt;br&gt;Example: 2019-04-09
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ExpirationDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the shipment level totals of dry ice data across all packages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentDryIceDetail
    {
        /// <summary>
        /// Specify total dry ice weight for the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight TotalWeight { get; set; } = new Weight();

        /// <summary>
        /// Specifies the package Count for the shipment&lt;br&gt;Example: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageCount", Required = Newtonsoft.Json.Required.Always)]
        public int PackageCount { get; set; }

        [Newtonsoft.Json.JsonProperty("processingOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentDryIceProcessingOptionsRequested? ProcessingOptions { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specify that dry ice information is only applicable at the shipment level. Package level dry ice information would not apply.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentDryIceProcessingOptionsRequested
    {
        /// <summary>
        /// Specifies the options.&lt;br&gt;Example: ["options"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Options { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// All shipment-level rating data for this shipment, which may include data for multiple rate types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentRating
    {
        /// <summary>
        /// This rate type identifies which entry in the following array is considered as presenting the "actual" rates for the shipment.&lt;br&gt;Example: PAYOR_LIST_SHIPMENT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actualRateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ActualRateType { get; set; }

        /// <summary>
        /// Each element of this field provides shipment-level rate totals for a specific rate type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentRateDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentRateDetail>? ShipmentRateDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a placeholder for shipment total/summary rates details, as calculated per a specific rate type. The totals may differ from the sum of corresponding package data for Multiweight or Express MPS.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentRateDetail
    {
        /// <summary>
        /// Indicates the rate zone used (based on origin and destination).&lt;br&gt;Example: US001O
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateZone { get; set; }

        /// <summary>
        /// Indicates which weight was used.&lt;br&gt;Example: ACTUAL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratedWeightMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RatedWeightMethod { get; set; }

        /// <summary>
        /// The total of the total duties &amp; taxes and the total ancillary fees &amp; taxes.&lt;br&gt;Example: 24.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDutiesTaxesAndFees", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalDutiesTaxesAndFees { get; set; }

        /// <summary>
        /// Specifies pricing Code.&lt;br&gt;Example: PACKAGE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PricingCode { get; set; }

        /// <summary>
        /// The total discounts used in the rate calculation.&lt;br&gt;Example: 1.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalFreightDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalFreightDiscounts { get; set; }

        /// <summary>
        /// Total of the transportation-based taxes.&lt;br&gt;Example: 3.45
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalTaxes { get; set; }

        /// <summary>
        /// Total of all values under this shipment's duties and taxes; only provided if estimated duties and taxes were calculated for this shipment.&lt;br&gt;Example: 6.78
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDutiesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalDutiesAndTaxes { get; set; }

        /// <summary>
        /// Identifies the total amount of the shipment-level fees and taxes that are not based on transportation charges or commodity-level estimated duties and taxes.&lt;br&gt;Example: 5.67
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAncillaryFeesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalAncillaryFeesAndTaxes { get; set; }

        /// <summary>
        /// All transportation-based taxes applicable to this shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Tax>? Taxes { get; set; }

        /// <summary>
        /// The total sum of all rebates applied to this shipment.&lt;br&gt;Example: 1.98
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalRebates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalRebates { get; set; }

        /// <summary>
        /// Specifies a fuel surcharge percentage.&lt;br&gt;Example: 4.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fuelSurchargePercent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FuelSurchargePercent { get; set; }

        [Newtonsoft.Json.JsonProperty("currencyExchangeRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyExchangeRate? CurrencyExchangeRate { get; set; }

        /// <summary>
        /// The freight charge minus discounts.&lt;br&gt;Example: 9.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetFreight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetFreight { get; set; }

        /// <summary>
        /// This is the sum of shipment's total net freight, total surchages (not including totalTaxes).&lt;br&gt;Example: 88.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetFedExCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetFedExCharge { get; set; }

        /// <summary>
        /// This is data for a single leg of a shipment's total/summary rates, as calculated per a specific rate type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentLegRateDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentLegRateDetail>? ShipmentLegRateDetails { get; set; }

        /// <summary>
        /// The value used to calculate the weight based on the dimensions.&lt;br&gt;Example: 0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimDivisor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DimDivisor { get; set; }

        /// <summary>
        /// The Type used for this specific set of rate data.&lt;br&gt;Example: RATED_ACCOUNT_SHIPMENT
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; }

        /// <summary>
        /// All surcharges that apply to this shipment.&lt;br&gt;&lt;a onclick='loadDocReference("surcharges")'&gt;click here to see Surcharges&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Surcharge>? Surcharges { get; set; }

        /// <summary>
        /// The total amount of all surcharges applied to this shipment.&lt;br&gt;Example: 9.88
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSurcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalSurcharges { get; set; }

        /// <summary>
        /// The weight used to calculate these rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBillingWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight? TotalBillingWeight { get; set; }

        /// <summary>
        /// Indicates the freight discounts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("freightDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RateDiscount>? FreightDiscounts { get; set; }

        /// <summary>
        /// Indicates the rate scale used.&lt;br&gt;Example: 00000
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateScale { get; set; }

        /// <summary>
        /// The net charge after applying all discounts and surcharges.&lt;br&gt;Example: 3.78
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetCharge { get; set; }

        /// <summary>
        /// The total Shipment charge that was calculated before surcharges, discounts and taxes.&lt;br&gt;Example: 234.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBaseCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalBaseCharge { get; set; }

        /// <summary>
        /// This is the sum of shipment's total net charges and total duties and taxes; only provided if estimated duties and taxes were calculated for this shipment AND duties, taxes and transportation charges are all paid by the same sender account.&lt;br&gt;Example: 222.56
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetChargeWithDutiesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetChargeWithDutiesAndTaxes { get; set; }

        /// <summary>
        /// Indicates the currency code.&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;click here to see Currency Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the tax for the shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tax
    {
        /// <summary>
        /// Indicates the amount of tax.&lt;br&gt;Example: 10.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Indicates the level of tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Level { get; set; }

        /// <summary>
        /// Specifies the tax description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Specifies the type of the tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the currency exchange performed on financial amounts on this rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrencyExchangeRate
    {
        /// <summary>
        /// Multiplier used to convert from Currency units to into Currency units.&lt;br&gt;Example: 25.6
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Rate { get; set; }

        /// <summary>
        /// The currency code for the original (converted FROM) currency.&lt;br&gt;Example: Rupee&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;click here to see Currency codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FromCurrency { get; set; }

        /// <summary>
        /// The currency code for the final(converted INTO) currency.&lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;click here to see currencycodes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("intoCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IntoCurrency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a placeholder for single leg of a shipment rates details, as calculated per a specific rate type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentLegRateDetail
    {
        /// <summary>
        /// Indicates the rate zone used (based on origin and destination).&lt;br&gt;Example: rateZone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateZone { get; set; }

        /// <summary>
        /// Specifies the Pricing Code.&lt;br&gt;Example: pricingCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PricingCode { get; set; }

        /// <summary>
        /// Specifies the taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Tax>? Taxes { get; set; }

        /// <summary>
        /// Sum of dimensional weights for all packages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDimWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight? TotalDimWeight { get; set; }

        /// <summary>
        /// Specifies the total rebate.&lt;br&gt;Example: 2.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalRebates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalRebates { get; set; }

        /// <summary>
        /// Specifies a fuel surcharge percentage.&lt;br&gt;Example: 6.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fuelSurchargePercent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FuelSurchargePercent { get; set; }

        /// <summary>
        /// Specifies currency exchange rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyExchangeRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyExchangeRate? CurrencyExchangeRate { get; set; }

        /// <summary>
        /// The value used to calculate the weight based on the dimensions.&lt;br&gt;Example: 6
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimDivisor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DimDivisor { get; set; }

        /// <summary>
        /// Type used for this specific set of rate data.&lt;br&gt;Example: PAYOR_RETAIL_PACKAGE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; }

        /// <summary>
        /// Specifies the location id the destination of shipment leg.&lt;br&gt;Example: HKAA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legDestinationLocationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LegDestinationLocationId { get; set; }

        /// <summary>
        /// Identifies the type of dim divisor that was applied.&lt;br&gt;Example: dimDivisorType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dimDivisorType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DimDivisorType { get; set; }

        /// <summary>
        /// The total freight charge that was calculated before surcharges, discounts and taxes.&lt;br&gt;Example: 6.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBaseCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalBaseCharge { get; set; }

        /// <summary>
        /// Indicates which weight was used.&lt;br&gt;Example: ratedWeightMethod
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratedWeightMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RatedWeightMethod { get; set; }

        /// <summary>
        /// The sum of all discounts.&lt;br&gt;Example: 9.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalFreightDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalFreightDiscounts { get; set; }

        /// <summary>
        /// Total of the transportation-based taxes.&lt;br&gt;Example: 12.6
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalTaxes { get; set; }

        /// <summary>
        /// Specifies minimum charge type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumChargeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MinimumChargeType { get; set; }

        /// <summary>
        /// Total of shipments duties and taxes; only provided if estimated duties and taxes were calculated for this shipment.&lt;br&gt;Example: 17.78
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDutiesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalDutiesAndTaxes { get; set; }

        /// <summary>
        /// The freight charge minus discounts.&lt;br&gt;Example: 6.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetFreight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetFreight { get; set; }

        /// <summary>
        /// This is the sum of shipment's total surcharges (not including total taxes).&lt;br&gt;Example: 3.2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetFedExCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetFedExCharge { get; set; }

        /// <summary>
        /// All surcharges that apply to this shipment.&lt;br&gt;&lt;a onclick='loadDocReference("surcharges")'&gt;click here to see surcharges&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Surcharge>? Surcharges { get; set; }

        /// <summary>
        /// The total of all surcharges.&lt;br&gt;Example: 5.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSurcharges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalSurcharges { get; set; }

        /// <summary>
        /// The weight used to calculate these rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBillingWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weight? TotalBillingWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("freightDiscounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RateDiscount>? FreightDiscounts { get; set; }

        /// <summary>
        /// Indicates the rate scale used.&lt;br&gt;Example: 6702
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateScale { get; set; }

        /// <summary>
        /// The net charge after applying all discounts and surcharges.&lt;br&gt;Example: 253
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetCharge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetCharge { get; set; }

        /// <summary>
        /// Sum of total net charge, total duties and taxes; only provided if estimated duties and taxes were calculated for this shipment and duties, taxes and transportation charges are all paid by the same sender account.&lt;br&gt;Example: 25.67
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalNetChargeWithDutiesAndTaxes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalNetChargeWithDutiesAndTaxes { get; set; }

        /// <summary>
        /// This is the currency code for the amount.&lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;click here to see Currency codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies discount Rate for Shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateDiscount
    {
        /// <summary>
        /// Specifies the amount.&lt;br&gt;Example: 8.9
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// The type of rate discount. &lt;br/&gt; Valid Values are BONUS, COUPON,EARNED,OTHER,VOLUME.&lt;br&gt;Example: COUPON
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateDiscountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateDiscountType { get; set; }

        /// <summary>
        /// Specifies the percentage of Rate discount.&lt;br&gt;Example: 28.9
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Percent { get; set; }

        /// <summary>
        /// Specifies the description of the discounted rate.&lt;br&gt;Example: description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the document requirements detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentRequirementsDetail
    {
        /// <summary>
        /// Indicates the required documents information.&lt;br&gt;Example: ["COMMERCIAL_OR_PRO_FORMA_INVOICE","AIR_WAYBILL"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requiredDocuments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? RequiredDocuments { get; set; }

        /// <summary>
        /// Indicates the prohibited Documents info.&lt;br&gt;Example: ["CERTIFICATE_OF_ORIGIN "]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prohibitedDocuments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? ProhibitedDocuments { get; set; }

        /// <summary>
        /// Specifies the generation details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generationDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DocumentGenerationDetail>? GenerationDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the document generation detail information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentGenerationDetail
    {
        /// <summary>
        /// Indicates the letterhead requirement type.&lt;br&gt;Example: OPTIONAL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("letterhead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Letterhead { get; set; }

        /// <summary>
        /// Indicates electronic signature requirement type.&lt;br&gt;Example:  OPTIONAL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("electronicSignature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ElectronicSignature { get; set; }

        /// <summary>
        /// It is a non-Negative Integer.&lt;br&gt;Example: 3
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumCopiesRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MinimumCopiesRequired { get; set; }

        /// <summary>
        /// It is an Enterprise Document Type.&lt;br&gt;Example: COMMERCIAL_INVOICE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This information describes how and when a online email return label shipment may be accessed for completion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PendingShipmentAccessDetail
    {
        /// <summary>
        /// Indicates the details about the users who can access the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessorDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PendingShipmentAccessorDetail>? AccessorDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies details for how to access the pending email return label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PendingShipmentAccessorDetail
    {
        /// <summary>
        /// Specifies the accessor password.&lt;br&gt;Example: password
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; }

        /// <summary>
        /// Specifies the accessor role.&lt;br&gt;Example: role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Role { get; set; }

        /// <summary>
        /// Specifies the URL for the email label.&lt;br&gt;Example: emailLabelUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailLabelUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmailLabelUrl { get; set; }

        /// <summary>
        /// Specifies the accessor User ID.&lt;br&gt;Example: userId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UserId { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are shipment advisory details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentAdvisoryDetails
    {
        [Newtonsoft.Json.JsonProperty("regulatoryAdvisory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegulatoryAdvisoryDetail? RegulatoryAdvisory { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the regulatory advisory details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegulatoryAdvisoryDetail
    {
        /// <summary>
        /// It is a regulatory probitions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prohibitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegulatoryProhibition>? Prohibitions { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SuggestedCommodityDetail
    {
        /// <summary>
        /// This is a suggested commodity description.&lt;br&gt;Example: Commodity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Specify the harmonized code.&lt;br&gt;Example: XXX12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("harmonizedCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HarmonizedCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegulatoryProhibition
    {
        /// <summary>
        /// Indicates the derived harmonized code value&lt;br&gt;Example: 01
        /// </summary>
        [Newtonsoft.Json.JsonProperty("derivedHarmonizedCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DerivedHarmonizedCode { get; set; }

        [Newtonsoft.Json.JsonProperty("advisory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Message? Advisory { get; set; }

        /// <summary>
        /// Indicates one based index identifying the associated commodity.&lt;br&gt;Example: 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commodityIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CommodityIndex { get; set; }

        /// <summary>
        /// Indicates the prohibition source type.&lt;br&gt;Example: source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Source { get; set; }

        /// <summary>
        /// Indicate the shipment rule type.&lt;br&gt;Example: ["categories"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Categories { get; set; }

        /// <summary>
        /// Indicates the prohibition type.&lt;br&gt;Example: type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("waiver", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegulatoryWaiver? Waiver { get; set; }

        /// <summary>
        /// Indicates the prohibitory status.&lt;br&gt;Example: status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the advisory details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Message
    {
        /// <summary>
        /// Specifies the message code for the tag created.&lt;br&gt;Example: code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies the text message for the tag created.&lt;br&gt;Example: Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Text { get; set; }

        /// <summary>
        /// Specifies the message parameters list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MessageParameter>? Parameters { get; set; }

        /// <summary>
        /// Specifies the message ID and value.&lt;br&gt;Example: localizedText
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localizedText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalizedText { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageParameter
    {
        /// <summary>
        /// Specifies the message parameter code.&lt;br&gt;Example: message ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; }

        /// <summary>
        /// Specifies the message parameter value of the code.&lt;br&gt;Example: value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates the regulatory waiver.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegulatoryWaiver
    {
        /// <summary>
        /// Indicates the advisories list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advisories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Message>? Advisories { get; set; }

        /// <summary>
        /// Indicates the regulatory prohibitions description.&lt;br&gt;Example: description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; }

        /// <summary>
        /// Indicates the prohibitory ID.&lt;br&gt;Example: id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: SHIPMENT.USER.UNAUTHORIZED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: Requested user is not authorized to perform the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// List of parameters which indicates the properties of the alert message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parameter
    {
        /// <summary>
        /// Identifies the error option to be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        /// <summary>
        /// Indicates the value associated with the key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Key { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO401
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError401>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError401
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: NOT.AUTHORIZED.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies list of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: Access token expired. Please modify your request and try again.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO403
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError403>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError403
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: FORBIDDEN.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies list of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: We could not authorize your credentials. Please check your permissions and try again
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO404
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError404>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError404
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: NOT.FOUND.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies list of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: The resource you requested is no longer available. Please modify your request and try again.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO500
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError500>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError500
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: INTERNAL.SERVER.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies list of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: We encountered an unexpected error and are working to resolve the issue. We apologize for any inconvenience. Please check back at a later time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO503
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError503>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError503
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: SERVICE.UNAVAILABLE.ERROR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        /// <summary>
        /// Specifies list of parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: The service is currently unavailable and we are working to resolve the issue. We apologize for any inconvenience. Please check back at a later time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request elements required to cancel a shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Full_Schema_Cancel_Shipment
    {
        /// <summary>
        /// The account number (account value) associated with the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipperAccountNumber AccountNumber { get; set; } = new ShipperAccountNumber();

        /// <summary>
        /// A boolean flag passed by Clients to indicate that whether a shipment is a EMAIL shipment(Pending Shipment) or not. Once a shipment is confirmed, it can no longer be cancelled by having this flag as True.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailShipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EmailShipment { get; set; }

        /// <summary>
        /// The two-letter sender Country code(Ex: US, CA, GB..etc).&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;Click here to see Country Codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("senderCountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SenderCountryCode { get; set; }

        /// <summary>
        /// Specifies which packages in a shipment to be canceled&lt;b&gt;DELETE_ALL_PACKAGES&lt;/b&gt; which will cancel all tracking numbers associated to the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deletionControl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Full_Schema_Cancel_ShipmentDeletionControl DeletionControl { get; set; }

        /// <summary>
        /// This is an unique number assigned by FedEx to the packages for tracking.&lt;br&gt;Example: "794953555571"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? TrackingNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is a wrapper class for outputVO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SHPCResponseVO_CancelShipment
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseProcessOutputVO_CancelShipment? Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response elements received when a shipment is cancelled.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProcessOutputVO_CancelShipment
    {
        /// <summary>
        /// Indicates whether the shipment has been cancelled or not. If the value is True, then it indicates that the shipment has been cancelled.&lt;br&gt;Example: true
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelledShipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CancelledShipment { get; set; }

        /// <summary>
        /// Indicates whether the shipment has been deleted from history or not. If the value is True, then it indicates that the shipment has been deleted.&lt;br&gt;Example: true
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelledHistory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CancelledHistory { get; set; }

        /// <summary>
        /// The success message generated during cancellation request for Shipment.&lt;br&gt;Example: Success
        /// </summary>
        [Newtonsoft.Json.JsonProperty("successMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SuccessMessage { get; set; }

        /// <summary>
        /// This is a cancellation request alert. This alert includes information such as alert code, alert type, and alert message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert>? Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO_2
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError_2>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates error alert when suspicious files, potential exploits and viruses found while scanning files , directories and user accounts. This includes code, message and parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CXSError_2
    {
        /// <summary>
        /// Indicates the error code.&lt;br&gt;Example: SHIPMENT.USER.UNAUTHORIZED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Code { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter>? ParameterList { get; set; }

        /// <summary>
        /// Indicates the description of API error alert message.&lt;br&gt;Example: Requested user is not authorized to perform the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO401_2
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError401>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO403_2
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError403>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO404_2
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError404>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO500_2
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError500>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseVO503_2
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CXSError503>? Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullSchemaGetConfirmedShipmentAsyncResults
    {
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyAccountNumber AccountNumber { get; set; } = new PartyAccountNumber();

        /// <summary>
        /// Indicates the job under which the deferred shipment artifacts must be identified in the subsequent retrieval request. &lt;br&gt; Example: 89sxxxxx233ae24ff31xxxxx
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? JobId { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Wrapper class for GetOpenshipmentResultsOutputVo. It holds transactionId and output.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SHPCResponseVO_GetOpenShipmentResults
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624xxxxx-b709-470c-8c39-4b55112xxxxx
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This is a unique identifier to your transaction and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Output? Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProcessOutputVO_GetOpenShipmentResults
    {
        /// <summary>
        /// These are shipping transaction details, such as master tracking number, service type, and ship date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionShipments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionShipmentOutputVO>? TransactionShipments { get; set; }

        /// <summary>
        /// object indicate the alert details received in the output.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert>? Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request elements required to create a shipment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullSchemaVerifyShipment
    {
        [Newtonsoft.Json.JsonProperty("requestedShipment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RequestedShipmentVerify RequestedShipment { get; set; } = new RequestedShipmentVerify();

        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipperAccountNumber? AccountNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// This is the detailed shipment request data to be validated before being submitted to FedEx.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestedShipmentVerify
    {
        /// <summary>
        /// Indicate the shipment date.&lt;br&gt;Format: YYYY-MM-DD&lt;br&gt;Note: Default value is current date in case the date is not provided in the request.&lt;br&gt;Example: 2021-04-06
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipDatestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShipDatestamp { get; set; }

        /// <summary>
        /// Select if the shipment is to be dropped off at Fedex location or to be picked up by FedEx or if it is a scheduled pickup for this shipment.&lt;br&gt;&lt;a onclick='loadDocReference("pickuptypes")'&gt;Click here for more information on Pickup Types.&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickupType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestedShipmentVerifyPickupType PickupType { get; set; }

        /// <summary>
        /// Indicate the FedEx service Type used for this shipment.&lt;br&gt;Example: STANDARD_OVERNIGHT&lt;br&gt;&lt;a onclick='loadDocReference("servicetypes")'&gt;click here to see available FedEx Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? ServiceType { get; set; }

        /// <summary>
        /// Indicate the type of packaging used for the package.&lt;br&gt;Note: For Express Freight shipments, the packaging will default to value  YOUR_PACKAGING irrespective type provided in the request.&lt;br&gt;Example: FEDEX_ENVELOPE&lt;br&gt;&lt;a onclick='loadDocReference("packagetypes")'&gt;click here to see Package Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packagingType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? PackagingType { get; set; }

        /// <summary>
        /// shipment total weight should be in Kg or in Lbs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalWeight { get; set; }

        /// <summary>
        /// Indicate shippers details. &lt;br&gt;Note: Shipper address and Origin address should be the same address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipper", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipperParty Shipper { get; set; } = new ShipperParty();

        /// <summary>
        /// Indicate the shipment recipient details or the physical location details for the package destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RecipientsParty> Recipients { get; set; } = new System.Collections.ObjectModel.Collection<RecipientsParty>();

        /// <summary>
        /// Indicate the shipment origin address information, if it is different from the shippers address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactAndAddress_Verify? Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("shippingChargesPayment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Payment ShippingChargesPayment { get; set; } = new Payment();

        [Newtonsoft.Json.JsonProperty("shipmentSpecialServices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestedShipmentVerify_shipmentSpecialServices? ShipmentSpecialServices { get; set; }

        [Newtonsoft.Json.JsonProperty("emailNotificationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EMailNotificationDetail? EmailNotificationDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("variableHandlingChargeDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VariableHandlingChargeDetail? VariableHandlingChargeDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("customsClearanceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomsClearanceDetail? CustomsClearanceDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("smartPostInfoDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SmartPostInfoDetail? SmartPostInfoDetail { get; set; }

        /// <summary>
        /// Indicate if the shipment be available to be visible/tracked using FedEx InSight® tool. If value indicated as true, only the shipper/payer will have visibility of this shipment in the said tool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blockInsightVisibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BlockInsightVisibility { get; set; }

        [Newtonsoft.Json.JsonProperty("labelSpecification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LabelSpecification LabelSpecification { get; set; } = new LabelSpecification();

        [Newtonsoft.Json.JsonProperty("shippingDocumentSpecification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingDocumentSpecification? ShippingDocumentSpecification { get; set; }

        /// <summary>
        /// Indicate the type of rates to be returned.&lt;br&gt;Following are values:&lt;ul&gt;&lt;li&gt;LIST - Returns published list rates will be returned in addition to account-specific rate (if applicable).&lt;/li&gt;&lt;li&gt;PREFERRED - It returns rates in currency as specified in the PreferredCurrency element.&lt;/li&gt;&lt;li&gt;ACCOUNT - Returns account specific rates. Note: The account specific rates are returned by default if the shipper account number is specified in the shipment.&lt;/li&gt;&lt;li&gt;INCENTIVE - This is one-time discount for incentivizing the customer.&lt;/li&gt;&lt;/ul&gt;Examples: ["ACCOUNT", "PREFERRED"]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateRequestType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<RateRequestType2>? RateRequestType { get; set; }

        /// <summary>
        /// Indicate the currency the caller requests to have used in all returned monetary values. Should be Used in conjunction with the element RateRequestType.&lt;br&gt;Example: USD&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;click here to see available Currency codes&lt;/a&gt;&lt;br&gt;Note: Incorrect currency codes should not be supplied. The system ignores the incorrect currency code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PreferredCurrency { get; set; }

        /// <summary>
        /// Use this object to provide the package details.&lt;br&gt;Note: &lt;ul&gt;&lt;li&gt;At least one instance containing the weight is required for EXPRESS and GROUND package.&lt;/li&gt;&lt;li&gt;Only Single piece requests are supported henceonly one line item should be provided.&lt;/li&gt;&lt;li&gt;Multiple piece shipment validation is not supported.&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedPackageLineItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RequestedPackageLineItem> RequestedPackageLineItems { get; set; } = new System.Collections.ObjectModel.Collection<RequestedPackageLineItem>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the contact and address details of a location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAndAddress_Verify
    {
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact_verify? Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address_1? Address { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the contact details of the shipper.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact_verify
    {
        /// <summary>
        /// Specify contact person name.&lt;br&gt;Recommended length is 70.&lt;br&gt;Note: There's no specific validation for the person name.&lt;br&gt; Example: John Taylor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonName { get; set; }

        /// <summary>
        /// Specify contact email address. Maximum length is 80. &lt;br&gt; Example: sample@company.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmailAddress { get; set; }

        /// <summary>
        /// Specify contact phone number. &lt;br&gt;Minimum length is 10 and supports maximum of 15 for certain countries using longer phone numbers. &lt;br&gt;Note: Recommended Maximum length is 15 and there's no specific validation will be done for the phone number. &lt;br&gt; Example: 918xxxxx890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneNumber { get; set; }

        /// <summary>
        /// Specify contact phone extension. &lt;br&gt;Note: Recommended length is 6. There's no specific validation for the phone extension. &lt;br&gt; Example: 1234
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneExtension { get; set; }

        /// <summary>
        /// Specify contact fax number.&lt;br&gt;Note: Recommended length is 15. There's no specific validation for the fax number.&lt;br&gt; Example: 1234567890
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FaxNumber { get; set; }

        /// <summary>
        /// Specify contact company name.&lt;br&gt;Recommended length is 35.&lt;br&gt;Note: There's no specific validation for the company name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CompanyName { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are email disposition details. Provides the type and email addresses of e-mail recipients. If returnedDispositionDetail in labelSpecification is set as true then email will be send with label and documents copy.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EMailNotificationDetail
    {
        /// <summary>
        /// Indicate the shipment notification aggregation type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EMailNotificationDetailAggregationType AggregationType { get; set; }

        /// <summary>
        /// These are email notification recipient details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailNotificationRecipients", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EmailNotificationRecipient>? EmailNotificationRecipients { get; set; }

        /// <summary>
        /// This is your personal message for the email.&lt;br&gt;Note: The maximum personal message character limit depends on the element emailNotificationDetail\emailNotificationRecipients\notificationFormatType values:&lt;ul&gt;&lt;li&gt;If notificationFormatType is TEXT, then only 120 characters printed on the email&lt;/li&gt;&lt;li&gt;If notificationFormatType is HTML, then 500 characters printed on the email&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;Example: This is concerning the order 123456 of 26 July 2021 - art no 34324-23 Teddy Bear, brown
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonalMessage { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// These are recipient details for receiving email notification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailNotificationRecipient
    {
        /// <summary>
        /// Specify the recipient name.&lt;br&gt;Example: Joe Smith
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; }

        /// <summary>
        /// Specify the recipient type for email notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailNotificationRecipientType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailNotificationRecipientType EmailNotificationRecipientType { get; set; }

        /// <summary>
        /// Specify the recipient email address.&lt;br&gt;Example: xyz@aol.com
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmailAddress { get; set; }

        /// <summary>
        /// This is the format for the email notification. Either HTML or plain text can be provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationFormatType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailNotificationRecipientNotificationFormatType NotificationFormatType { get; set; }

        /// <summary>
        /// Indicate the type of notification that will be sent as an email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailNotificationRecipientNotificationType NotificationType { get; set; }

        /// <summary>
        /// These are the locale details for email.&lt;br&gt;&lt;a onclick='loadDocReference("locales")'&gt;click here to see Locales&lt;/a&gt;&lt;br&gt;Note: If the locale is left blank or an invalid locale is entered, an error message is returned in response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Locale { get; set; }

        /// <summary>
        /// Specify notification event types.&lt;br&gt;&lt;a onclick='loadDocReference("notificationeventtypes")'&gt;Click here for more information on Notification Event Types.&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationEventType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<NotificationEventType2>? NotificationEventType { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Wrapper class for VerifyShipmentOutputVO. It holds transactionId and output.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SHPCResponseVO_Validate
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseProcessOutputVO_Validate? Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response elements received when a shipment is created.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProcessOutputVO_Validate
    {
        /// <summary>
        /// The alerts received when a Shipment Package Validate is processed. This includes the alert code, alert type, and alert message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert>? Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicate the shipment special service or handling required for this shipment. &lt;br&gt;Note: &lt;ul&gt;&lt;li&gt;If the shipper is requesting a special service, the special service type must be indicated in the object specialServiceTypes, and all supporting detail must be provided in the appropriate sub-object below.&lt;/li&gt;&lt;li&gt;For returns it is required to provide value RETURN_SHIPMENT in the specialServiceTypes.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestedShipmentVerify_shipmentSpecialServices
    {
        /// <summary>
        /// Indicate the Special services requested for this shipment.&lt;br&gt;Example: &lt;ul&gt;&lt;li&gt;HOLD_AT_LOCATION&lt;/li&gt;&lt;li&gt;RETURN_SHIPMENT&lt;/li&gt;&lt;li&gt;BROKER_SELECT_OPTION&lt;/li&gt;&lt;li&gt;CALL_BEFORE_DELIVERY&lt;/li&gt;&lt;li&gt;COD&lt;/li&gt;&lt;li&gt;CUSTOM_DELIVERY_WINDOW&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;a onclick='loadDocReference("shipmentlevelspecialservicetypes")'&gt;click here to see Shipment Special Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialServiceTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? SpecialServiceTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("etdDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ETDDetail? EtdDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("returnShipmentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReturnShipmentDetail? ReturnShipmentDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("deliveryOnInvoiceAcceptanceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeliveryOnInvoiceAcceptanceDetail? DeliveryOnInvoiceAcceptanceDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("internationalTrafficInArmsRegulationsDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InternationalTrafficInArmsRegulationsDetail? InternationalTrafficInArmsRegulationsDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("pendingShipmentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PendingShipmentDetail? PendingShipmentDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("holdAtLocationDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HoldAtLocationDetail? HoldAtLocationDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentCODDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentCODDetail? ShipmentCODDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("shipmentDryIceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShipmentDryIceDetail_1? ShipmentDryIceDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("internationalControlledExportDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InternationalControlledExportDetail? InternationalControlledExportDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("homeDeliveryPremiumDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomeDeliveryPremiumDetail? HomeDeliveryPremiumDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Full_Schema_Create_Tag
    {
        /// <summary>
        /// The shipment data describing the shipment being tendered to FedEx.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedShipment", Required = Newtonsoft.Json.Required.Always)]
        public CreateTagRequestedShipment? RequestedShipment { get; set; }

        /// <summary>
        /// The specific FedEx customer account number (account value) associated with the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PartyAccountNumber AccountNumber { get; set; } = new PartyAccountNumber();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateTagRequestedShipment : RequestedShipment
    {
        /// <summary>
        /// Specifies the pickup details for the Tag shipment.&lt;br&gt;ReadyDateTime and LatestPickupDateTime are required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickupDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PickupDetail? PickupDetail { get; set; }

    }

    /// <summary>
    /// Wrapper class for ShipShipmentOutputVO. It holds transactionId and output.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SHPCResponseVO_CreateTag
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseProcessOutputVO_CreateTag? Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the output details when a tag is created.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProcessOutputVO_CreateTag
    {
        /// <summary>
        /// Specifies the Master Tracking Number for the requested shipment.&lt;br&gt;Example: 997338100007320
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterTrackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MasterTrackingNumber { get; set; }

        /// <summary>
        /// Specifies the service type for this shipment.&lt;br&gt;Example: GROUND_HOME_DELIVERY&lt;br&gt;&lt;a onclick='loadDocReference("servicetypes")'&gt;Click here to see Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ServiceType { get; set; }

        /// <summary>
        /// Specifies the shipment date and time. The default timestamp is the current date-time. Format is MMM-dd-yyyy.&lt;br&gt;Example: 2019-10-04
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ShipTimestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("completedTagDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletedTagDetail? CompletedTagDetail { get; set; }

        /// <summary>
        /// Specifies the alerts received when a tag is created. This includes the alert code, alert type, and alert message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alert>? Alerts { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletedTagDetail
    {
        /// <summary>
        /// Confirmation Number.&lt;br&gt;Example: 275
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confirmationNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? ConfirmationNumber { get; set; }

        /// <summary>
        /// Applicable for FedEx Express services.&lt;br&gt;Example: NQAA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? Location { get; set; }

        /// <summary>
        /// The dispatch date for the FedEx Tag to be cancelled.&lt;br&gt;Example: 2019-08-03
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dispatchDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? DispatchDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The input details required to cancel a tag.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullSchemaCancelTag
    {
        /// <summary>
        /// The specific FedEx customer account number (account value and account key) associated with the shipment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipmentAccountNumber AccountNumber { get; set; } = new ShipmentAccountNumber();

        /// <summary>
        /// This is the FedEx service type associated with the shipment.&lt;br&gt;Example: PRIORITY_OVERNIGHT&lt;br&gt;&lt;a onclick='loadDocReference("servicetypes")'&gt;Click here to see Service Types&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? ServiceType { get; set; }

        /// <summary>
        /// The tracking number for the Express or Ground Tag to the cancelled.&lt;br&gt;Example: 301025281523&lt;br&gt;&lt;a onclick='loadDocReference("mocktrackingnumbersforfedexexpressandfedexground")'&gt;Click here to see mock tracking numbers for FedEx Express and FedEx Ground.&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrackingNumber { get; set; }

        /// <summary>
        /// The details of the package for which shipping has been completed. The details include dispatch confirmation number, dispatch date, location, and the cxs alerts associated with the process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completedTagDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CompletedTagDetail CompletedTagDetail { get; set; } = new CompletedTagDetail();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The account number of the recipient.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipmentAccountNumber
    {
        /// <summary>
        /// Conditional.&lt;br&gt; The account number value. Max Length is 9.&lt;br&gt;Example: 123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Wrapper class for CancelTagOuputVO. It holds transactionId and output.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SHPCResponseVO
    {
        /// <summary>
        /// The transaction ID is a special set of numbers that defines each transaction.&lt;br&gt;Example: 624deea6-b709-470c-8c39-4b5511281492
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TransactionId { get; set; }

        /// <summary>
        /// This element allows you to assign a unique identifier to your transaction. This element is also returned in the reply and helps you match the request to the reply. &lt;br&gt; Example: AnyCo_order123456789
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomerTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseProcessOutputVO? Output { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The output details when a tag is cancelled.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseProcessOutputVO
    {
        /// <summary>
        /// Indicates whether the tag has been cancelled or not. If true, then the tag has been successfully cancelled.&lt;br&gt;Example: true
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelledTag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CancelledTag { get; set; }

        /// <summary>
        /// Message received when a tag is successfully cancelled.&lt;br&gt;Example: success
        /// </summary>
        [Newtonsoft.Json.JsonProperty("successMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SuccessMessage { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Full_Schema_ShipMergeLabelDocOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LABELS_AND_DOCS")]
        LABELS_AND_DOCS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LABELS_ONLY")]
        LABELS_ONLY = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequestedShipmentPickupType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_FEDEX_TO_SCHEDULE")]
        CONTACT_FEDEX_TO_SCHEDULE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DROPOFF_AT_FEDEX_LOCATION")]
        DROPOFF_AT_FEDEX_LOCATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"USE_SCHEDULED_PICKUP")]
        USE_SCHEDULED_PICKUP = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RateRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LIST")]
        LIST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED")]
        PREFERRED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INCENTIVE")]
        INCENTIVE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RETAIL")]
        RETAIL = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaxpayerIdentificationTinType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL_NATIONAL")]
        PERSONAL_NATIONAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL_STATE")]
        PERSONAL_STATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDERAL")]
        FEDERAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_NATIONAL")]
        BUSINESS_NATIONAL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_STATE")]
        BUSINESS_STATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_UNION")]
        BUSINESS_UNION = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SENDER")]
        SENDER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_PARTY")]
        THIRD_PARTY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COLLECT")]
        COLLECT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Attributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"POST_SHIPMENT_UPLOAD_REQUESTED")]
        POST_SHIPMENT_UPLOAD_REQUESTED = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequestedDocumentTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CERTIFICATE_OF_ORIGIN")]
        CERTIFICATE_OF_ORIGIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL_INVOICE")]
        COMMERCIAL_INVOICE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM_PACKAGE_DOCUMENT")]
        CUSTOM_PACKAGE_DOCUMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM_SHIPMENT_DOCUMENT")]
        CUSTOM_SHIPMENT_DOCUMENT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_SPECIFIED_LABELS")]
        CUSTOMER_SPECIFIED_LABELS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPORT_DECLARATION")]
        EXPORT_DECLARATION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_AGENCY_AGREEMENT")]
        GENERAL_AGENCY_AGREEMENT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LABEL")]
        LABEL = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_CERTIFICATION_OF_ORIGIN")]
        USMCA_CERTIFICATION_OF_ORIGIN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OP_900")]
        OP_900 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_SHIPMENT_EMAIL_NOTIFICATION")]
        PENDING_SHIPMENT_EMAIL_NOTIFICATION = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PRO_FORMA_INVOICE")]
        PRO_FORMA_INVOICE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURN_INSTRUCTIONS")]
        RETURN_INSTRUCTIONS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_COMMERCIAL_INVOICE_CERTIFICATION_OF_ORIGIN")]
        USMCA_COMMERCIAL_INVOICE_CERTIFICATION_OF_ORIGIN = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UploadDocumentReferenceDetailDocumentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CERTIFICATE_OF_ORIGIN")]
        CERTIFICATE_OF_ORIGIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL_INVOICE")]
        COMMERCIAL_INVOICE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ETD_LABEL")]
        ETD_LABEL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_CERTIFICATION_OF_ORIGIN")]
        USMCA_CERTIFICATION_OF_ORIGIN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PRO_FORMA_INVOICE")]
        PRO_FORMA_INVOICE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_COMMERCIAL_INVOICE_CERTIFICATION_OF_ORIGIN")]
        USMCA_COMMERCIAL_INVOICE_CERTIFICATION_OF_ORIGIN = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReturnShipmentDetailReturnType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PRINT_RETURN_LABEL")]
        PRINT_RETURN_LABEL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AllowedSpecialService
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SATURDAY_DELIVERY")]
        SATURDAY_DELIVERY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SATURDAY_PICKUP")]
        SATURDAY_PICKUP = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Recipient : RecipientsParty
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        public Address2? Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Always)]
        public Contact2? Contact { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PendingShipmentDetailPendingShipmentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
        EMAIL = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Options
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALLOW_MODIFICATIONS")]
        ALLOW_MODIFICATIONS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Types
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ANTIQUE_STATEMENT_EUROPEAN_UNION")]
        ANTIQUE_STATEMENT_EUROPEAN_UNION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ANTIQUE_STATEMENT_UNITED_STATES")]
        ANTIQUE_STATEMENT_UNITED_STATES = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ASSEMBLER_DECLARATION")]
        ASSEMBLER_DECLARATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BEARING_WORKSHEET")]
        BEARING_WORKSHEET = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CERTIFICATE_OF_SHIPMENTS_TO_SYRIA")]
        CERTIFICATE_OF_SHIPMENTS_TO_SYRIA = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET")]
        COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA")]
        CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS")]
        DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLARATION_OF_BIOLOGICAL_STANDARDS")]
        DECLARATION_OF_BIOLOGICAL_STANDARDS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD")]
        DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET")]
        ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FILM_AND_VIDEO_CERTIFICATE")]
        FILM_AND_VIDEO_CERTIFICATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERIM_FOOTWEAR_INVOICE")]
        INTERIM_FOOTWEAR_INVOICE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_CERTIFICATION_OF_ORIGIN_CANADA_ENGLISH")]
        USMCA_CERTIFICATION_OF_ORIGIN_CANADA_ENGLISH = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_CERTIFICATION_OF_ORIGIN_CANADA_FRENCH")]
        USMCA_CERTIFICATION_OF_ORIGIN_CANADA_FRENCH = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_CERTIFICATION_OF_ORIGIN_SPANISH")]
        USMCA_CERTIFICATION_OF_ORIGIN_SPANISH = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_CERTIFICATION_OF_ORIGIN_UNITED_STATES")]
        USMCA_CERTIFICATION_OF_ORIGIN_UNITED_STATES = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PACKING_LIST")]
        PACKING_LIST = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PRINTED_CIRCUIT_BOARD_WORKSHEET")]
        PRINTED_CIRCUIT_BOARD_WORKSHEET = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"REPAIRED_WATCH_BREAKOUT_WORKSHEET")]
        REPAIRED_WATCH_BREAKOUT_WORKSHEET = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES")]
        STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"TOXIC_SUBSTANCES_CONTROL_ACT")]
        TOXIC_SUBSTANCES_CONTROL_ACT = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES")]
        UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES")]
        UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"UNITED_STATES_NEW_WATCH_WORKSHEET")]
        UNITED_STATES_NEW_WATCH_WORKSHEET = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"UNITED_STATES_WATCH_REPAIR_DECLARATION")]
        UNITED_STATES_WATCH_REPAIR_DECLARATION = 25,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmailRecipientRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPMENT_COMPLETOR")]
        SHIPMENT_COMPLETOR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPMENT_INITIATOR")]
        SHIPMENT_INITIATOR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Options2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCE_PAPERLESS_SHIPPING_FORMAT")]
        PRODUCE_PAPERLESS_SHIPPING_FORMAT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPRESS_ADDITIONAL_LANGUAGES")]
        SUPPRESS_ADDITIONAL_LANGUAGES = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPRESS_ACCESS_EMAILS")]
        SUPPRESS_ACCESS_EMAILS = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UploadDocumentReferenceDetail_1DocumentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CERTIFICATE_OF_ORIGIN")]
        CERTIFICATE_OF_ORIGIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL_INVOICE")]
        COMMERCIAL_INVOICE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ETD_LABEL")]
        ETD_LABEL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_CERTIFICATION_OF_ORIGIN")]
        USMCA_CERTIFICATION_OF_ORIGIN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_RATE_SHEET")]
        NET_RATE_SHEET = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PRO_FORMA_INVOICE")]
        PRO_FORMA_INVOICE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_COMMERCIAL_INVOICE_CERTIFICATION_OF_ORIGIN")]
        USMCA_COMMERCIAL_INVOICE_CERTIFICATION_OF_ORIGIN = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HoldAtLocationDetailLocationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_AUTHORIZED_SHIP_CENTER")]
        FEDEX_AUTHORIZED_SHIP_CENTER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_OFFICE")]
        FEDEX_OFFICE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_SELF_SERVICE_LOCATION")]
        FEDEX_SELF_SERVICE_LOCATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_STAFFED")]
        FEDEX_STAFFED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RETAIL_ALLICANCE_LOCATION")]
        RETAIL_ALLICANCE_LOCATION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_GROUND_TERMINAL")]
        FEDEX_GROUND_TERMINAL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_ONSITE")]
        FEDEX_ONSITE = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipmentCODDetailCodCollectionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ANY")]
        ANY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH")]
        CASH = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GUARANTEED_FUNDS")]
        GUARANTEED_FUNDS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY_CHECK")]
        COMPANY_CHECK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL_CHECK")]
        PERSONAL_CHECK = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipmentCODDetailReturnReferenceIndicatorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INVOICE")]
        INVOICE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PO")]
        PO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REFERENCE")]
        REFERENCE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TRACKING")]
        TRACKING = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CODTransportationChargesDetailRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENT")]
        CURRENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CODTransportationChargesDetailRateLevelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLED_RATE")]
        BUNDLED_RATE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INDIVIDUAL_PACKAGE_RATE")]
        INDIVIDUAL_PACKAGE_RATE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CODTransportationChargesDetailChargeLevelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENT_PACKAGE")]
        CURRENT_PACKAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUM_OF_PACKAGES")]
        SUM_OF_PACKAGES = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CODTransportationChargesDetailChargeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COD_SURCHARGE")]
        COD_SURCHARGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_CHARGE")]
        NET_CHARGE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_FREIGHT")]
        NET_FREIGHT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_CUSTOMER_CHARGE")]
        TOTAL_CUSTOMER_CHARGE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Weight_1Units
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InternationalControlledExportDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEA_036")]
        DEA_036 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DEA_236")]
        DEA_236 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DSP_05")]
        DSP_05 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DSP_61")]
        DSP_61 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DSP_73")]
        DSP_73 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DSP_85")]
        DSP_85 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DSP_LICENSE_AGREEMENT")]
        DSP_LICENSE_AGREEMENT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"WAREHOUSE_WITHDRAWAL")]
        WAREHOUSE_WITHDRAWAL = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HomeDeliveryPremiumDetailHomedeliveryPremiumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"APPOINTMENT")]
        APPOINTMENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DATE_CERTAIN")]
        DATE_CERTAIN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EVENING")]
        EVENING = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipShipmentEMailNotificationDetailAggregationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PER_PACKAGE")]
        PER_PACKAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PER_SHIPMENT")]
        PER_SHIPMENT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipShipmentEmailNotificationRecipientEmailNotificationRecipientType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BROKER")]
        BROKER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER")]
        SHIPPER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_PARTY")]
        THIRD_PARTY = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipShipmentEmailNotificationRecipientNotificationFormatType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HTML")]
        HTML = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipShipmentEmailNotificationRecipientNotificationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
        EMAIL = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NotificationEventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ON_DELIVERY")]
        ON_DELIVERY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_EXCEPTION")]
        ON_EXCEPTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_SHIPMENT")]
        ON_SHIPMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_TENDER")]
        ON_TENDER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_ESTIMATED_DELIVERY")]
        ON_ESTIMATED_DELIVERY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_PICKUP_DRIVER_ARRIVED")]
        ON_PICKUP_DRIVER_ARRIVED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_PICKUP_DRIVER_ASSIGNED")]
        ON_PICKUP_DRIVER_ASSIGNED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_PICKUP_DRIVER_DEPARTED")]
        ON_PICKUP_DRIVER_DEPARTED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_PICKUP_DRIVER_EN_ROUTE")]
        ON_PICKUP_DRIVER_EN_ROUTE = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VariableHandlingChargeDetailRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL")]
        ACTUAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CURRENT")]
        CURRENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LIST")]
        LIST = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INCENTIVE")]
        INCENTIVE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED")]
        PREFERRED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED_INCENTIVE")]
        PREFERRED_INCENTIVE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED_CURRENCY")]
        PREFERRED_CURRENCY = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VariableHandlingChargeDetailRateLevelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLED_RATE")]
        BUNDLED_RATE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INDIVIDUAL_PACKAGE_RATE")]
        INDIVIDUAL_PACKAGE_RATE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FixedValue : Money
    {
        /// <summary>
        /// fixed variable handling charge amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }

        /// <summary>
        /// fixed variable handling charge currency type&lt;br&gt;&lt;a onclick='loadDocReference("currencycodes")'&gt;click here to see Currency codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VariableHandlingChargeDetailRateElementBasis
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NET_CHARGE")]
        NET_CHARGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_FREIGHT")]
        NET_FREIGHT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BASE_CHARGE")]
        BASE_CHARGE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NET_CHARGE_EXCLUDING_TAXES")]
        NET_CHARGE_EXCLUDING_TAXES = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegulatoryControls
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FOOD_OR_PERISHABLE")]
        FOOD_OR_PERISHABLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA")]
        USMCA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_APPLICABLE_FOR_LOW_VALUE_CUSTOMS_EXCEPTIONS")]
        NOT_APPLICABLE_FOR_LOW_VALUE_CUSTOMS_EXCEPTIONS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IN_FREE_CIRCULATION")]
        NOT_IN_FREE_CIRCULATION = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomsClearanceDetailFreightOnValue
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CARRIER_RISK")]
        CARRIER_RISK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OWN_RISK")]
        OWN_RISK = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Broker : Party_1
    {
        /// <summary>
        /// Specifies broker address details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object? Address { get; set; }

        /// <summary>
        /// Specifies broker contact details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object? Contact { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BrokerDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommercialInvoiceTaxesOrMiscellaneousChargeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSIONS")]
        COMMISSIONS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DISCOUNTS")]
        DISCOUNTS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HANDLING_FEES")]
        HANDLING_FEES = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ROYALTIES_AND_LICENSE_FEES")]
        ROYALTIES_AND_LICENSE_FEES = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TAXES")]
        TAXES = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommercialInvoiceShipmentPurpose
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT")]
        GIFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_SOLD")]
        NOT_SOLD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL_EFFECTS")]
        PERSONAL_EFFECTS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REPAIR_AND_RETURN")]
        REPAIR_AND_RETURN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SAMPLE")]
        SAMPLE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SOLD")]
        SOLD = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerReferenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_REFERENCE")]
        CUSTOMER_REFERENCE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPARTMENT_NUMBER")]
        DEPARTMENT_NUMBER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INVOICE_NUMBER")]
        INVOICE_NUMBER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"P_O_NUMBER")]
        P_O_NUMBER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INTRACOUNTRY_REGULATORY_REFERENCE")]
        INTRACOUNTRY_REGULATORY_REFERENCE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RMA_ASSOCIATION")]
        RMA_ASSOCIATION = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Payment_1PaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SENDER")]
        SENDER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_PARTY")]
        THIRD_PARTY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COLLECT")]
        COLLECT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommodityPurpose
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CONSUMER")]
        CONSUMER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WeightUnits
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 0,
        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 1

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Weight_4Units
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 0,
        [System.Runtime.Serialization.EnumMember(Value = @"LB")]
        LB = 1

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Weight_3Units
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KG")]
        KG = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaDetailOriginCriterion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"A")]
        A = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RecipientCustomsIdType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY")]
        COMPANY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INDIVIDUAL")]
        INDIVIDUAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT")]
        PASSPORT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomsOptionDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COURTESY_RETURN_LABEL")]
        COURTESY_RETURN_LABEL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EXHIBITION_TRADE_SHOW")]
        EXHIBITION_TRADE_SHOW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FAULTY_ITEM")]
        FAULTY_ITEM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FOLLOWING_REPAIR")]
        FOLLOWING_REPAIR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FOR_REPAIR")]
        FOR_REPAIR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ITEM_FOR_LOAN")]
        ITEM_FOR_LOAN = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"REPLACEMENT")]
        REPLACEMENT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TRIAL")]
        TRIAL = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExportDetailB13AFilingOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_REQUIRED")]
        NOT_REQUIRED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MANUALLY_ATTACHED")]
        MANUALLY_ATTACHED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FILED_ELECTRONICALLY")]
        FILED_ELECTRONICALLY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUMMARY_REPORTING")]
        SUMMARY_REPORTING = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDEX_TO_STAMP")]
        FEDEX_TO_STAMP = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DestinationControlDetailStatementTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEPARTMENT_OF_COMMERCE")]
        DEPARTMENT_OF_COMMERCE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPARTMENT_OF_STATE")]
        DEPARTMENT_OF_STATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPARTMENT_OF_COMMERCE_AND_DEPARTMENT_OF_STATE")]
        DEPARTMENT_OF_COMMERCE_AND_DEPARTMENT_OF_STATE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaLowValueStatementDetailCustomsRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXPORTER")]
        EXPORTER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMPORTER")]
        IMPORTER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SmartPostInfoDetailAncillaryEndorsement
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADDRESS_CORRECTION")]
        ADDRESS_CORRECTION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CARRIER_LEAVE_IF_NO_RESPONSE")]
        CARRIER_LEAVE_IF_NO_RESPONSE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHANGE_SERVICE")]
        CHANGE_SERVICE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FORWARDING_SERVICE")]
        FORWARDING_SERVICE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURN_SERVICE")]
        RETURN_SERVICE = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SmartPostInfoDetailIndicia
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIA_MAIL")]
        MEDIA_MAIL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PARCEL_RETURN")]
        PARCEL_RETURN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PARCEL_SELECT")]
        PARCEL_SELECT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PRESORTED_BOUND_PRINTED_MATTER")]
        PRESORTED_BOUND_PRINTED_MATTER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PRESORTED_STANDARD")]
        PRESORTED_STANDARD = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SmartPostInfoDetailSpecialServices
    {

        [System.Runtime.Serialization.EnumMember(Value = @"USPS_DELIVERY_CONFIRMATION")]
        USPS_DELIVERY_CONFIRMATION = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelSpecificationLabelFormatType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COMMON2D")]
        COMMON2D = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LABEL_DATA_ONLY")]
        LABEL_DATA_ONLY = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelSpecificationLabelOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPING_LABEL_FIRST")]
        SHIPPING_LABEL_FIRST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPING_LABEL_LAST")]
        SHIPPING_LABEL_LAST = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelSpecificationLabelStockType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_4X6")]
        PAPER_4X6 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_4X675")]
        PAPER_4X675 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_4X8")]
        PAPER_4X8 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_4X9")]
        PAPER_4X9 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_7X475")]
        PAPER_7X475 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_85X11_BOTTOM_HALF_LABEL")]
        PAPER_85X11_BOTTOM_HALF_LABEL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_85X11_TOP_HALF_LABEL")]
        PAPER_85X11_TOP_HALF_LABEL = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_LETTER")]
        PAPER_LETTER = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X675_LEADING_DOC_TAB")]
        STOCK_4X675_LEADING_DOC_TAB = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X8")]
        STOCK_4X8 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X9_LEADING_DOC_TAB")]
        STOCK_4X9_LEADING_DOC_TAB = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X6")]
        STOCK_4X6 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X675_TRAILING_DOC_TAB")]
        STOCK_4X675_TRAILING_DOC_TAB = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X9_TRAILING_DOC_TAB")]
        STOCK_4X9_TRAILING_DOC_TAB = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X9")]
        STOCK_4X9 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X85_TRAILING_DOC_TAB")]
        STOCK_4X85_TRAILING_DOC_TAB = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"STOCK_4X105_TRAILING_DOC_TAB")]
        STOCK_4X105_TRAILING_DOC_TAB = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelSpecificationLabelRotation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT")]
        LEFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RIGHT")]
        RIGHT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UPSIDE_DOWN")]
        UPSIDE_DOWN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelSpecificationImageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ZPLII")]
        ZPLII = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EPL2")]
        EPL2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PNG")]
        PNG = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelSpecificationLabelPrintingOrientation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BOTTOM_EDGE_OF_TEXT_FIRST")]
        BOTTOM_EDGE_OF_TEXT_FIRST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TOP_EDGE_OF_TEXT_FIRST")]
        TOP_EDGE_OF_TEXT_FIRST = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MaskedData
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMS_VALUE")]
        CUSTOMS_VALUE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DIMENSIONS")]
        DIMENSIONS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DUTIES_AND_TAXES_PAYOR_ACCOUNT_NUMBER")]
        DUTIES_AND_TAXES_PAYOR_ACCOUNT_NUMBER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INSURED_VALUE")]
        INSURED_VALUE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SECONDARY_BARCODE")]
        SECONDARY_BARCODE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER_INFORMATION")]
        SHIPPER_INFORMATION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TERMS_AND_CONDITIONS")]
        TERMS_AND_CONDITIONS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_WEIGHT")]
        TOTAL_WEIGHT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSPORTATION_CHARGES_PAYOR_ACCOUNT_NUMBER")]
        TRANSPORTATION_CHARGES_PAYOR_ACCOUNT_NUMBER = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegulatoryLabelContentDetailGenerationOptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_ON_SHIPPING_LABEL_PREFERRED")]
        CONTENT_ON_SHIPPING_LABEL_PREFERRED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_ON_SUPPLEMENTAL_LABEL_ONLY")]
        CONTENT_ON_SUPPLEMENTAL_LABEL_ONLY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTENT_ON_SHIPPING_LABEL_ONLY")]
        CONTENT_ON_SHIPPING_LABEL_ONLY = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegulatoryLabelContentDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALCOHOL_SHIPMENT_LABEL")]
        ALCOHOL_SHIPMENT_LABEL = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdditionalLabelsDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BROKER")]
        BROKER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CONSIGNEE")]
        CONSIGNEE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMS")]
        CUSTOMS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DESTINATION")]
        DESTINATION = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DESTINATION_CONTROL_STATEMENT")]
        DESTINATION_CONTROL_STATEMENT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FREIGHT_REFERENCE")]
        FREIGHT_REFERENCE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MANIFEST")]
        MANIFEST = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ORIGIN")]
        ORIGIN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SECOND_ADDRESS")]
        SECOND_ADDRESS = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER")]
        SHIPPER = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocTabContentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BARCODED")]
        BARCODED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MINIMUM")]
        MINIMUM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ZONE001")]
        ZONE001 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocTabZoneSpecificationJustification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LEFT")]
        LEFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RIGHT")]
        RIGHT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocTabContentBarcodedSymbology
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CODABAR")]
        CODABAR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CODE128")]
        CODE128 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CODE128_WIDEBAR")]
        CODE128_WIDEBAR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CODE128B")]
        CODE128B = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CODE128C")]
        CODE128C = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CODE39")]
        CODE39 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CODE93")]
        CODE93 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"I2OF5")]
        I2OF5 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
        MANUAL = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PDF417")]
        PDF417 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"POSTNET")]
        POSTNET = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"QR_CODE")]
        QR_CODE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"UCC128")]
        UCC128 = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShippingDocumentTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CERTIFICATE_OF_ORIGIN")]
        CERTIFICATE_OF_ORIGIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL_INVOICE")]
        COMMERCIAL_INVOICE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM_PACKAGE_DOCUMENT")]
        CUSTOM_PACKAGE_DOCUMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM_SHIPMENT_DOCUMENT")]
        CUSTOM_SHIPMENT_DOCUMENT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_SPECIFIED_LABELS")]
        CUSTOMER_SPECIFIED_LABELS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPORT_DECLARATION")]
        EXPORT_DECLARATION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_AGENCY_AGREEMENT")]
        GENERAL_AGENCY_AGREEMENT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LABEL")]
        LABEL = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_CERTIFICATION_OF_ORIGIN")]
        USMCA_CERTIFICATION_OF_ORIGIN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OP_900")]
        OP_900 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_SHIPMENT_EMAIL_NOTIFICATION")]
        PENDING_SHIPMENT_EMAIL_NOTIFICATION = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PRO_FORMA_INVOICE")]
        PRO_FORMA_INVOICE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURN_INSTRUCTIONS")]
        RETURN_INSTRUCTIONS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_COMMERCIAL_INVOICE_CERTIFICATION_OF_ORIGIN")]
        USMCA_COMMERCIAL_INVOICE_CERTIFICATION_OF_ORIGIN = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShippingDocumentFormatStockType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_LETTER")]
        PAPER_LETTER = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShippingDocumentFormatDocType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Options3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPING_LABEL_FIRST")]
        SHIPPING_LABEL_FIRST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPING_LABEL_LAST")]
        SHIPPING_LABEL_LAST = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPRESS_ADDITIONAL_LANGUAGES")]
        SUPPRESS_ADDITIONAL_LANGUAGES = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShippingDocumentDispositionDetailDispositionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
        CONFIRMED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFERRED_QUEUED")]
        DEFERRED_QUEUED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFERRED_RETURNED")]
        DEFERRED_RETURNED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFERRED_STORED")]
        DEFERRED_STORED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAILED")]
        EMAILED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"QUEUED")]
        QUEUED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNED")]
        RETURNED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED")]
        STORED = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShippingDocumentEmailDetailGrouping
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BY_RECIPIENT")]
        BY_RECIPIENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShippingDocumentEmailRecipientRecipientType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BROKER")]
        BROKER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER")]
        SHIPPER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_PARTY")]
        THIRD_PARTY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER1")]
        OTHER1 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER2")]
        OTHER2 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReturnShippingDocumentFormatStockType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PAPER_LETTER")]
        PAPER_LETTER = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReturnShippingDocumentFormatDocType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PNG")]
        PNG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDF")]
        PDF = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerImageUsageId
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE_1")]
        IMAGE_1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE_2")]
        IMAGE_2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE_3")]
        IMAGE_3 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE_4")]
        IMAGE_4 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"IMAGE_5")]
        IMAGE_5 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerImageUsageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SIGNATURE")]
        SIGNATURE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LETTER_HEAD")]
        LETTER_HEAD = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerImageUsageProvidedImageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LETTER_HEAD")]
        LETTER_HEAD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SIGNATURE")]
        SIGNATURE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaCertificationOfOriginDetailCertifierSpecification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXPORTER")]
        EXPORTER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMPORTER")]
        IMPORTER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCER")]
        PRODUCER = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaCertificationOfOriginDetailImporterSpecification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VARIOUS")]
        VARIOUS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaCertificationOfOriginDetailProducerSpecification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_UPON_REQUEST")]
        AVAILABLE_UPON_REQUEST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VARIOUS")]
        VARIOUS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SAME_AS_EXPORTER")]
        SAME_AS_EXPORTER = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaCommercialInvoiceCertificationOfOriginDetailCertifierSpecification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXPORTER")]
        EXPORTER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMPORTER")]
        IMPORTER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCER")]
        PRODUCER = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaCommercialInvoiceCertificationOfOriginDetailImporterSpecification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VARIOUS")]
        VARIOUS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsmcaCommercialInvoiceCertificationOfOriginDetailProducerSpecification
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_UPON_REQUEST")]
        AVAILABLE_UPON_REQUEST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VARIOUS")]
        VARIOUS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SAME_AS_EXPORTER")]
        SAME_AS_EXPORTER = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerReference_1CustomerReferenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_REFERENCE")]
        CUSTOMER_REFERENCE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPARTMENT_NUMBER")]
        DEPARTMENT_NUMBER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INVOICE_NUMBER")]
        INVOICE_NUMBER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"P_O_NUMBER")]
        P_O_NUMBER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INTRACOUNTRY_REGULATORY_REFERENCE")]
        INTRACOUNTRY_REGULATORY_REFERENCE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RMA_ASSOCIATION")]
        RMA_ASSOCIATION = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DimensionsUnits
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN")]
        IN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PackageSpecialServicesRequestedSignatureOptionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_DEFAULT")]
        SERVICE_DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NO_SIGNATURE_REQUIRED")]
        NO_SIGNATURE_REQUIRED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INDIRECT")]
        INDIRECT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECT")]
        DIRECT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ADULT")]
        ADULT = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlcoholDetailAlcoholRecipientType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LICENSEE")]
        LICENSEE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CONSUMER")]
        CONSUMER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DangerousGoodsDetailAccessibility
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESSIBLE")]
        ACCESSIBLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INACCESSIBLE")]
        INACCESSIBLE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Options4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HAZARDOUS_MATERIALS")]
        HAZARDOUS_MATERIALS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BATTERY")]
        BATTERY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ORM_D")]
        ORM_D = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REPORTABLE_QUANTITIES")]
        REPORTABLE_QUANTITIES = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SMALL_QUANTITY_EXCEPTION")]
        SMALL_QUANTITY_EXCEPTION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LIMITED_QUANTITIES_COMMODITIES")]
        LIMITED_QUANTITIES_COMMODITIES = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BatteryDetailBatteryPackingType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINED_IN_EQUIPMENT")]
        CONTAINED_IN_EQUIPMENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PACKED_WITH_EQUIPMENT")]
        PACKED_WITH_EQUIPMENT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BatteryDetailBatteryRegulatoryType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IATA_SECTION_II")]
        IATA_SECTION_II = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BatteryDetailBatteryMaterialType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LITHIUM_METAL")]
        LITHIUM_METAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LITHIUM_ION")]
        LITHIUM_ION = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelResponseVOContentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LABEL")]
        LABEL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BILL_OF_LADING")]
        BILL_OF_LADING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GAA_FORM")]
        GAA_FORM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HAZMAT_LABEL")]
        HAZMAT_LABEL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"END_OF_DAY_HAZMAT_REPORT")]
        END_OF_DAY_HAZMAT_REPORT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MANIFEST_REPORT")]
        MANIFEST_REPORT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MULTIWEIGHT_REPORT")]
        MULTIWEIGHT_REPORT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MERGED_LABEL_DOCUMENTS")]
        MERGED_LABEL_DOCUMENTS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AUXILIARY")]
        AUXILIARY = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURN_INSTRUCTIONS")]
        RETURN_INSTRUCTIONS = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTANCE_LABEL")]
        ACCEPTANCE_LABEL = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"COMMERCIAL_INVOICE")]
        COMMERCIAL_INVOICE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PROFORMA_INVOICE")]
        PROFORMA_INVOICE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"USMCA_CERTIFICATION_OF_ORIGIN")]
        USMCA_CERTIFICATION_OF_ORIGIN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CERTIFICATE_OF_ORIGIN")]
        CERTIFICATE_OF_ORIGIN = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"MERGED_LABELS_ONLY")]
        MERGED_LABELS_ONLY = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"TERMS_AND_CONDITIONS")]
        TERMS_AND_CONDITIONS = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlertType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOTE")]
        NOTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PieceResponseServiceCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXPRESS")]
        EXPRESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUND")]
        GROUND = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPRESS_FREIGHT")]
        EXPRESS_FREIGHT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FREIGHT")]
        FREIGHT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SMARTPOST")]
        SMARTPOST = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPRESS_PARCEL")]
        EXPRESS_PARCEL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NULL")]
        NULL = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HazardousCommodityQuantityDetailQuantityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GROSS")]
        GROSS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NET")]
        NET = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HazardousCommodityQuantityDetail002QuantityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GROSS")]
        GROSS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NET")]
        NET = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HazardousCommodityOptionDetail01LabelTextOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"APPEND")]
        APPEND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OVERRIDE")]
        OVERRIDE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProcessingOptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INCLUDE_SPECIAL_PROVISIONS")]
        INCLUDE_SPECIAL_PROVISIONS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HazardousCommodityDescription01PackingGroup
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"II")]
        II = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"III")]
        III = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Full_Schema_Cancel_ShipmentDeletionControl
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DELETE_ALL_PACKAGES")]
        DELETE_ALL_PACKAGES = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Output : BaseProcessOutputVO_GetOpenShipmentResults
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequestedShipmentVerifyPickupType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT_FEDEX TO_SCHEDULE")]
        CONTACT_FEDEX_TO_SCHEDULE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DROPOFF_AT_FEDEX_LOCATION")]
        DROPOFF_AT_FEDEX_LOCATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"USE_SCHEDULED_PICKUP")]
        USE_SCHEDULED_PICKUP = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RateRequestType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LIST")]
        LIST = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PREFERRED")]
        PREFERRED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT")]
        ACCOUNT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INCENTIVE")]
        INCENTIVE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RETAIL")]
        RETAIL = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EMailNotificationDetailAggregationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PER_PACKAGE")]
        PER_PACKAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PER_SHIPMENT")]
        PER_SHIPMENT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmailNotificationRecipientType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BROKER")]
        BROKER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RECIPIENT")]
        RECIPIENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPER")]
        SHIPPER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"THIRD_PARTY")]
        THIRD_PARTY = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmailNotificationRecipientNotificationFormatType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HTML")]
        HTML = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmailNotificationRecipientNotificationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
        EMAIL = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NotificationEventType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ON_DELIVERY")]
        ON_DELIVERY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_EXCEPTION")]
        ON_EXCEPTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_SHIPMENT")]
        ON_SHIPMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_TENDER")]
        ON_TENDER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_ESTIMATED_DELIVERY")]
        ON_ESTIMATED_DELIVERY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_BILL_OF_LADING")]
        ON_BILL_OF_LADING = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_PICKUP_DRIVER_ARRIVED")]
        ON_PICKUP_DRIVER_ARRIVED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_PICKUP_DRIVER_ASSIGNED")]
        ON_PICKUP_DRIVER_ASSIGNED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_PICKUP_DRIVER_DEPARTED")]
        ON_PICKUP_DRIVER_DEPARTED = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_PICKUP_DRIVER_EN_ROUTE")]
        ON_PICKUP_DRIVER_EN_ROUTE = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickupDetail
    {
        /// <summary>
        /// Specify the time and date the package will be ready for pickup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("readyPickupDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? ReadyPickupDateTime { get; set; }

        /// <summary>
        /// Specify the last possible pickup date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latestPickupDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? LatestPickupDateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address2
    {
        /// <summary>
        /// This is the combination of number, street name, etc. &lt;br&gt;Note: At least one line is required and streetlines more than 3 will be ignored. Empty lines should not be included. Maximum length per line is 35.&lt;br&gt;Example: [10 FedEx Parkway, Suite 302, .etc.]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetLines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> StreetLines { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The two-letter code used to identify a country. Maximum length is 2.&lt;br&gt;Example: US&lt;br&gt;&lt;a onclick='loadDocReference("countrycodes")'&gt;click here to see Country codes&lt;/a&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? CountryCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact2
    {
        /// <summary>
        /// Identifies the company this contact is associated with. Maximum length is 35.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? CompanyName { get; set; }

        /// <summary>
        /// Identifies the contact person's name. Maximum length is 70.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? PersonName { get; set; }

        /// <summary>
        /// Identifies the phone number associated with this contact. Maximum length is 10.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string? PhoneNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }
}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603
